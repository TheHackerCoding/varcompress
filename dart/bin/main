define(['dart_sdk'], (function load__main(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const io = dart_sdk.io;
  const _js_helper = dart_sdk._js_helper;
  const typed_data = dart_sdk.typed_data;
  const collection = dart_sdk.collection;
  const _interceptors = dart_sdk._interceptors;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var main = Object.create(dart.library);
  var args = Object.create(dart.library);
  var cryptoutils = Object.create(dart.library);
  var logger = Object.create(dart.library);
  var arg_parser = Object.create(dart.library);
  var arg_parser_exception = Object.create(dart.library);
  var arg_results = Object.create(dart.library);
  var option$ = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var hash = Object.create(dart.library);
  var base64 = Object.create(dart.library);
  var ansi_color = Object.create(dart.library);
  var development_filter = Object.create(dart.library);
  var production_filter = Object.create(dart.library);
  var console_output = Object.create(dart.library);
  var stream_output = Object.create(dart.library);
  var memory_output = Object.create(dart.library);
  var multi_output = Object.create(dart.library);
  var pretty_printer = Object.create(dart.library);
  var logfmt_printer = Object.create(dart.library);
  var simple_printer = Object.create(dart.library);
  var hybrid_printer = Object.create(dart.library);
  var prefix_printer = Object.create(dart.library);
  var log_output = Object.create(dart.library);
  var log_filter = Object.create(dart.library);
  var log_printer = Object.create(dart.library);
  var logger$ = Object.create(dart.library);
  var allow_anything_parser = Object.create(dart.library);
  var parser = Object.create(dart.library);
  var usage = Object.create(dart.library);
  var collection$ = Object.create(dart.library);
  var utils$ = Object.create(dart.library);
  var algorithms = Object.create(dart.library);
  var canonicalized_map = Object.create(dart.library);
  var combined_iterable = Object.create(dart.library);
  var combined_list = Object.create(dart.library);
  var combined_map = Object.create(dart.library);
  var comparators = Object.create(dart.library);
  var equality = Object.create(dart.library);
  var equality_map = Object.create(dart.library);
  var equality_set = Object.create(dart.library);
  var functions = Object.create(dart.library);
  var iterable_zip = Object.create(dart.library);
  var priority_queue = Object.create(dart.library);
  var queue_list = Object.create(dart.library);
  var union_set = Object.create(dart.library);
  var union_set_controller = Object.create(dart.library);
  var unmodifiable_wrappers = Object.create(dart.library);
  var wrappers = Object.create(dart.library);
  var utils$0 = Object.create(dart.library);
  var empty_unmodifiable_set = Object.create(dart.library);
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $toString = dartx.toString;
  var $containsKey = dartx.containsKey;
  var $toList = dartx.toList;
  var $add = dartx.add;
  var $values = dartx.values;
  var $firstWhere = dartx.firstWhere;
  var $keys = dartx.keys;
  var $forEach = dartx.forEach;
  var $isEmpty = dartx.isEmpty;
  var $startsWith = dartx.startsWith;
  var $toRadixString = dartx.toRadixString;
  var $replaceAll = dartx.replaceAll;
  var $toLowerCase = dartx.toLowerCase;
  var $modulo = dartx['%'];
  var $truncate = dartx.truncate;
  var $length = dartx.length;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $buffer = dartx.buffer;
  var $offsetInBytes = dartx.offsetInBytes;
  var $lengthInBytes = dartx.lengthInBytes;
  var $asUint8List = dartx.asUint8List;
  var $elementSizeInBytes = dartx.elementSizeInBytes;
  var $_equals = dartx._equals;
  var $hashCode = dartx.hashCode;
  var $setRange = dartx.setRange;
  var $remainder = dartx.remainder;
  var $rightShift = dartx['>>'];
  var $codeUnitAt = dartx.codeUnitAt;
  var $clamp = dartx.clamp;
  var $round = dartx.round;
  var $removeWhere = dartx.removeWhere;
  var $split = dartx.split;
  var $replaceFirst = dartx.replaceFirst;
  var $join = dartx.join;
  var $matchAsPrefix = dartx.matchAsPrefix;
  var $padLeft = dartx.padLeft;
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $isNotEmpty = dartx.isNotEmpty;
  var $addAll = dartx.addAll;
  var $first = dartx.first;
  var $clear = dartx.clear;
  var $contains = dartx.contains;
  var $putIfAbsent = dartx.putIfAbsent;
  var $sort = dartx.sort;
  var $sublist = dartx.sublist;
  var $trim = dartx.trim;
  var $removeRange = dartx.removeRange;
  var $removeLast = dartx.removeLast;
  var $times = dartx['*'];
  var $padRight = dartx.padRight;
  var $trimLeft = dartx.trimLeft;
  var $removeAt = dartx.removeAt;
  var $addEntries = dartx.addEntries;
  var $cast = dartx.cast;
  var $any = dartx.any;
  var $entries = dartx.entries;
  var $remove = dartx.remove;
  var $update = dartx.update;
  var $updateAll = dartx.updateAll;
  var $last = dartx.last;
  var $containsValue = dartx.containsValue;
  var $iterator = dartx.iterator;
  var $every = dartx.every;
  var $fold = dartx.fold;
  var $retainWhere = dartx.retainWhere;
  var $sign = dartx.sign;
  var $elementAt = dartx.elementAt;
  var $expand = dartx.expand;
  var $followedBy = dartx.followedBy;
  var $lastWhere = dartx.lastWhere;
  var $single = dartx.single;
  var $singleWhere = dartx.singleWhere;
  var $skip = dartx.skip;
  var $skipWhile = dartx.skipWhile;
  var $take = dartx.take;
  var $takeWhile = dartx.takeWhile;
  var $toSet = dartx.toSet;
  var $where = dartx.where;
  var $whereType = dartx.whereType;
  var $reversed = dartx.reversed;
  var $isOdd = dartx.isOdd;
  var $fillRange = dartx.fillRange;
  var $plus = dartx['+'];
  var $asMap = dartx.asMap;
  var $getRange = dartx.getRange;
  var $indexWhere = dartx.indexWhere;
  var $insert = dartx.insert;
  var $insertAll = dartx.insertAll;
  var $lastIndexOf = dartx.lastIndexOf;
  var $lastIndexWhere = dartx.lastIndexWhere;
  var $replaceRange = dartx.replaceRange;
  var $setAll = dartx.setAll;
  var $shuffle = dartx.shuffle;
  var $compareTo = dartx.compareTo;
  var StringL = () => (StringL = dart.constFn(dart.legacy(core.String)))();
  var IdentityMapOfStringL$dynamic = () => (IdentityMapOfStringL$dynamic = dart.constFn(_js_helper.IdentityMap$(StringL(), dart.dynamic)))();
  var Uint8ListL = () => (Uint8ListL = dart.constFn(dart.legacy(typed_data.Uint8List)))();
  var Uint8ListLToUint8ListL = () => (Uint8ListLToUint8ListL = dart.constFn(dart.fnType(Uint8ListL(), [Uint8ListL()])))();
  var OptionL = () => (OptionL = dart.constFn(dart.legacy(option$.Option)))();
  var UnmodifiableMapViewOfStringL$OptionL = () => (UnmodifiableMapViewOfStringL$OptionL = dart.constFn(collection.UnmodifiableMapView$(StringL(), OptionL())))();
  var ArgParserL = () => (ArgParserL = dart.constFn(dart.legacy(arg_parser.ArgParser)))();
  var UnmodifiableMapViewOfStringL$ArgParserL = () => (UnmodifiableMapViewOfStringL$ArgParserL = dart.constFn(collection.UnmodifiableMapView$(StringL(), ArgParserL())))();
  var IdentityMapOfStringL$OptionL = () => (IdentityMapOfStringL$OptionL = dart.constFn(_js_helper.IdentityMap$(StringL(), OptionL())))();
  var IdentityMapOfStringL$ArgParserL = () => (IdentityMapOfStringL$ArgParserL = dart.constFn(_js_helper.IdentityMap$(StringL(), ArgParserL())))();
  var boolL = () => (boolL = dart.constFn(dart.legacy(core.bool)))();
  var dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))();
  var JSArrayOfStringL = () => (JSArrayOfStringL = dart.constFn(_interceptors.JSArray$(StringL())))();
  var ListOfStringL = () => (ListOfStringL = dart.constFn(core.List$(StringL())))();
  var ListLOfStringL = () => (ListLOfStringL = dart.constFn(dart.legacy(ListOfStringL())))();
  var ListQueueOfStringL = () => (ListQueueOfStringL = dart.constFn(collection.ListQueue$(StringL())))();
  var OptionLToboolL = () => (OptionLToboolL = dart.constFn(dart.fnType(boolL(), [OptionL()])))();
  var VoidToNullN = () => (VoidToNullN = dart.constFn(dart.fnType(core.Null, [])))();
  var UnmodifiableListViewOfStringL = () => (UnmodifiableListViewOfStringL = dart.constFn(collection.UnmodifiableListView$(StringL())))();
  var LinkedHashSetOfStringL = () => (LinkedHashSetOfStringL = dart.constFn(collection.LinkedHashSet$(StringL())))();
  var StringLAndOptionLToNullN = () => (StringLAndOptionLToNullN = dart.constFn(dart.fnType(core.Null, [StringL(), OptionL()])))();
  var MapOfStringL$StringL = () => (MapOfStringL$StringL = dart.constFn(core.Map$(StringL(), StringL())))();
  var intL = () => (intL = dart.constFn(dart.legacy(core.int)))();
  var ListOfintL = () => (ListOfintL = dart.constFn(core.List$(intL())))();
  var ListLOfintL = () => (ListLOfintL = dart.constFn(dart.legacy(ListOfintL())))();
  var BigIntL = () => (BigIntL = dart.constFn(dart.legacy(core.BigInt)))();
  var TypedDataL = () => (TypedDataL = dart.constFn(dart.legacy(typed_data.TypedData)))();
  var ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  var HashL = () => (HashL = dart.constFn(dart.legacy(hash.Hash)))();
  var VoidToboolL = () => (VoidToboolL = dart.constFn(dart.fnType(boolL(), [])))();
  var ObjectN = () => (ObjectN = dart.constFn(dart.nullable(core.Object)))();
  var ObjectNTovoid = () => (ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [ObjectN()])))();
  var StreamControllerOfListLOfStringL = () => (StreamControllerOfListLOfStringL = dart.constFn(async.StreamController$(ListLOfStringL())))();
  var OutputEventL = () => (OutputEventL = dart.constFn(dart.legacy(logger$.OutputEvent)))();
  var ListQueueOfOutputEventL = () => (ListQueueOfOutputEventL = dart.constFn(collection.ListQueue$(OutputEventL())))();
  var LogOutputL = () => (LogOutputL = dart.constFn(dart.legacy(log_output.LogOutput)))();
  var JSArrayOfLogOutputL = () => (JSArrayOfLogOutputL = dart.constFn(_interceptors.JSArray$(LogOutputL())))();
  var LogOutputLToboolL = () => (LogOutputLToboolL = dart.constFn(dart.fnType(boolL(), [LogOutputL()])))();
  var LogOutputLTovoid = () => (LogOutputLTovoid = dart.constFn(dart.fnType(dart.void, [LogOutputL()])))();
  var intLToStringL = () => (intLToStringL = dart.constFn(dart.fnType(StringL(), [intL()])))();
  var MapL = () => (MapL = dart.constFn(dart.legacy(core.Map)))();
  var IterableL = () => (IterableL = dart.constFn(dart.legacy(core.Iterable)))();
  var LevelL = () => (LevelL = dart.constFn(dart.legacy(logger$.Level)))();
  var AnsiColorL = () => (AnsiColorL = dart.constFn(dart.legacy(ansi_color.AnsiColor)))();
  var LinkedMapOfLevelL$AnsiColorL = () => (LinkedMapOfLevelL$AnsiColorL = dart.constFn(_js_helper.LinkedMap$(LevelL(), AnsiColorL())))();
  var LinkedMapOfLevelL$StringL = () => (LinkedMapOfLevelL$StringL = dart.constFn(_js_helper.LinkedMap$(LevelL(), StringL())))();
  var numL = () => (numL = dart.constFn(dart.legacy(core.num)))();
  var dynamicToNullN = () => (dynamicToNullN = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
  var LinkedMapOfLevelL$dynamic = () => (LinkedMapOfLevelL$dynamic = dart.constFn(_js_helper.LinkedMap$(LevelL(), dart.dynamic)))();
  var LevelLAndStringLToStringL = () => (LevelLAndStringLToStringL = dart.constFn(dart.fnType(StringL(), [LevelL(), StringL()])))();
  var StringLToStringL = () => (StringLToStringL = dart.constFn(dart.fnType(StringL(), [StringL()])))();
  var StringLAndStringLToStringL = () => (StringLAndStringLToStringL = dart.constFn(dart.fnType(StringL(), [StringL(), StringL()])))();
  var StackTraceL = () => (StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))();
  var MapOfStringL$ArgParserL = () => (MapOfStringL$ArgParserL = dart.constFn(core.Map$(StringL(), ArgParserL())))();
  var MapLOfStringL$ArgParserL = () => (MapLOfStringL$ArgParserL = dart.constFn(dart.legacy(MapOfStringL$ArgParserL())))();
  var SymbolL = () => (SymbolL = dart.constFn(dart.legacy(core.Symbol)))();
  var LinkedMapOfSymbolL$dynamic = () => (LinkedMapOfSymbolL$dynamic = dart.constFn(_js_helper.LinkedMap$(SymbolL(), dart.dynamic)))();
  var ListL = () => (ListL = dart.constFn(dart.legacy(core.List)))();
  var MapOfStringL$OptionL = () => (MapOfStringL$OptionL = dart.constFn(core.Map$(StringL(), OptionL())))();
  var MapLOfStringL$OptionL = () => (MapLOfStringL$OptionL = dart.constFn(dart.legacy(MapOfStringL$OptionL())))();
  var ArgParserExceptionL = () => (ArgParserExceptionL = dart.constFn(dart.legacy(arg_parser_exception.ArgParserException)))();
  var VoidToListLOfStringL = () => (VoidToListLOfStringL = dart.constFn(dart.fnType(ListLOfStringL(), [])))();
  var dynamicToStringL = () => (dynamicToStringL = dart.constFn(dart.fnType(StringL(), [dart.dynamic])))();
  var JSArrayOfintL = () => (JSArrayOfintL = dart.constFn(_interceptors.JSArray$(intL())))();
  var intLAndintLTointL = () => (intLAndintLTointL = dart.constFn(dart.fnType(intL(), [intL(), intL()])))();
  var dynamicToboolL = () => (dynamicToboolL = dart.constFn(dart.fnType(boolL(), [dart.dynamic])))();
  var IterableOfStringL = () => (IterableOfStringL = dart.constFn(core.Iterable$(StringL())))();
  var StringLAndintLToboolL = () => (StringLAndintLToboolL = dart.constFn(dart.fnType(boolL(), [StringL(), intL()])))();
  var DefaultEqualityOfNullN = () => (DefaultEqualityOfNullN = dart.constFn(equality.DefaultEquality$(core.Null)))();
  var _MapEntryL = () => (_MapEntryL = dart.constFn(dart.legacy(equality._MapEntry)))();
  var LinkedMapOf_MapEntryL$intL = () => (LinkedMapOf_MapEntryL$intL = dart.constFn(_js_helper.LinkedMap$(_MapEntryL(), intL())))();
  var SetL = () => (SetL = dart.constFn(dart.legacy(core.Set)))();
  var ComparableL = () => (ComparableL = dart.constFn(dart.legacy(core.Comparable)))();
  const CT = Object.create(null);
  var L12 = "package:logger/src/log_output.dart";
  var L36 = "package:collection/src/equality.dart";
  var L0 = "package:args/src/arg_parser.dart";
  var L27 = "package:args/src/usage.dart";
  var L34 = "package:collection/src/combined_wrappers/combined_map.dart";
  var L18 = "package:logger/src/printers/pretty_printer.dart";
  var L38 = "package:collection/src/equality_map.dart";
  var L33 = "package:collection/src/combined_wrappers/combined_list.dart";
  var L8 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/logger-0.9.4/lib/src/filters/development_filter.dart";
  var L11 = "package:logger/src/filters/production_filter.dart";
  var L4 = "package:cryptoutils/utils.dart";
  var L3 = "package:args/src/option.dart";
  var L20 = "package:logger/src/printers/simple_printer.dart";
  var L17 = "package:logger/src/log_printer.dart";
  var L41 = "package:collection/src/priority_queue.dart";
  var L47 = "package:collection/src/utils.dart";
  var L45 = "package:collection/src/union_set.dart";
  var L37 = "package:collection/src/wrappers.dart";
  var L31 = "package:collection/src/canonicalized_map.dart";
  var L26 = "package:args/src/parser.dart";
  var L16 = "package:logger/src/outputs/multi_output.dart";
  var L42 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/collection-1.14.13/lib/src/queue_list.dart";
  var L40 = "package:collection/src/iterable_zip.dart";
  var L32 = "package:collection/src/combined_wrappers/combined_iterable.dart";
  var L23 = "package:logger/src/logger.dart";
  var L25 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/args-1.6.0/lib/src/parser.dart";
  var L24 = "package:args/src/allow_anything_parser.dart";
  var L43 = "package:collection/src/queue_list.dart";
  var L14 = "package:logger/src/outputs/stream_output.dart";
  var L9 = "package:logger/src/log_filter.dart";
  var L29 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/collection-1.14.13/lib/src/algorithms.dart";
  var L15 = "package:logger/src/outputs/memory_output.dart";
  var L1 = "package:args/src/arg_parser_exception.dart";
  var L48 = "package:collection/src/empty_unmodifiable_set.dart";
  var L2 = "package:args/src/arg_results.dart";
  var L21 = "package:logger/src/printers/hybrid_printer.dart";
  var L13 = "package:logger/src/outputs/console_output.dart";
  var L5 = "package:cryptoutils/hash.dart";
  var L44 = "package:collection/src/unmodifiable_wrappers.dart";
  var L7 = "package:logger/src/ansi_color.dart";
  var L6 = "package:cryptoutils/encoding/base64.dart";
  var L39 = "package:collection/src/equality_set.dart";
  var L19 = "package:logger/src/printers/logfmt_printer.dart";
  var L22 = "package:logger/src/printers/prefix_printer.dart";
  var L30 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/collection-1.14.13/lib/src/canonicalized_map.dart";
  var L10 = "package:logger/src/filters/development_filter.dart";
  var L28 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/args-1.6.0/lib/src/utils.dart";
  var L35 = "file:///home/thebozzkg/.pub-cache/hosted/pub.dartlang.org/collection-1.14.13/lib/src/comparators.dart";
  var L46 = "package:collection/src/union_set_controller.dart";
  dart.defineLazy(CT, {
    get C0() {
      return C0 = dart.constList([], StringL());
    },
    get C1() {
      return C1 = dart.const({
        __proto__: option$.OptionType.prototype,
        [name$1]: "OptionType.flag"
      });
    },
    get C2() {
      return C2 = dart.const({
        __proto__: option$.OptionType.prototype,
        [name$1]: "OptionType.single"
      });
    },
    get C3() {
      return C3 = dart.const({
        __proto__: option$.OptionType.prototype,
        [name$1]: "OptionType.multiple"
      });
    },
    get C4() {
      return C4 = dart.constList([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, 0, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2], intL());
    },
    get C5() {
      return C5 = dart.fn(core.print, ObjectNTovoid());
    },
    get C6() {
      return C6 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.verbose",
        index: 0
      });
    },
    get C7() {
      return C7 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.debug",
        index: 1
      });
    },
    get C8() {
      return C8 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.info",
        index: 2
      });
    },
    get C9() {
      return C9 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.warning",
        index: 3
      });
    },
    get C10() {
      return C10 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.error",
        index: 4
      });
    },
    get C11() {
      return C11 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.wtf",
        index: 5
      });
    },
    get C12() {
      return C12 = dart.const({
        __proto__: logger$.Level.prototype,
        [_name$]: "Level.nothing",
        index: 6
      });
    },
    get C13() {
      return C13 = dart.constList([C6 || CT.C6, C7 || CT.C7, C8 || CT.C8, C9 || CT.C9, C10 || CT.C10, C11 || CT.C11, C12 || CT.C12], LevelL());
    },
    get C14() {
      return C14 = dart.constMap(StringL(), OptionL(), []);
    },
    get C15() {
      return C15 = dart.constMap(StringL(), ArgParserL(), []);
    },
    get C16() {
      return C16 = dart.const(new _js_helper.PrivateSymbol.new('_commands', _commands$));
    },
    get C17() {
      return C17 = dart.const(new _js_helper.PrivateSymbol.new('_addOption', _addOption$));
    },
    get C18() {
      return C18 = dart.const(new _internal.Symbol.new('negatable'));
    },
    get C19() {
      return C19 = dart.const(new _internal.Symbol.new('splitCommas'));
    },
    get C20() {
      return C20 = dart.const(new _internal.Symbol.new('hide'));
    },
    get C21() {
      return C21 = dart.const(new _js_helper.PrivateSymbol.new('_optionsAndSeparators', _optionsAndSeparators$));
    },
    get C22() {
      return C22 = dart.const(new _js_helper.PrivateSymbol.new('_options', _options$));
    },
    get C23() {
      return C23 = dart.constMap(StringL(), dart.dynamic, []);
    },
    get C24() {
      return C24 = dart.const({
        __proto__: DefaultEqualityOfNullN().prototype
      });
    },
    get C25() {
      return C25 = dart.const({
        __proto__: equality.DefaultEquality.prototype
      });
    },
    get C26() {
      return C26 = dart.constList([], core.Null);
    },
    get C27() {
      return C27 = dart.const(new _js_helper.PrivateSymbol.new('_base', _base$4));
    },
    get C28() {
      return C28 = dart.const(new _js_helper.PrivateSymbol.new('_setBase', _setBase$));
    }
  }, false);
  main.repeatString = function repeatString(x, times) {
    let y = "";
    while (dart.notNull(times) > 0) {
      y = y + dart.notNull(x);
      times = dart.notNull(times) - 1;
    }
    return y;
  };
  main.error = function error(x) {
    main.logger.e("[ERROR] " + dart.notNull(x));
    io.exit(1);
  };
  main.main = function main$(args) {
    let t0;
    let parser = arg_parser.ArgParser.new();
    t0 = parser;
    (() => {
      t0.addOption("out", {abbr: "o"});
      t0.addOption("file", {abbr: "f"});
      t0.addOption("dictionary", {abbr: "d"});
      return t0;
    })();
    let results = parser.parse(args);
    let original = new (IdentityMapOfStringL$dynamic()).from(["fileInput", results._get("file")]);
    if (results._get("file") == null) {
      main.error("Missing file argument!");
    }
    original[$_set]("fileContent", io.File.new(core.String.as(original[$_get]("fileInput"))).readAsBytes().then(Uint8ListL(), dart.fn(contents => contents, Uint8ListLToUint8ListL())));
    core.print(dart.toString(original[$_get]("fileContent")));
  };
  dart.defineLazy(main, {
    /*main.logger*/get logger() {
      return new logger$.Logger.new();
    },
    set logger(_) {}
  }, true);
  var _optionsAndSeparators = dart.privateName(arg_parser, "_optionsAndSeparators");
  var _options = dart.privateName(arg_parser, "_options");
  var _commands = dart.privateName(arg_parser, "_commands");
  var _addOption = dart.privateName(arg_parser, "_addOption");
  var options$ = dart.privateName(arg_parser, "ArgParser.options");
  var commands$ = dart.privateName(arg_parser, "ArgParser.commands");
  var allowTrailingOptions$ = dart.privateName(arg_parser, "ArgParser.allowTrailingOptions");
  var usageLineLength$ = dart.privateName(arg_parser, "ArgParser.usageLineLength");
  arg_parser.ArgParser = class ArgParser extends core.Object {
    get options() {
      return this[options$];
    }
    set options(value) {
      super.options = value;
    }
    get commands() {
      return this[commands$];
    }
    set commands(value) {
      super.commands = value;
    }
    get allowTrailingOptions() {
      return this[allowTrailingOptions$];
    }
    set allowTrailingOptions(value) {
      super.allowTrailingOptions = value;
    }
    get usageLineLength() {
      return this[usageLineLength$];
    }
    set usageLineLength(value) {
      super.usageLineLength = value;
    }
    get allowsAnything() {
      return false;
    }
    static new(opts) {
      let allowTrailingOptions = opts && 'allowTrailingOptions' in opts ? opts.allowTrailingOptions : true;
      let usageLineLength = opts && 'usageLineLength' in opts ? opts.usageLineLength : null;
      return new arg_parser.ArgParser.__(new (IdentityMapOfStringL$OptionL()).new(), new (IdentityMapOfStringL$ArgParserL()).new(), {allowTrailingOptions: allowTrailingOptions, usageLineLength: usageLineLength});
    }
    addCommand(name, parser = null) {
      if (dart.test(this[_commands][$containsKey](name))) {
        dart.throw(new core.ArgumentError.new("Duplicate command \"" + dart.str(name) + "\"."));
      }
      parser == null ? parser = arg_parser.ArgParser.new() : null;
      this[_commands][$_set](name, parser);
      return parser;
    }
    addFlag(name, opts) {
      let abbr = opts && 'abbr' in opts ? opts.abbr : null;
      let help = opts && 'help' in opts ? opts.help : null;
      let defaultsTo = opts && 'defaultsTo' in opts ? opts.defaultsTo : false;
      let negatable = opts && 'negatable' in opts ? opts.negatable : true;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      this[_addOption](name, abbr, help, null, null, null, defaultsTo, callback == null ? null : dart.fn(value => callback(boolL().as(value)), dynamicTovoid()), option$.OptionType.flag, {negatable: negatable, hide: hide});
    }
    addOption(name, opts) {
      let abbr = opts && 'abbr' in opts ? opts.abbr : null;
      let help = opts && 'help' in opts ? opts.help : null;
      let valueHelp = opts && 'valueHelp' in opts ? opts.valueHelp : null;
      let allowed = opts && 'allowed' in opts ? opts.allowed : null;
      let allowedHelp = opts && 'allowedHelp' in opts ? opts.allowedHelp : null;
      let defaultsTo = opts && 'defaultsTo' in opts ? opts.defaultsTo : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : null;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      if (!dart.test(allowMultiple) && splitCommas != null) {
        dart.throw(new core.ArgumentError.new("splitCommas may not be set if allowMultiple is false."));
      }
      this[_addOption](name, abbr, help, valueHelp, allowed, allowedHelp, dart.test(allowMultiple) ? defaultsTo == null ? JSArrayOfStringL().of([]) : JSArrayOfStringL().of([defaultsTo]) : defaultsTo, callback, dart.test(allowMultiple) ? option$.OptionType.multiple : option$.OptionType.single, {splitCommas: splitCommas, hide: hide});
    }
    addMultiOption(name, opts) {
      let t0, t0$;
      let abbr = opts && 'abbr' in opts ? opts.abbr : null;
      let help = opts && 'help' in opts ? opts.help : null;
      let valueHelp = opts && 'valueHelp' in opts ? opts.valueHelp : null;
      let allowed = opts && 'allowed' in opts ? opts.allowed : null;
      let allowedHelp = opts && 'allowedHelp' in opts ? opts.allowedHelp : null;
      let defaultsTo = opts && 'defaultsTo' in opts ? opts.defaultsTo : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : true;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      this[_addOption](name, abbr, help, valueHelp, allowed, allowedHelp, (t0$ = (t0 = defaultsTo, t0 == null ? null : t0[$toList]()), t0$ == null ? JSArrayOfStringL().of([]) : t0$), callback == null ? null : dart.fn(value => callback(ListLOfStringL().as(value)), dynamicTovoid()), option$.OptionType.multiple, {splitCommas: splitCommas, hide: hide});
    }
    [_addOption](name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, opts) {
      let negatable = opts && 'negatable' in opts ? opts.negatable : false;
      let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : null;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      if (dart.test(this[_options][$containsKey](name))) {
        dart.throw(new core.ArgumentError.new("Duplicate option \"" + dart.str(name) + "\"."));
      }
      if (abbr != null) {
        let existing = this.findByAbbreviation(abbr);
        if (existing != null) {
          dart.throw(new core.ArgumentError.new("Abbreviation \"" + dart.str(abbr) + "\" is already used by \"" + dart.str(existing.name) + "\"."));
        }
      }
      let option = option$.newOption(name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, {negatable: negatable, splitCommas: splitCommas, hide: hide});
      this[_options][$_set](name, option);
      this[_optionsAndSeparators][$add](option);
    }
    addSeparator(text) {
      this[_optionsAndSeparators][$add](text);
    }
    parse(args) {
      return new parser.Parser.new(null, this, ListQueueOfStringL().of(args)).parse();
    }
    getUsage() {
      return this.usage;
    }
    get usage() {
      return new usage.Usage.new(this[_optionsAndSeparators], {lineLength: this.usageLineLength}).generate();
    }
    getDefault(option) {
      if (!dart.test(this.options[$containsKey](option))) {
        dart.throw(new core.ArgumentError.new("No option named " + dart.str(option)));
      }
      return this.options[$_get](option).defaultsTo;
    }
    findByAbbreviation(abbr) {
      return this.options[$values][$firstWhere](dart.fn(option => option.abbr == abbr, OptionLToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
    }
  };
  (arg_parser.ArgParser.__ = function(options, commands, opts) {
    let t0;
    let allowTrailingOptions = opts && 'allowTrailingOptions' in opts ? opts.allowTrailingOptions : true;
    let usageLineLength = opts && 'usageLineLength' in opts ? opts.usageLineLength : null;
    this[_optionsAndSeparators] = [];
    this[usageLineLength$] = usageLineLength;
    this[_options] = options;
    this[options$] = new (UnmodifiableMapViewOfStringL$OptionL()).new(options);
    this[_commands] = commands;
    this[commands$] = new (UnmodifiableMapViewOfStringL$ArgParserL()).new(commands);
    this[allowTrailingOptions$] = (t0 = allowTrailingOptions, t0 == null ? false : t0);
    ;
  }).prototype = arg_parser.ArgParser.prototype;
  dart.addTypeTests(arg_parser.ArgParser);
  dart.addTypeCaches(arg_parser.ArgParser);
  dart.setMethodSignature(arg_parser.ArgParser, () => ({
    __proto__: dart.getMethods(arg_parser.ArgParser.__proto__),
    addCommand: dart.fnType(dart.legacy(arg_parser.ArgParser), [dart.legacy(core.String)], [dart.legacy(arg_parser.ArgParser)]),
    addFlag: dart.fnType(dart.void, [dart.legacy(core.String)], {abbr: dart.legacy(core.String), callback: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])), defaultsTo: dart.legacy(core.bool), help: dart.legacy(core.String), hide: dart.legacy(core.bool), negatable: dart.legacy(core.bool)}, {}),
    addOption: dart.fnType(dart.void, [dart.legacy(core.String)], {abbr: dart.legacy(core.String), allowMultiple: dart.legacy(core.bool), allowed: dart.legacy(core.Iterable$(dart.legacy(core.String))), allowedHelp: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), callback: dart.legacy(core.Function), defaultsTo: dart.legacy(core.String), help: dart.legacy(core.String), hide: dart.legacy(core.bool), splitCommas: dart.legacy(core.bool), valueHelp: dart.legacy(core.String)}, {}),
    addMultiOption: dart.fnType(dart.void, [dart.legacy(core.String)], {abbr: dart.legacy(core.String), allowed: dart.legacy(core.Iterable$(dart.legacy(core.String))), allowedHelp: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), callback: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))])), defaultsTo: dart.legacy(core.Iterable$(dart.legacy(core.String))), help: dart.legacy(core.String), hide: dart.legacy(core.bool), splitCommas: dart.legacy(core.bool), valueHelp: dart.legacy(core.String)}, {}),
    [_addOption]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.Iterable$(dart.legacy(core.String))), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), dart.dynamic, dart.legacy(core.Function), dart.legacy(option$.OptionType)], {hide: dart.legacy(core.bool), negatable: dart.legacy(core.bool), splitCommas: dart.legacy(core.bool)}, {}),
    addSeparator: dart.fnType(dart.void, [dart.legacy(core.String)]),
    parse: dart.fnType(dart.legacy(arg_results.ArgResults), [dart.legacy(core.Iterable$(dart.legacy(core.String)))]),
    getUsage: dart.fnType(dart.legacy(core.String), []),
    getDefault: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    findByAbbreviation: dart.fnType(dart.legacy(option$.Option), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(arg_parser.ArgParser, () => ({
    __proto__: dart.getGetters(arg_parser.ArgParser.__proto__),
    allowsAnything: dart.legacy(core.bool),
    usage: dart.legacy(core.String)
  }));
  dart.setLibraryUri(arg_parser.ArgParser, L0);
  dart.setFieldSignature(arg_parser.ArgParser, () => ({
    __proto__: dart.getFields(arg_parser.ArgParser.__proto__),
    [_options]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(option$.Option)))),
    [_commands]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(arg_parser.ArgParser)))),
    options: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(option$.Option)))),
    commands: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(arg_parser.ArgParser)))),
    [_optionsAndSeparators]: dart.finalFieldType(dart.legacy(core.List)),
    allowTrailingOptions: dart.finalFieldType(dart.legacy(core.bool)),
    usageLineLength: dart.finalFieldType(dart.legacy(core.int))
  }));
  var C0;
  var commands$0 = dart.privateName(arg_parser_exception, "ArgParserException.commands");
  arg_parser_exception.ArgParserException = class ArgParserException extends core.FormatException {
    get commands() {
      return this[commands$0];
    }
    set commands(value) {
      super.commands = value;
    }
  };
  (arg_parser_exception.ArgParserException.new = function(message, commands = null) {
    this[commands$0] = commands == null ? C0 || CT.C0 : ListOfStringL().unmodifiable(commands);
    arg_parser_exception.ArgParserException.__proto__.new.call(this, message);
    ;
  }).prototype = arg_parser_exception.ArgParserException.prototype;
  dart.addTypeTests(arg_parser_exception.ArgParserException);
  dart.addTypeCaches(arg_parser_exception.ArgParserException);
  dart.setLibraryUri(arg_parser_exception.ArgParserException, L1);
  dart.setFieldSignature(arg_parser_exception.ArgParserException, () => ({
    __proto__: dart.getFields(arg_parser_exception.ArgParserException.__proto__),
    commands: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var _parser$ = dart.privateName(arg_results, "_parser");
  var _parsed$ = dart.privateName(arg_results, "_parsed");
  var name$ = dart.privateName(arg_results, "ArgResults.name");
  var command$ = dart.privateName(arg_results, "ArgResults.command");
  var rest$ = dart.privateName(arg_results, "ArgResults.rest");
  var arguments$ = dart.privateName(arg_results, "ArgResults.arguments");
  arg_results.ArgResults = class ArgResults extends core.Object {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get command() {
      return this[command$];
    }
    set command(value) {
      super.command = value;
    }
    get rest() {
      return this[rest$];
    }
    set rest(value) {
      super.rest = value;
    }
    get arguments() {
      return this[arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    _get(name) {
      if (!dart.test(this[_parser$].options[$containsKey](name))) {
        dart.throw(new core.ArgumentError.new("Could not find an option named \"" + dart.str(name) + "\"."));
      }
      return this[_parser$].options[$_get](name).getOrDefault(this[_parsed$][$_get](name));
    }
    get options() {
      let result = LinkedHashSetOfStringL().from(this[_parsed$][$keys]);
      this[_parser$].options[$forEach](dart.fn((name, option) => {
        if (option.defaultsTo != null) result.add(name);
      }, StringLAndOptionLToNullN()));
      return result;
    }
    wasParsed(name) {
      let option = this[_parser$].options[$_get](name);
      if (option == null) {
        dart.throw(new core.ArgumentError.new("Could not find an option named \"" + dart.str(name) + "\"."));
      }
      return this[_parsed$][$containsKey](name);
    }
  };
  (arg_results.ArgResults.__ = function(_parser, _parsed, name, command, rest, $arguments) {
    this[_parser$] = _parser;
    this[_parsed$] = _parsed;
    this[name$] = name;
    this[command$] = command;
    this[rest$] = new (UnmodifiableListViewOfStringL()).new(rest);
    this[arguments$] = new (UnmodifiableListViewOfStringL()).new($arguments);
    ;
  }).prototype = arg_results.ArgResults.prototype;
  dart.addTypeTests(arg_results.ArgResults);
  dart.addTypeCaches(arg_results.ArgResults);
  dart.setMethodSignature(arg_results.ArgResults, () => ({
    __proto__: dart.getMethods(arg_results.ArgResults.__proto__),
    _get: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    wasParsed: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)])
  }));
  dart.setGetterSignature(arg_results.ArgResults, () => ({
    __proto__: dart.getGetters(arg_results.ArgResults.__proto__),
    options: dart.legacy(core.Iterable$(dart.legacy(core.String)))
  }));
  dart.setLibraryUri(arg_results.ArgResults, L2);
  dart.setFieldSignature(arg_results.ArgResults, () => ({
    __proto__: dart.getFields(arg_results.ArgResults.__proto__),
    [_parser$]: dart.finalFieldType(dart.legacy(arg_parser.ArgParser)),
    [_parsed$]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic))),
    name: dart.finalFieldType(dart.legacy(core.String)),
    command: dart.finalFieldType(dart.legacy(arg_results.ArgResults)),
    rest: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    arguments: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  arg_results.newArgResults = function newArgResults(parser, parsed, name, command, rest, $arguments) {
    return new arg_results.ArgResults.__(parser, parsed, name, command, rest, $arguments);
  };
  var name$0 = dart.privateName(option$, "Option.name");
  var abbr$ = dart.privateName(option$, "Option.abbr");
  var help$ = dart.privateName(option$, "Option.help");
  var valueHelp$ = dart.privateName(option$, "Option.valueHelp");
  var allowed$ = dart.privateName(option$, "Option.allowed");
  var allowedHelp$ = dart.privateName(option$, "Option.allowedHelp");
  var defaultsTo$ = dart.privateName(option$, "Option.defaultsTo");
  var negatable$ = dart.privateName(option$, "Option.negatable");
  var callback$ = dart.privateName(option$, "Option.callback");
  var type$ = dart.privateName(option$, "Option.type");
  var splitCommas$ = dart.privateName(option$, "Option.splitCommas");
  var hide$ = dart.privateName(option$, "Option.hide");
  option$.Option = class Option extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get abbr() {
      return this[abbr$];
    }
    set abbr(value) {
      super.abbr = value;
    }
    get help() {
      return this[help$];
    }
    set help(value) {
      super.help = value;
    }
    get valueHelp() {
      return this[valueHelp$];
    }
    set valueHelp(value) {
      super.valueHelp = value;
    }
    get allowed() {
      return this[allowed$];
    }
    set allowed(value) {
      super.allowed = value;
    }
    get allowedHelp() {
      return this[allowedHelp$];
    }
    set allowedHelp(value) {
      super.allowedHelp = value;
    }
    get defaultsTo() {
      return this[defaultsTo$];
    }
    set defaultsTo(value) {
      super.defaultsTo = value;
    }
    get negatable() {
      return this[negatable$];
    }
    set negatable(value) {
      super.negatable = value;
    }
    get callback() {
      return this[callback$];
    }
    set callback(value) {
      super.callback = value;
    }
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get splitCommas() {
      return this[splitCommas$];
    }
    set splitCommas(value) {
      super.splitCommas = value;
    }
    get hide() {
      return this[hide$];
    }
    set hide(value) {
      super.hide = value;
    }
    get abbreviation() {
      return this.abbr;
    }
    get defaultValue() {
      return this.defaultsTo;
    }
    get isFlag() {
      return dart.equals(this.type, option$.OptionType.flag);
    }
    get isSingle() {
      return dart.equals(this.type, option$.OptionType.single);
    }
    get isMultiple() {
      return dart.equals(this.type, option$.OptionType.multiple);
    }
    getOrDefault(value) {
      let t0;
      if (value != null) return value;
      if (dart.test(this.isMultiple)) {
        t0 = this.defaultsTo;
        return t0 == null ? JSArrayOfStringL().of([]) : t0;
      }
      return this.defaultsTo;
    }
  };
  (option$.Option.__ = function(name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, opts) {
    let t0;
    let negatable = opts && 'negatable' in opts ? opts.negatable : null;
    let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : null;
    let hide = opts && 'hide' in opts ? opts.hide : false;
    this[name$0] = name;
    this[abbr$] = abbr;
    this[help$] = help;
    this[valueHelp$] = valueHelp;
    this[defaultsTo$] = defaultsTo;
    this[callback$] = callback;
    this[negatable$] = negatable;
    this[hide$] = hide;
    this[allowed$] = allowed == null ? null : ListOfStringL().unmodifiable(allowed);
    this[allowedHelp$] = allowedHelp == null ? null : MapOfStringL$StringL().unmodifiable(allowedHelp);
    this[type$] = type;
    this[splitCommas$] = (t0 = splitCommas, t0 == null ? dart.equals(type, option$.OptionType.multiple) : t0);
    if (this.name[$isEmpty]) {
      dart.throw(new core.ArgumentError.new("Name cannot be empty."));
    } else if (this.name[$startsWith]("-")) {
      dart.throw(new core.ArgumentError.new("Name " + dart.str(this.name) + " cannot start with \"-\"."));
    }
    if (dart.test(option$.Option._invalidChars.hasMatch(this.name))) {
      dart.throw(new core.ArgumentError.new("Name \"" + dart.str(this.name) + "\" contains invalid characters."));
    }
    if (this.abbr != null) {
      if (this.abbr.length !== 1) {
        dart.throw(new core.ArgumentError.new("Abbreviation must be null or have length 1."));
      } else if (this.abbr === "-") {
        dart.throw(new core.ArgumentError.new("Abbreviation cannot be \"-\"."));
      }
      if (dart.test(option$.Option._invalidChars.hasMatch(this.abbr))) {
        dart.throw(new core.ArgumentError.new("Abbreviation is an invalid character."));
      }
    }
  }).prototype = option$.Option.prototype;
  dart.addTypeTests(option$.Option);
  dart.addTypeCaches(option$.Option);
  dart.setMethodSignature(option$.Option, () => ({
    __proto__: dart.getMethods(option$.Option.__proto__),
    getOrDefault: dart.fnType(dart.dynamic, [dart.dynamic])
  }));
  dart.setGetterSignature(option$.Option, () => ({
    __proto__: dart.getGetters(option$.Option.__proto__),
    abbreviation: dart.legacy(core.String),
    defaultValue: dart.dynamic,
    isFlag: dart.legacy(core.bool),
    isSingle: dart.legacy(core.bool),
    isMultiple: dart.legacy(core.bool)
  }));
  dart.setLibraryUri(option$.Option, L3);
  dart.setFieldSignature(option$.Option, () => ({
    __proto__: dart.getFields(option$.Option.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String)),
    abbr: dart.finalFieldType(dart.legacy(core.String)),
    help: dart.finalFieldType(dart.legacy(core.String)),
    valueHelp: dart.finalFieldType(dart.legacy(core.String)),
    allowed: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    allowedHelp: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String)))),
    defaultsTo: dart.finalFieldType(dart.dynamic),
    negatable: dart.finalFieldType(dart.legacy(core.bool)),
    callback: dart.finalFieldType(dart.legacy(core.Function)),
    type: dart.finalFieldType(dart.legacy(option$.OptionType)),
    splitCommas: dart.finalFieldType(dart.legacy(core.bool)),
    hide: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(option$.Option, {
    /*option$.Option._invalidChars*/get _invalidChars() {
      return core.RegExp.new("[ \\t\\r\\n\"'\\\\/]");
    }
  }, true);
  var name$1 = dart.privateName(option$, "OptionType.name");
  var C1;
  var C2;
  var C3;
  option$.OptionType = class OptionType extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
  };
  (option$.OptionType.__ = function(name) {
    this[name$1] = name;
    ;
  }).prototype = option$.OptionType.prototype;
  dart.addTypeTests(option$.OptionType);
  dart.addTypeCaches(option$.OptionType);
  dart.setLibraryUri(option$.OptionType, L3);
  dart.setFieldSignature(option$.OptionType, () => ({
    __proto__: dart.getFields(option$.OptionType.__proto__),
    name: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(option$.OptionType, {
    /*option$.OptionType.flag*/get flag() {
      return C1 || CT.C1;
    },
    /*option$.OptionType.FLAG*/get FLAG() {
      return C1 || CT.C1;
    },
    /*option$.OptionType.single*/get single() {
      return C2 || CT.C2;
    },
    /*option$.OptionType.SINGLE*/get SINGLE() {
      return C2 || CT.C2;
    },
    /*option$.OptionType.multiple*/get multiple() {
      return C3 || CT.C3;
    },
    /*option$.OptionType.MULTIPLE*/get MULTIPLE() {
      return C3 || CT.C3;
    }
  }, true);
  option$.newOption = function newOption(name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, opts) {
    let negatable = opts && 'negatable' in opts ? opts.negatable : null;
    let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : null;
    let hide = opts && 'hide' in opts ? opts.hide : false;
    return new option$.Option.__(name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, {negatable: negatable, splitCommas: splitCommas, hide: hide});
  };
  utils.CryptoUtils = class CryptoUtils extends core.Object {
    static bytesToHex(bytes) {
      let result = new core.StringBuffer.new();
      for (let part of bytes) {
        result.write((dart.notNull(part) < 16 ? "0" : "") + dart.str(part[$toRadixString](16)));
      }
      return result.toString();
    }
    static hexToBytes(hex) {
      hex = hex[$replaceAll](" ", "");
      hex = hex[$toLowerCase]();
      if (hex.length[$modulo](2) !== 0) hex = "0" + dart.notNull(hex);
      let result = _native_typed_data.NativeUint8List.new((hex.length / 2)[$truncate]());
      for (let i = 0; i < dart.notNull(result[$length]); i = i + 1) {
        let value = ("0123456789abcdef"[$indexOf](hex[$_get](i * 2)) << 4 >>> 0) + "0123456789abcdef"[$indexOf](hex[$_get](i * 2 + 1));
        result[$_set](i, value);
      }
      return result;
    }
    static bytesToBase64(bytes, urlSafe = false, addLineSeparator = false) {
      return new base64.Base64Encoder.new(urlSafe, addLineSeparator).convert(bytes);
    }
    static base64StringToBytes(input) {
      return Uint8ListL().as(new base64.Base64Decoder.new().convert(input));
    }
    static bytesToBigInt(s) {
      if (s == null || s[$length] === 0) {
        return core.BigInt.zero;
      }
      let v = 0;
      for (let t0 of s) {
        let byte = intL().as(t0);
        v = (v << 8 | dart.notNull(byte) & 255) >>> 0;
      }
      return core._BigIntImpl.from(v);
    }
    static bigIntToByteArray(data) {
      let str = null;
      let neg = false;
      if (dart.test(data['<'](core.BigInt.zero))) {
        str = data['~']().toRadixString(16);
        neg = true;
      } else {
        str = data.toRadixString(16);
      }
      let p = 0;
      let len = str.length;
      let blen = ((len + 1) / 2)[$truncate]();
      let boff = 0;
      let bytes = null;
      if (neg) {
        if ((len & 1) === 1) {
          p = -1;
        }
        let byte0 = ~dart.notNull(core.int.parse(str[$substring](0, p + 2), {radix: 16})) >>> 0;
        if (byte0 < -128) byte0 = byte0 + 256;
        if (byte0 >= 0) {
          boff = 1;
          bytes = ListOfintL().new(blen + 1);
          bytes[$_set](0, -1);
          bytes[$_set](1, byte0);
        } else {
          bytes = ListOfintL().new(blen);
          bytes[$_set](0, byte0);
        }
        for (let i = 1; i < blen; i = i + 1) {
          let byte = ~dart.notNull(core.int.parse(str[$substring](p + (i << 1 >>> 0), p + (i << 1 >>> 0) + 2), {radix: 16})) >>> 0;
          if (byte < -128) byte = byte + 256;
          bytes[$_set](i + boff, byte);
        }
      } else {
        if ((len & 1) === 1) {
          p = -1;
        }
        let byte0 = core.int.parse(str[$substring](0, p + 2), {radix: 16});
        if (dart.notNull(byte0) > 127) byte0 = dart.notNull(byte0) - 256;
        if (dart.notNull(byte0) < 0) {
          boff = 1;
          bytes = ListOfintL().new(blen + 1);
          bytes[$_set](0, 0);
          bytes[$_set](1, byte0);
        } else {
          bytes = ListOfintL().new(blen);
          bytes[$_set](0, byte0);
        }
        for (let i = 1; i < blen; i = i + 1) {
          let byte = core.int.parse(str[$substring](p + (i << 1 >>> 0), p + (i << 1 >>> 0) + 2), {radix: 16});
          if (dart.notNull(byte) > 127) byte = dart.notNull(byte) - 256;
          bytes[$_set](i + boff, byte);
        }
      }
      return ListLOfintL().as(bytes);
    }
  };
  (utils.CryptoUtils.new = function() {
    ;
  }).prototype = utils.CryptoUtils.prototype;
  dart.addTypeTests(utils.CryptoUtils);
  dart.addTypeCaches(utils.CryptoUtils);
  dart.setLibraryUri(utils.CryptoUtils, L4);
  dart.defineLazy(utils.CryptoUtils, {
    /*utils.CryptoUtils._BYTE_ALPHABET*/get _BYTE_ALPHABET() {
      return "0123456789abcdef";
    }
  }, true);
  hash.Hash = class Hash extends core.Object {
    static new(content) {
      return new hash._HashBase.new(content);
    }
  };
  (hash.Hash[dart.mixinNew] = function() {
  }).prototype = hash.Hash.prototype;
  dart.addTypeTests(hash.Hash);
  dart.addTypeCaches(hash.Hash);
  hash.Hash[dart.implements] = () => [typed_data.TypedData];
  dart.setLibraryUri(hash.Hash, L5);
  var _content = dart.privateName(hash, "_content");
  hash._HashBase = class _HashBase extends core.Object {
    get bytes() {
      return this[_content];
    }
    asBytes() {
      return this.bytes;
    }
    asBigInteger() {
      return utils.CryptoUtils.bytesToBigInt(this.asBytes());
    }
    copyAsBytes() {
      return _native_typed_data.NativeUint8List.fromList(this[_content]);
    }
    copyAsBigInteger() {
      return utils.CryptoUtils.bytesToBigInt(this.copyAsBytes());
    }
    toHex() {
      return utils.CryptoUtils.bytesToHex(this[_content]);
    }
    toJson() {
      return this.toHex();
    }
    get buffer() {
      return this[_content][$buffer];
    }
    get elementSizeInBytes() {
      return this.lengthInBytes;
    }
    get lengthInBytes() {
      return this[_content][$lengthInBytes];
    }
    get offsetInBytes() {
      return this[_content][$offsetInBytes];
    }
    toString() {
      return this.toHex();
    }
    _equals(other) {
      if (other == null) return false;
      return HashL().is(other) && dart.test(new equality.ListEquality.new().equals(this[_content], other.bytes));
    }
    get hashCode() {
      if (dart.notNull(this[_content][$length]) < 4) return new equality.ListEquality.new().hash(this[_content]);
      return (dart.notNull(this[_content][$_get](dart.notNull(this[_content][$length]) - 1)) ^ dart.notNull(this[_content][$_get](dart.notNull(this[_content][$length]) - 2)) << 8 >>> 0 ^ dart.notNull(this[_content][$_get](dart.notNull(this[_content][$length]) - 3)) << 16 >>> 0 ^ dart.notNull(this[_content][$_get](dart.notNull(this[_content][$length]) - 4)) << 24 >>> 0) >>> 0;
    }
  };
  (hash._HashBase.new = function(content) {
    this[_content] = null;
    if (StringL().is(content))
      content = utils.CryptoUtils.hexToBytes(StringL().as(content));
    else if (!BigIntL().is(content))
      content = dart.dsend(content, 'toByteArray', []);
    else
      content = utils.CryptoUtils.bigIntToByteArray(BigIntL().as(content));
    if (TypedDataL().is(content))
      this[_content] = _native_typed_data.NativeUint8List.fromList(content[$buffer][$asUint8List](content[$offsetInBytes], content[$lengthInBytes]));
    else
      this[_content] = _native_typed_data.NativeUint8List.fromList(ListOfint().as(content));
  }).prototype = hash._HashBase.prototype;
  dart.addTypeTests(hash._HashBase);
  dart.addTypeCaches(hash._HashBase);
  hash._HashBase[dart.implements] = () => [hash.Hash];
  dart.setMethodSignature(hash._HashBase, () => ({
    __proto__: dart.getMethods(hash._HashBase.__proto__),
    asBytes: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    asBigInteger: dart.fnType(dart.legacy(core.BigInt), []),
    copyAsBytes: dart.fnType(dart.legacy(typed_data.Uint8List), []),
    copyAsBigInteger: dart.fnType(dart.legacy(core.BigInt), []),
    toHex: dart.fnType(dart.legacy(core.String), []),
    toJson: dart.fnType(dart.dynamic, []),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(hash._HashBase, () => ({
    __proto__: dart.getGetters(hash._HashBase.__proto__),
    bytes: dart.legacy(typed_data.Uint8List),
    buffer: dart.legacy(typed_data.ByteBuffer),
    [$buffer]: dart.legacy(typed_data.ByteBuffer),
    elementSizeInBytes: dart.legacy(core.int),
    [$elementSizeInBytes]: dart.legacy(core.int),
    lengthInBytes: dart.legacy(core.int),
    [$lengthInBytes]: dart.legacy(core.int),
    offsetInBytes: dart.legacy(core.int),
    [$offsetInBytes]: dart.legacy(core.int),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(hash._HashBase, L5);
  dart.setFieldSignature(hash._HashBase, () => ({
    __proto__: dart.getFields(hash._HashBase.__proto__),
    [_content]: dart.fieldType(dart.legacy(typed_data.Uint8List))
  }));
  dart.defineExtensionMethods(hash._HashBase, ['toString', '_equals']);
  dart.defineExtensionAccessors(hash._HashBase, [
    'buffer',
    'elementSizeInBytes',
    'lengthInBytes',
    'offsetInBytes',
    'hashCode'
  ]);
  hash._FixedSizeHash = class _FixedSizeHash extends hash._HashBase {};
  (hash._FixedSizeHash.new = function(content, supposedSize) {
    let t1;
    hash._FixedSizeHash.__proto__.new.call(this, content);
    if (dart.notNull(this[_content][$length]) < dart.notNull(supposedSize)) {
      let newBytes = (t1 = _native_typed_data.NativeUint8List.new(supposedSize), (() => {
        t1[$setRange](dart.notNull(supposedSize) - dart.notNull(this[_content][$length]), supposedSize, this[_content]);
        return t1;
      })());
      this[_content] = newBytes;
    }
    if (this[_content][$length] != supposedSize) dart.throw(new core.FormatException.new("The input byte array is supposed to be of size " + dart.str(supposedSize)));
  }).prototype = hash._FixedSizeHash.prototype;
  dart.addTypeTests(hash._FixedSizeHash);
  dart.addTypeCaches(hash._FixedSizeHash);
  dart.setLibraryUri(hash._FixedSizeHash, L5);
  hash.Hash128 = class Hash128 extends hash._FixedSizeHash {
    get lengthInBytes() {
      return 16;
    }
  };
  (hash.Hash128.new = function(content) {
    hash.Hash128.__proto__.new.call(this, content, 16);
    ;
  }).prototype = hash.Hash128.prototype;
  dart.addTypeTests(hash.Hash128);
  dart.addTypeCaches(hash.Hash128);
  hash.Hash128[dart.implements] = () => [hash.Hash];
  dart.setLibraryUri(hash.Hash128, L5);
  dart.defineExtensionAccessors(hash.Hash128, ['lengthInBytes']);
  dart.defineLazy(hash.Hash128, {
    /*hash.Hash128.LENGTH*/get LENGTH() {
      return 16;
    },
    /*hash.Hash128.ZERO_HASH*/get ZERO_HASH() {
      return new hash.Hash128.new(_native_typed_data.NativeUint8List.new(16));
    }
  }, true);
  hash.Hash160 = class Hash160 extends hash._FixedSizeHash {
    get lengthInBytes() {
      return 20;
    }
  };
  (hash.Hash160.new = function(content) {
    hash.Hash160.__proto__.new.call(this, content, 20);
    ;
  }).prototype = hash.Hash160.prototype;
  dart.addTypeTests(hash.Hash160);
  dart.addTypeCaches(hash.Hash160);
  hash.Hash160[dart.implements] = () => [hash.Hash];
  dart.setLibraryUri(hash.Hash160, L5);
  dart.defineExtensionAccessors(hash.Hash160, ['lengthInBytes']);
  dart.defineLazy(hash.Hash160, {
    /*hash.Hash160.LENGTH*/get LENGTH() {
      return 20;
    },
    /*hash.Hash160.ZERO_HASH*/get ZERO_HASH() {
      return new hash.Hash160.new(_native_typed_data.NativeUint8List.new(20));
    }
  }, true);
  hash.Hash256 = class Hash256 extends hash._FixedSizeHash {
    get lengthInBytes() {
      return 32;
    }
  };
  (hash.Hash256.new = function(content) {
    hash.Hash256.__proto__.new.call(this, content, 32);
    ;
  }).prototype = hash.Hash256.prototype;
  dart.addTypeTests(hash.Hash256);
  dart.addTypeCaches(hash.Hash256);
  hash.Hash256[dart.implements] = () => [hash.Hash];
  dart.setLibraryUri(hash.Hash256, L5);
  dart.defineExtensionAccessors(hash.Hash256, ['lengthInBytes']);
  dart.defineLazy(hash.Hash256, {
    /*hash.Hash256.LENGTH*/get LENGTH() {
      return 32;
    },
    /*hash.Hash256.ZERO_HASH*/get ZERO_HASH() {
      return new hash.Hash256.new(_native_typed_data.NativeUint8List.new(32));
    }
  }, true);
  hash.Hash512 = class Hash512 extends hash._FixedSizeHash {
    get lengthInBytes() {
      return 64;
    }
  };
  (hash.Hash512.new = function(content) {
    hash.Hash512.__proto__.new.call(this, content, 64);
    ;
  }).prototype = hash.Hash512.prototype;
  dart.addTypeTests(hash.Hash512);
  dart.addTypeCaches(hash.Hash512);
  hash.Hash512[dart.implements] = () => [hash.Hash];
  dart.setLibraryUri(hash.Hash512, L5);
  dart.defineExtensionAccessors(hash.Hash512, ['lengthInBytes']);
  dart.defineLazy(hash.Hash512, {
    /*hash.Hash512.LENGTH*/get LENGTH() {
      return 64;
    },
    /*hash.Hash512.ZERO_HASH*/get ZERO_HASH() {
      return new hash.Hash512.new(_native_typed_data.NativeUint8List.new(64));
    }
  }, true);
  var urlSafe$ = dart.privateName(base64, "Base64Codec.urlSafe");
  var addLineSeparator$ = dart.privateName(base64, "Base64Codec.addLineSeparator");
  base64.Base64Codec = class Base64Codec extends convert.Codec$(dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.String)) {
    get urlSafe() {
      return this[urlSafe$];
    }
    set urlSafe(value) {
      super.urlSafe = value;
    }
    get addLineSeparator() {
      return this[addLineSeparator$];
    }
    set addLineSeparator(value) {
      super.addLineSeparator = value;
    }
    get encoder() {
      return new base64.Base64Encoder.new(this.urlSafe, this.addLineSeparator);
    }
    get decoder() {
      return new base64.Base64Decoder.new();
    }
  };
  (base64.Base64Codec.new = function(urlSafe = false, addLineSeparator = false) {
    this[urlSafe$] = urlSafe;
    this[addLineSeparator$] = addLineSeparator;
    base64.Base64Codec.__proto__.new.call(this);
    ;
  }).prototype = base64.Base64Codec.prototype;
  dart.addTypeTests(base64.Base64Codec);
  dart.addTypeCaches(base64.Base64Codec);
  dart.setGetterSignature(base64.Base64Codec, () => ({
    __proto__: dart.getGetters(base64.Base64Codec.__proto__),
    encoder: dart.legacy(convert.Converter$(dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.String))),
    decoder: dart.legacy(convert.Converter$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.int)))))
  }));
  dart.setLibraryUri(base64.Base64Codec, L6);
  dart.setFieldSignature(base64.Base64Codec, () => ({
    __proto__: dart.getFields(base64.Base64Codec.__proto__),
    urlSafe: dart.finalFieldType(dart.legacy(core.bool)),
    addLineSeparator: dart.finalFieldType(dart.legacy(core.bool))
  }));
  var urlSafe$0 = dart.privateName(base64, "Base64Encoder.urlSafe");
  var addLineSeparator$0 = dart.privateName(base64, "Base64Encoder.addLineSeparator");
  base64.Base64Encoder = class Base64Encoder extends convert.Converter$(dart.legacy(core.List$(dart.legacy(core.int))), dart.legacy(core.String)) {
    get urlSafe() {
      return this[urlSafe$0];
    }
    set urlSafe(value) {
      super.urlSafe = value;
    }
    get addLineSeparator() {
      return this[addLineSeparator$0];
    }
    set addLineSeparator(value) {
      super.addLineSeparator = value;
    }
    convert(bytes) {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5, t1$6, t1$7, t1$8, t1$9, t1$10, t1$11, t1$12, t1$13, t1$14;
      ListLOfintL().as(bytes);
      let len = bytes[$length];
      if (len === 0) {
        return "";
      }
      let lookup = dart.test(this.urlSafe) ? base64.Base64Encoder._encodeTableUrlSafe : base64.Base64Encoder._encodeTable;
      let remainderLength = dart.asNullableInt(len[$remainder](3));
      let chunkLength = dart.notNull(len) - remainderLength;
      let outputLen = (dart.notNull(len) / 3)[$truncate]() * 4 + (remainderLength > 0 ? 4 : 0);
      if (dart.test(this.addLineSeparator)) {
        outputLen = outputLen + (((outputLen - 1) / 76)[$truncate]() << 1 >>> 0);
      }
      let out = ListOfintL().new(outputLen);
      let j = 0;
      let i = 0;
      let c = 0;
      while (i < chunkLength) {
        let x = (dart.notNull(bytes[$_get]((t1 = i, i = t1 + 1, t1))) << 16 & 16777215 | dart.notNull(bytes[$_get]((t1$ = i, i = t1$ + 1, t1$))) << 8 & 16777215 | dart.notNull(bytes[$_get]((t1$0 = i, i = t1$0 + 1, t1$0)))) >>> 0;
        out[$_set]((t1$1 = j, j = t1$1 + 1, t1$1), lookup[$codeUnitAt](x[$rightShift](18)));
        out[$_set]((t1$2 = j, j = t1$2 + 1, t1$2), lookup[$codeUnitAt](x >> 12 & 63));
        out[$_set]((t1$3 = j, j = t1$3 + 1, t1$3), lookup[$codeUnitAt](x >> 6 & 63));
        out[$_set]((t1$4 = j, j = t1$4 + 1, t1$4), lookup[$codeUnitAt](x & 63));
        if (dart.test(this.addLineSeparator) && (c = c + 1) === 19 && j < outputLen - 2) {
          out[$_set]((t1$5 = j, j = t1$5 + 1, t1$5), 13);
          out[$_set]((t1$6 = j, j = t1$6 + 1, t1$6), 10);
          c = 0;
        }
      }
      if (remainderLength === 1) {
        let x = bytes[$_get](i);
        out[$_set]((t1$7 = j, j = t1$7 + 1, t1$7), lookup[$codeUnitAt](x[$rightShift](2)));
        out[$_set]((t1$8 = j, j = t1$8 + 1, t1$8), lookup[$codeUnitAt](dart.notNull(x) << 4 & 63));
        out[$_set]((t1$9 = j, j = t1$9 + 1, t1$9), 61);
        out[$_set]((t1$10 = j, j = t1$10 + 1, t1$10), 61);
      } else if (remainderLength === 2) {
        let x = bytes[$_get](i);
        let y = bytes[$_get](i + 1);
        out[$_set]((t1$11 = j, j = t1$11 + 1, t1$11), lookup[$codeUnitAt](x[$rightShift](2)));
        out[$_set]((t1$12 = j, j = t1$12 + 1, t1$12), lookup[$codeUnitAt]((dart.notNull(x) << 4 | y[$rightShift](4)) & 63));
        out[$_set]((t1$13 = j, j = t1$13 + 1, t1$13), lookup[$codeUnitAt](dart.notNull(y) << 2 & 63));
        out[$_set]((t1$14 = j, j = t1$14 + 1, t1$14), 61);
      }
      return core.String.fromCharCodes(out);
    }
  };
  (base64.Base64Encoder.new = function(urlSafe = false, addLineSeparator = false) {
    this[urlSafe$0] = urlSafe;
    this[addLineSeparator$0] = addLineSeparator;
    base64.Base64Encoder.__proto__.new.call(this);
    ;
  }).prototype = base64.Base64Encoder.prototype;
  dart.addTypeTests(base64.Base64Encoder);
  dart.addTypeCaches(base64.Base64Encoder);
  dart.setMethodSignature(base64.Base64Encoder, () => ({
    __proto__: dart.getMethods(base64.Base64Encoder.__proto__),
    convert: dart.fnType(dart.legacy(core.String), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(base64.Base64Encoder, L6);
  dart.setFieldSignature(base64.Base64Encoder, () => ({
    __proto__: dart.getFields(base64.Base64Encoder.__proto__),
    urlSafe: dart.finalFieldType(dart.legacy(core.bool)),
    addLineSeparator: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(base64.Base64Encoder, {
    /*base64.Base64Encoder._PAD*/get _PAD() {
      return 61;
    },
    /*base64.Base64Encoder._CR*/get _CR() {
      return 13;
    },
    /*base64.Base64Encoder._LF*/get _LF() {
      return 10;
    },
    /*base64.Base64Encoder._BASE64_LINE_LENGTH*/get _BASE64_LINE_LENGTH() {
      return 76;
    },
    /*base64.Base64Encoder._encodeTable*/get _encodeTable() {
      return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    },
    /*base64.Base64Encoder._encodeTableUrlSafe*/get _encodeTableUrlSafe() {
      return "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
    }
  }, true);
  var C4;
  base64.Base64Decoder = class Base64Decoder extends convert.Converter$(dart.legacy(core.String), dart.legacy(core.List$(dart.legacy(core.int)))) {
    convert(input) {
      let t1, t1$, t1$0, t1$1;
      StringL().as(input);
      let len = input.length;
      if (len === 0) {
        return ListOfintL().new(0);
      }
      let extrasLen = 0;
      for (let i = 0; i < len; i = i + 1) {
        let c = base64.Base64Decoder._decodeTable[$_get](input[$codeUnitAt](i));
        if (dart.notNull(c) < 0) {
          extrasLen = extrasLen + 1;
          if (c === -2) {
            dart.throw(new core.FormatException.new("Invalid character: " + dart.str(input[$_get](i))));
          }
        }
      }
      if ((len - extrasLen)[$modulo](4) !== 0) {
        dart.throw(new core.FormatException.new("Size of Base 64 characters in Input\n          must be a multiple of 4. Input: " + dart.str(input)));
      }
      let padLength = 0;
      for (let i = len - 1; i >= 0; i = i - 1) {
        let currentCodeUnit = input[$codeUnitAt](i);
        if (dart.notNull(base64.Base64Decoder._decodeTable[$_get](currentCodeUnit)) > 0) break;
        if (currentCodeUnit === 61) padLength = padLength + 1;
      }
      let outputLen = ((len - extrasLen) * 6)[$rightShift](3) - padLength;
      let out = _native_typed_data.NativeUint8List.new(outputLen);
      for (let i = 0, o = 0; o < outputLen;) {
        let x = 0;
        for (let j = 4; j > 0;) {
          let c = base64.Base64Decoder._decodeTable[$_get](input[$codeUnitAt]((t1 = i, i = t1 + 1, t1)));
          if (dart.notNull(c) >= 0) {
            x = (x << 6 & 16777215 | dart.notNull(c)) >>> 0;
            j = j - 1;
          }
        }
        out[$_set]((t1$ = o, o = t1$ + 1, t1$), x[$rightShift](16));
        if (o < outputLen) {
          out[$_set]((t1$0 = o, o = t1$0 + 1, t1$0), x >> 8 & 255);
          if (o < outputLen) out[$_set]((t1$1 = o, o = t1$1 + 1, t1$1), x & 255);
        }
      }
      return out;
    }
    static _divmod256(number58, startAt) {
      let remaining = 0;
      for (let i = startAt; dart.notNull(i) < dart.notNull(number58[$length]); i = dart.notNull(i) + 1) {
        let num = 58 * remaining + (dart.notNull(number58[$_get](i)) & 255);
        number58[$_set](i, (num / 256)[$truncate]());
        remaining = num[$modulo](256);
      }
      return remaining;
    }
  };
  (base64.Base64Decoder.new = function() {
    base64.Base64Decoder.__proto__.new.call(this);
    ;
  }).prototype = base64.Base64Decoder.prototype;
  dart.addTypeTests(base64.Base64Decoder);
  dart.addTypeCaches(base64.Base64Decoder);
  dart.setMethodSignature(base64.Base64Decoder, () => ({
    __proto__: dart.getMethods(base64.Base64Decoder.__proto__),
    convert: dart.fnType(dart.legacy(core.List$(dart.legacy(core.int))), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(base64.Base64Decoder, L6);
  dart.defineLazy(base64.Base64Decoder, {
    /*base64.Base64Decoder._decodeTable*/get _decodeTable() {
      return C4 || CT.C4;
    },
    /*base64.Base64Decoder._PAD*/get _PAD() {
      return 61;
    }
  }, true);
  var fg$ = dart.privateName(ansi_color, "AnsiColor.fg");
  var bg$ = dart.privateName(ansi_color, "AnsiColor.bg");
  var color = dart.privateName(ansi_color, "AnsiColor.color");
  ansi_color.AnsiColor = class AnsiColor extends core.Object {
    get fg() {
      return this[fg$];
    }
    set fg(value) {
      super.fg = value;
    }
    get bg() {
      return this[bg$];
    }
    set bg(value) {
      super.bg = value;
    }
    get color() {
      return this[color];
    }
    set color(value) {
      super.color = value;
    }
    toString() {
      if (this.fg != null) {
        return "[" + "38;5;" + dart.str(this.fg) + "m";
      } else if (this.bg != null) {
        return "[" + "48;5;" + dart.str(this.bg) + "m";
      } else {
        return "";
      }
    }
    call(msg) {
      if (dart.test(this.color)) {
        return dart.str(this) + dart.str(msg) + "[0m";
      } else {
        return msg;
      }
    }
    toFg() {
      return new ansi_color.AnsiColor.fg(this.bg);
    }
    toBg() {
      return new ansi_color.AnsiColor.bg(this.fg);
    }
    get resetForeground() {
      return dart.test(this.color) ? "[" + "39m" : "";
    }
    get resetBackground() {
      return dart.test(this.color) ? "[" + "49m" : "";
    }
    static grey(level) {
      return 232 + (level[$clamp](0.0, 1.0) * 23)[$round]();
    }
  };
  (ansi_color.AnsiColor.none = function() {
    this[fg$] = null;
    this[bg$] = null;
    this[color] = false;
    ;
  }).prototype = ansi_color.AnsiColor.prototype;
  (ansi_color.AnsiColor.fg = function(fg) {
    this[fg$] = fg;
    this[bg$] = null;
    this[color] = true;
    ;
  }).prototype = ansi_color.AnsiColor.prototype;
  (ansi_color.AnsiColor.bg = function(bg) {
    this[bg$] = bg;
    this[fg$] = null;
    this[color] = true;
    ;
  }).prototype = ansi_color.AnsiColor.prototype;
  dart.addTypeTests(ansi_color.AnsiColor);
  dart.addTypeCaches(ansi_color.AnsiColor);
  dart.setMethodSignature(ansi_color.AnsiColor, () => ({
    __proto__: dart.getMethods(ansi_color.AnsiColor.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), []),
    call: dart.fnType(dart.legacy(core.String), [dart.legacy(core.String)]),
    toFg: dart.fnType(dart.legacy(ansi_color.AnsiColor), []),
    toBg: dart.fnType(dart.legacy(ansi_color.AnsiColor), [])
  }));
  dart.setGetterSignature(ansi_color.AnsiColor, () => ({
    __proto__: dart.getGetters(ansi_color.AnsiColor.__proto__),
    resetForeground: dart.legacy(core.String),
    resetBackground: dart.legacy(core.String)
  }));
  dart.setLibraryUri(ansi_color.AnsiColor, L7);
  dart.setFieldSignature(ansi_color.AnsiColor, () => ({
    __proto__: dart.getFields(ansi_color.AnsiColor.__proto__),
    fg: dart.finalFieldType(dart.legacy(core.int)),
    bg: dart.finalFieldType(dart.legacy(core.int)),
    color: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineExtensionMethods(ansi_color.AnsiColor, ['toString']);
  dart.defineLazy(ansi_color.AnsiColor, {
    /*ansi_color.AnsiColor.ansiEsc*/get ansiEsc() {
      return "[";
    },
    /*ansi_color.AnsiColor.ansiDefault*/get ansiDefault() {
      return "[0m";
    }
  }, true);
  var level = dart.privateName(log_filter, "LogFilter.level");
  log_filter.LogFilter = class LogFilter extends core.Object {
    get level() {
      return this[level];
    }
    set level(value) {
      this[level] = value;
    }
    init() {
    }
    destroy() {
    }
  };
  (log_filter.LogFilter.new = function() {
    this[level] = null;
    ;
  }).prototype = log_filter.LogFilter.prototype;
  dart.addTypeTests(log_filter.LogFilter);
  dart.addTypeCaches(log_filter.LogFilter);
  dart.setMethodSignature(log_filter.LogFilter, () => ({
    __proto__: dart.getMethods(log_filter.LogFilter.__proto__),
    init: dart.fnType(dart.void, []),
    destroy: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(log_filter.LogFilter, L9);
  dart.setFieldSignature(log_filter.LogFilter, () => ({
    __proto__: dart.getFields(log_filter.LogFilter.__proto__),
    level: dart.fieldType(dart.legacy(logger$.Level))
  }));
  development_filter.DevelopmentFilter = class DevelopmentFilter extends log_filter.LogFilter {
    shouldLog(event) {
      let shouldLog = false;
      if (!dart.test(dart.fn(() => {
        if (dart.notNull(event.level.index) >= dart.notNull(this.level.index)) {
          shouldLog = true;
        }
        return true;
      }, VoidToboolL())())) dart.assertFailed(null, L8, 12, 12, "() {\n      if (event.level.index >= level.index) {\n        shouldLog = true;\n      }\n      return true;\n    }()");
      return shouldLog;
    }
  };
  (development_filter.DevelopmentFilter.new = function() {
    development_filter.DevelopmentFilter.__proto__.new.call(this);
    ;
  }).prototype = development_filter.DevelopmentFilter.prototype;
  dart.addTypeTests(development_filter.DevelopmentFilter);
  dart.addTypeCaches(development_filter.DevelopmentFilter);
  dart.setMethodSignature(development_filter.DevelopmentFilter, () => ({
    __proto__: dart.getMethods(development_filter.DevelopmentFilter.__proto__),
    shouldLog: dart.fnType(dart.legacy(core.bool), [dart.legacy(logger$.LogEvent)])
  }));
  dart.setLibraryUri(development_filter.DevelopmentFilter, L10);
  production_filter.ProductionFilter = class ProductionFilter extends log_filter.LogFilter {
    shouldLog(event) {
      return dart.notNull(event.level.index) >= dart.notNull(this.level.index);
    }
  };
  (production_filter.ProductionFilter.new = function() {
    production_filter.ProductionFilter.__proto__.new.call(this);
    ;
  }).prototype = production_filter.ProductionFilter.prototype;
  dart.addTypeTests(production_filter.ProductionFilter);
  dart.addTypeCaches(production_filter.ProductionFilter);
  dart.setMethodSignature(production_filter.ProductionFilter, () => ({
    __proto__: dart.getMethods(production_filter.ProductionFilter.__proto__),
    shouldLog: dart.fnType(dart.legacy(core.bool), [dart.legacy(logger$.LogEvent)])
  }));
  dart.setLibraryUri(production_filter.ProductionFilter, L11);
  var C5;
  log_output.LogOutput = class LogOutput extends core.Object {
    init() {
    }
    destroy() {
    }
  };
  (log_output.LogOutput.new = function() {
    ;
  }).prototype = log_output.LogOutput.prototype;
  dart.addTypeTests(log_output.LogOutput);
  dart.addTypeCaches(log_output.LogOutput);
  dart.setMethodSignature(log_output.LogOutput, () => ({
    __proto__: dart.getMethods(log_output.LogOutput.__proto__),
    init: dart.fnType(dart.void, []),
    destroy: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(log_output.LogOutput, L12);
  console_output.ConsoleOutput = class ConsoleOutput extends log_output.LogOutput {
    output(event) {
      event.lines[$forEach](C5 || CT.C5);
    }
  };
  (console_output.ConsoleOutput.new = function() {
    ;
  }).prototype = console_output.ConsoleOutput.prototype;
  dart.addTypeTests(console_output.ConsoleOutput);
  dart.addTypeCaches(console_output.ConsoleOutput);
  dart.setMethodSignature(console_output.ConsoleOutput, () => ({
    __proto__: dart.getMethods(console_output.ConsoleOutput.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(logger$.OutputEvent)])
  }));
  dart.setLibraryUri(console_output.ConsoleOutput, L13);
  var _controller = dart.privateName(stream_output, "_controller");
  var _shouldForward = dart.privateName(stream_output, "_shouldForward");
  stream_output.StreamOutput = class StreamOutput extends log_output.LogOutput {
    get stream() {
      return this[_controller].stream;
    }
    output(event) {
      if (!dart.test(this[_shouldForward])) {
        return;
      }
      this[_controller].add(event.lines);
    }
    destroy() {
      this[_controller].close();
    }
  };
  (stream_output.StreamOutput.new = function() {
    this[_controller] = null;
    this[_shouldForward] = false;
    this[_controller] = StreamControllerOfListLOfStringL().new({onListen: dart.fn(() => this[_shouldForward] = true, VoidToboolL()), onPause: dart.fn(() => this[_shouldForward] = false, VoidToboolL()), onResume: dart.fn(() => this[_shouldForward] = true, VoidToboolL()), onCancel: dart.fn(() => this[_shouldForward] = false, VoidToboolL())});
  }).prototype = stream_output.StreamOutput.prototype;
  dart.addTypeTests(stream_output.StreamOutput);
  dart.addTypeCaches(stream_output.StreamOutput);
  dart.setMethodSignature(stream_output.StreamOutput, () => ({
    __proto__: dart.getMethods(stream_output.StreamOutput.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(logger$.OutputEvent)])
  }));
  dart.setGetterSignature(stream_output.StreamOutput, () => ({
    __proto__: dart.getGetters(stream_output.StreamOutput.__proto__),
    stream: dart.legacy(async.Stream$(dart.legacy(core.List$(dart.legacy(core.String)))))
  }));
  dart.setLibraryUri(stream_output.StreamOutput, L14);
  dart.setFieldSignature(stream_output.StreamOutput, () => ({
    __proto__: dart.getFields(stream_output.StreamOutput.__proto__),
    [_controller]: dart.fieldType(dart.legacy(async.StreamController$(dart.legacy(core.List$(dart.legacy(core.String)))))),
    [_shouldForward]: dart.fieldType(dart.legacy(core.bool))
  }));
  var bufferSize$ = dart.privateName(memory_output, "MemoryOutput.bufferSize");
  var secondOutput$ = dart.privateName(memory_output, "MemoryOutput.secondOutput");
  var buffer = dart.privateName(memory_output, "MemoryOutput.buffer");
  memory_output.MemoryOutput = class MemoryOutput extends log_output.LogOutput {
    get bufferSize() {
      return this[bufferSize$];
    }
    set bufferSize(value) {
      super.bufferSize = value;
    }
    get secondOutput() {
      return this[secondOutput$];
    }
    set secondOutput(value) {
      super.secondOutput = value;
    }
    get buffer() {
      return this[buffer];
    }
    set buffer(value) {
      super.buffer = value;
    }
    output(event) {
      if (this.buffer.length == this.bufferSize) {
        this.buffer.removeFirst();
      }
      this.buffer.add(event);
      if (this.secondOutput != null) {
        this.secondOutput.output(event);
      }
    }
  };
  (memory_output.MemoryOutput.new = function(opts) {
    let bufferSize = opts && 'bufferSize' in opts ? opts.bufferSize : 20;
    let secondOutput = opts && 'secondOutput' in opts ? opts.secondOutput : null;
    this[bufferSize$] = bufferSize;
    this[secondOutput$] = secondOutput;
    this[buffer] = new (ListQueueOfOutputEventL()).new(bufferSize);
    ;
  }).prototype = memory_output.MemoryOutput.prototype;
  dart.addTypeTests(memory_output.MemoryOutput);
  dart.addTypeCaches(memory_output.MemoryOutput);
  dart.setMethodSignature(memory_output.MemoryOutput, () => ({
    __proto__: dart.getMethods(memory_output.MemoryOutput.__proto__),
    output: dart.fnType(dart.void, [dart.legacy(logger$.OutputEvent)])
  }));
  dart.setLibraryUri(memory_output.MemoryOutput, L15);
  dart.setFieldSignature(memory_output.MemoryOutput, () => ({
    __proto__: dart.getFields(memory_output.MemoryOutput.__proto__),
    bufferSize: dart.finalFieldType(dart.legacy(core.int)),
    secondOutput: dart.finalFieldType(dart.legacy(log_output.LogOutput)),
    buffer: dart.finalFieldType(dart.legacy(collection.ListQueue$(dart.legacy(logger$.OutputEvent))))
  }));
  var _outputs = dart.privateName(multi_output, "_outputs");
  var _normalizeOutputs = dart.privateName(multi_output, "_normalizeOutputs");
  multi_output.MultiOutput = class MultiOutput extends log_output.LogOutput {
    [_normalizeOutputs](outputs) {
      if (outputs == null) return JSArrayOfLogOutputL().of([]);
      outputs[$removeWhere](dart.fn(o => o == null, LogOutputLToboolL()));
      return outputs;
    }
    init() {
      this[_outputs][$forEach](dart.fn(o => o.init(), LogOutputLTovoid()));
    }
    output(event) {
      this[_outputs][$forEach](dart.fn(o => o.output(event), LogOutputLTovoid()));
    }
    destroy() {
      this[_outputs][$forEach](dart.fn(o => o.destroy(), LogOutputLTovoid()));
    }
  };
  (multi_output.MultiOutput.new = function(outputs) {
    this[_outputs] = null;
    this[_outputs] = this[_normalizeOutputs](outputs);
  }).prototype = multi_output.MultiOutput.prototype;
  dart.addTypeTests(multi_output.MultiOutput);
  dart.addTypeCaches(multi_output.MultiOutput);
  dart.setMethodSignature(multi_output.MultiOutput, () => ({
    __proto__: dart.getMethods(multi_output.MultiOutput.__proto__),
    [_normalizeOutputs]: dart.fnType(dart.legacy(core.List$(dart.legacy(log_output.LogOutput))), [dart.legacy(core.List$(dart.legacy(log_output.LogOutput)))]),
    output: dart.fnType(dart.void, [dart.legacy(logger$.OutputEvent)])
  }));
  dart.setLibraryUri(multi_output.MultiOutput, L16);
  dart.setFieldSignature(multi_output.MultiOutput, () => ({
    __proto__: dart.getFields(multi_output.MultiOutput.__proto__),
    [_outputs]: dart.fieldType(dart.legacy(core.List$(dart.legacy(log_output.LogOutput))))
  }));
  var _topBorder = dart.privateName(pretty_printer, "_topBorder");
  var _middleBorder = dart.privateName(pretty_printer, "_middleBorder");
  var _bottomBorder = dart.privateName(pretty_printer, "_bottomBorder");
  var _formatAndPrint = dart.privateName(pretty_printer, "_formatAndPrint");
  var _discardDeviceStacktraceLine = dart.privateName(pretty_printer, "_discardDeviceStacktraceLine");
  var _discardWebStacktraceLine = dart.privateName(pretty_printer, "_discardWebStacktraceLine");
  var _discardBrowserStacktraceLine = dart.privateName(pretty_printer, "_discardBrowserStacktraceLine");
  var _getLevelColor = dart.privateName(pretty_printer, "_getLevelColor");
  var _getErrorColor = dart.privateName(pretty_printer, "_getErrorColor");
  var _getEmoji = dart.privateName(pretty_printer, "_getEmoji");
  log_printer.LogPrinter = class LogPrinter extends core.Object {
    init() {
    }
    destroy() {
    }
  };
  (log_printer.LogPrinter.new = function() {
    ;
  }).prototype = log_printer.LogPrinter.prototype;
  dart.addTypeTests(log_printer.LogPrinter);
  dart.addTypeCaches(log_printer.LogPrinter);
  dart.setMethodSignature(log_printer.LogPrinter, () => ({
    __proto__: dart.getMethods(log_printer.LogPrinter.__proto__),
    init: dart.fnType(dart.void, []),
    destroy: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(log_printer.LogPrinter, L17);
  var methodCount$ = dart.privateName(pretty_printer, "PrettyPrinter.methodCount");
  var errorMethodCount$ = dart.privateName(pretty_printer, "PrettyPrinter.errorMethodCount");
  var lineLength$ = dart.privateName(pretty_printer, "PrettyPrinter.lineLength");
  var colors$ = dart.privateName(pretty_printer, "PrettyPrinter.colors");
  var printEmojis$ = dart.privateName(pretty_printer, "PrettyPrinter.printEmojis");
  var printTime$ = dart.privateName(pretty_printer, "PrettyPrinter.printTime");
  pretty_printer.PrettyPrinter = class PrettyPrinter extends log_printer.LogPrinter {
    get methodCount() {
      return this[methodCount$];
    }
    set methodCount(value) {
      super.methodCount = value;
    }
    get errorMethodCount() {
      return this[errorMethodCount$];
    }
    set errorMethodCount(value) {
      super.errorMethodCount = value;
    }
    get lineLength() {
      return this[lineLength$];
    }
    set lineLength(value) {
      super.lineLength = value;
    }
    get colors() {
      return this[colors$];
    }
    set colors(value) {
      super.colors = value;
    }
    get printEmojis() {
      return this[printEmojis$];
    }
    set printEmojis(value) {
      super.printEmojis = value;
    }
    get printTime() {
      return this[printTime$];
    }
    set printTime(value) {
      super.printTime = value;
    }
    log(event) {
      let t1;
      let messageStr = this.stringifyMessage(event.message);
      let stackTraceStr = null;
      if (event.stackTrace == null) {
        if (dart.notNull(this.methodCount) > 0) {
          stackTraceStr = this.formatStackTrace(core.StackTrace.current, this.methodCount);
        }
      } else if (dart.notNull(this.errorMethodCount) > 0) {
        stackTraceStr = this.formatStackTrace(event.stackTrace, this.errorMethodCount);
      }
      let errorStr = (t1 = event.error, t1 == null ? null : dart.toString(t1));
      let timeStr = null;
      if (dart.test(this.printTime)) {
        timeStr = this.getTime();
      }
      return this[_formatAndPrint](event.level, messageStr, timeStr, errorStr, stackTraceStr);
    }
    formatStackTrace(stackTrace, methodCount) {
      let lines = dart.toString(stackTrace)[$split]("\n");
      let formatted = JSArrayOfStringL().of([]);
      let count = 0;
      for (let line of lines) {
        if (dart.test(this[_discardDeviceStacktraceLine](line)) || dart.test(this[_discardWebStacktraceLine](line)) || dart.test(this[_discardBrowserStacktraceLine](line))) {
          continue;
        }
        formatted[$add]("#" + dart.str(count) + "   " + dart.str(line[$replaceFirst](core.RegExp.new("#\\d+\\s+"), "")));
        if ((count = count + 1) === methodCount) {
          break;
        }
      }
      if (dart.test(formatted[$isEmpty])) {
        return null;
      } else {
        return formatted[$join]("\n");
      }
    }
    [_discardDeviceStacktraceLine](line) {
      let match = pretty_printer.PrettyPrinter._deviceStackTraceRegex[$matchAsPrefix](line);
      if (match == null) {
        return false;
      }
      return match.group(2)[$startsWith]("package:logger");
    }
    [_discardWebStacktraceLine](line) {
      let match = pretty_printer.PrettyPrinter._webStackTraceRegex[$matchAsPrefix](line);
      if (match == null) {
        return false;
      }
      return match.group(1)[$startsWith]("packages/logger") || match.group(1)[$startsWith]("dart-sdk/lib");
    }
    [_discardBrowserStacktraceLine](line) {
      let match = pretty_printer.PrettyPrinter._browserStackTraceRegex[$matchAsPrefix](line);
      if (match == null) {
        return false;
      }
      return match.group(1)[$startsWith]("package:logger") || match.group(1)[$startsWith]("dart:");
    }
    getTime() {
      function _threeDigits(n) {
        if (dart.notNull(n) >= 100) return dart.str(n);
        if (dart.notNull(n) >= 10) return "0" + dart.str(n);
        return "00" + dart.str(n);
      }
      dart.fn(_threeDigits, intLToStringL());
      function _twoDigits(n) {
        if (dart.notNull(n) >= 10) return dart.str(n);
        return "0" + dart.str(n);
      }
      dart.fn(_twoDigits, intLToStringL());
      let now = new core.DateTime.now();
      let h = _twoDigits(now.hour);
      let min = _twoDigits(now.minute);
      let sec = _twoDigits(now.second);
      let ms = _threeDigits(now.millisecond);
      let timeSinceStart = dart.toString(now.difference(pretty_printer.PrettyPrinter._startTime));
      return dart.str(h) + ":" + dart.str(min) + ":" + dart.str(sec) + "." + dart.str(ms) + " (+" + dart.str(timeSinceStart) + ")";
    }
    stringifyMessage(message) {
      if (MapL().is(message) || IterableL().is(message)) {
        let encoder = new convert.JsonEncoder.withIndent("  ");
        return encoder.convert(message);
      } else {
        return dart.toString(message);
      }
    }
    [_getLevelColor](level) {
      if (dart.test(this.colors)) {
        return pretty_printer.PrettyPrinter.levelColors[$_get](level);
      } else {
        return new ansi_color.AnsiColor.none();
      }
    }
    [_getErrorColor](level) {
      if (dart.test(this.colors)) {
        if (level == logger$.Level.wtf) {
          return pretty_printer.PrettyPrinter.levelColors[$_get](logger$.Level.wtf).toBg();
        } else {
          return pretty_printer.PrettyPrinter.levelColors[$_get](logger$.Level.error).toBg();
        }
      } else {
        return new ansi_color.AnsiColor.none();
      }
    }
    [_getEmoji](level) {
      if (dart.test(this.printEmojis)) {
        return pretty_printer.PrettyPrinter.levelEmojis[$_get](level);
      } else {
        return "";
      }
    }
    [_formatAndPrint](level, message, time, error, stacktrace) {
      let t1;
      let buffer = JSArrayOfStringL().of([]);
      let color = this[_getLevelColor](level);
      buffer[$add](color.call(this[_topBorder]));
      if (error != null) {
        let errorColor = this[_getErrorColor](level);
        for (let line of error[$split]("\n")) {
          buffer[$add](dart.notNull(color.call("│" + " ")) + dart.notNull(errorColor.resetForeground) + dart.notNull(errorColor.call(line)) + dart.notNull(errorColor.resetBackground));
        }
        buffer[$add](color.call(this[_middleBorder]));
      }
      if (stacktrace != null) {
        for (let line of stacktrace[$split]("\n")) {
          buffer[$add](dart.str(color) + "│" + " " + dart.str(line));
        }
        buffer[$add](color.call(this[_middleBorder]));
      }
      if (time != null) {
        t1 = buffer;
        (() => {
          t1[$add](color.call("│" + " " + dart.str(time)));
          t1[$add](color.call(this[_middleBorder]));
          return t1;
        })();
      }
      let emoji = this[_getEmoji](level);
      for (let line of message[$split]("\n")) {
        buffer[$add](color.call("│" + " " + dart.str(emoji) + dart.str(line)));
      }
      buffer[$add](color.call(this[_bottomBorder]));
      return buffer;
    }
  };
  (pretty_printer.PrettyPrinter.new = function(opts) {
    let methodCount = opts && 'methodCount' in opts ? opts.methodCount : 2;
    let errorMethodCount = opts && 'errorMethodCount' in opts ? opts.errorMethodCount : 8;
    let lineLength = opts && 'lineLength' in opts ? opts.lineLength : 120;
    let colors = opts && 'colors' in opts ? opts.colors : true;
    let printEmojis = opts && 'printEmojis' in opts ? opts.printEmojis : true;
    let printTime = opts && 'printTime' in opts ? opts.printTime : false;
    this[_topBorder] = "";
    this[_middleBorder] = "";
    this[_bottomBorder] = "";
    this[methodCount$] = methodCount;
    this[errorMethodCount$] = errorMethodCount;
    this[lineLength$] = lineLength;
    this[colors$] = colors;
    this[printEmojis$] = printEmojis;
    this[printTime$] = printTime;
    pretty_printer.PrettyPrinter._startTime == null ? pretty_printer.PrettyPrinter._startTime = new core.DateTime.now() : null;
    let doubleDividerLine = new core.StringBuffer.new();
    let singleDividerLine = new core.StringBuffer.new();
    for (let i = 0; i < dart.notNull(this.lineLength) - 1; i = i + 1) {
      doubleDividerLine.write("─");
      singleDividerLine.write("┄");
    }
    this[_topBorder] = "┌" + dart.str(doubleDividerLine);
    this[_middleBorder] = "├" + dart.str(singleDividerLine);
    this[_bottomBorder] = "└" + dart.str(doubleDividerLine);
  }).prototype = pretty_printer.PrettyPrinter.prototype;
  dart.addTypeTests(pretty_printer.PrettyPrinter);
  dart.addTypeCaches(pretty_printer.PrettyPrinter);
  dart.setMethodSignature(pretty_printer.PrettyPrinter, () => ({
    __proto__: dart.getMethods(pretty_printer.PrettyPrinter.__proto__),
    log: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(logger$.LogEvent)]),
    formatStackTrace: dart.fnType(dart.legacy(core.String), [dart.legacy(core.StackTrace), dart.legacy(core.int)]),
    [_discardDeviceStacktraceLine]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    [_discardWebStacktraceLine]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    [_discardBrowserStacktraceLine]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.String)]),
    getTime: dart.fnType(dart.legacy(core.String), []),
    stringifyMessage: dart.fnType(dart.legacy(core.String), [dart.dynamic]),
    [_getLevelColor]: dart.fnType(dart.legacy(ansi_color.AnsiColor), [dart.legacy(logger$.Level)]),
    [_getErrorColor]: dart.fnType(dart.legacy(ansi_color.AnsiColor), [dart.legacy(logger$.Level)]),
    [_getEmoji]: dart.fnType(dart.legacy(core.String), [dart.legacy(logger$.Level)]),
    [_formatAndPrint]: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(logger$.Level), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String)])
  }));
  dart.setLibraryUri(pretty_printer.PrettyPrinter, L18);
  dart.setFieldSignature(pretty_printer.PrettyPrinter, () => ({
    __proto__: dart.getFields(pretty_printer.PrettyPrinter.__proto__),
    methodCount: dart.finalFieldType(dart.legacy(core.int)),
    errorMethodCount: dart.finalFieldType(dart.legacy(core.int)),
    lineLength: dart.finalFieldType(dart.legacy(core.int)),
    colors: dart.finalFieldType(dart.legacy(core.bool)),
    printEmojis: dart.finalFieldType(dart.legacy(core.bool)),
    printTime: dart.finalFieldType(dart.legacy(core.bool)),
    [_topBorder]: dart.fieldType(dart.legacy(core.String)),
    [_middleBorder]: dart.fieldType(dart.legacy(core.String)),
    [_bottomBorder]: dart.fieldType(dart.legacy(core.String))
  }));
  dart.defineLazy(pretty_printer.PrettyPrinter, {
    /*pretty_printer.PrettyPrinter.topLeftCorner*/get topLeftCorner() {
      return "┌";
    },
    /*pretty_printer.PrettyPrinter.bottomLeftCorner*/get bottomLeftCorner() {
      return "└";
    },
    /*pretty_printer.PrettyPrinter.middleCorner*/get middleCorner() {
      return "├";
    },
    /*pretty_printer.PrettyPrinter.verticalLine*/get verticalLine() {
      return "│";
    },
    /*pretty_printer.PrettyPrinter.doubleDivider*/get doubleDivider() {
      return "─";
    },
    /*pretty_printer.PrettyPrinter.singleDivider*/get singleDivider() {
      return "┄";
    },
    /*pretty_printer.PrettyPrinter.levelColors*/get levelColors() {
      return new (LinkedMapOfLevelL$AnsiColorL()).from([logger$.Level.verbose, new ansi_color.AnsiColor.fg(ansi_color.AnsiColor.grey(0.5)), logger$.Level.debug, new ansi_color.AnsiColor.none(), logger$.Level.info, new ansi_color.AnsiColor.fg(12), logger$.Level.warning, new ansi_color.AnsiColor.fg(208), logger$.Level.error, new ansi_color.AnsiColor.fg(196), logger$.Level.wtf, new ansi_color.AnsiColor.fg(199)]);
    },
    /*pretty_printer.PrettyPrinter.levelEmojis*/get levelEmojis() {
      return new (LinkedMapOfLevelL$StringL()).from([logger$.Level.verbose, "", logger$.Level.debug, "🐛 ", logger$.Level.info, "💡 ", logger$.Level.warning, "⚠️ ", logger$.Level.error, "⛔ ", logger$.Level.wtf, "👾 "]);
    },
    /*pretty_printer.PrettyPrinter._deviceStackTraceRegex*/get _deviceStackTraceRegex() {
      return core.RegExp.new("#[0-9]+[\\s]+(.+) \\(([^\\s]+)\\)");
    },
    /*pretty_printer.PrettyPrinter._webStackTraceRegex*/get _webStackTraceRegex() {
      return core.RegExp.new("^((packages|dart-sdk)\\/[^\\s]+\\/)");
    },
    /*pretty_printer.PrettyPrinter._browserStackTraceRegex*/get _browserStackTraceRegex() {
      return core.RegExp.new("^(?:package:)?(dart:[^\\s]+|[^\\s]+)");
    },
    /*pretty_printer.PrettyPrinter._startTime*/get _startTime() {
      return null;
    },
    set _startTime(_) {}
  }, true);
  logfmt_printer.LogfmtPrinter = class LogfmtPrinter extends log_printer.LogPrinter {
    log(event) {
      let output = new core.StringBuffer.new("level=" + dart.str(logfmt_printer.LogfmtPrinter.levelPrefixes[$_get](event.level)));
      if (StringL().is(event.message)) {
        output.write(" msg=\"" + dart.str(event.message) + "\"");
      } else if (MapL().is(event.message)) {
        dart.dsend(dart.dload(event.message, 'entries'), 'forEach', [dart.fn(entry => {
            if (numL().is(dart.dload(entry, 'value'))) {
              output.write(" " + dart.str(dart.dload(entry, 'key')) + "=" + dart.str(dart.dload(entry, 'value')));
            } else {
              output.write(" " + dart.str(dart.dload(entry, 'key')) + "=\"" + dart.str(dart.dload(entry, 'value')) + "\"");
            }
          }, dynamicToNullN())]);
      }
      return JSArrayOfStringL().of([output.toString()]);
    }
  };
  (logfmt_printer.LogfmtPrinter.new = function() {
    ;
  }).prototype = logfmt_printer.LogfmtPrinter.prototype;
  dart.addTypeTests(logfmt_printer.LogfmtPrinter);
  dart.addTypeCaches(logfmt_printer.LogfmtPrinter);
  dart.setMethodSignature(logfmt_printer.LogfmtPrinter, () => ({
    __proto__: dart.getMethods(logfmt_printer.LogfmtPrinter.__proto__),
    log: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(logger$.LogEvent)])
  }));
  dart.setLibraryUri(logfmt_printer.LogfmtPrinter, L19);
  dart.defineLazy(logfmt_printer.LogfmtPrinter, {
    /*logfmt_printer.LogfmtPrinter.levelPrefixes*/get levelPrefixes() {
      return new (LinkedMapOfLevelL$StringL()).from([logger$.Level.verbose, "verbose", logger$.Level.debug, "debug", logger$.Level.info, "info", logger$.Level.warning, "warning", logger$.Level.error, "error", logger$.Level.wtf, "wtf"]);
    }
  }, true);
  var _stringifyMessage = dart.privateName(simple_printer, "_stringifyMessage");
  var _labelFor = dart.privateName(simple_printer, "_labelFor");
  var printTime$0 = dart.privateName(simple_printer, "SimplePrinter.printTime");
  var colors$0 = dart.privateName(simple_printer, "SimplePrinter.colors");
  simple_printer.SimplePrinter = class SimplePrinter extends log_printer.LogPrinter {
    get printTime() {
      return this[printTime$0];
    }
    set printTime(value) {
      super.printTime = value;
    }
    get colors() {
      return this[colors$0];
    }
    set colors(value) {
      super.colors = value;
    }
    log(event) {
      let messageStr = this[_stringifyMessage](event.message);
      let errorStr = event.error != null ? "  ERROR: " + dart.str(event.error) : "";
      let timeStr = dart.test(this.printTime) ? "TIME: " + dart.str(new core.DateTime.now().toIso8601String()) : "";
      return JSArrayOfStringL().of([dart.str(this[_labelFor](event.level)) + " " + timeStr + " " + dart.str(messageStr) + errorStr]);
    }
    [_labelFor](level) {
      let prefix = simple_printer.SimplePrinter.levelPrefixes[$_get](level);
      let color = simple_printer.SimplePrinter.levelColors[$_get](level);
      return dart.test(this.colors) ? color.call(prefix) : prefix;
    }
    [_stringifyMessage](message) {
      if (MapL().is(message) || IterableL().is(message)) {
        let encoder = new convert.JsonEncoder.withIndent(null);
        return encoder.convert(message);
      } else {
        return dart.toString(message);
      }
    }
  };
  (simple_printer.SimplePrinter.new = function(opts) {
    let printTime = opts && 'printTime' in opts ? opts.printTime : false;
    let colors = opts && 'colors' in opts ? opts.colors : true;
    this[printTime$0] = printTime;
    this[colors$0] = colors;
    ;
  }).prototype = simple_printer.SimplePrinter.prototype;
  dart.addTypeTests(simple_printer.SimplePrinter);
  dart.addTypeCaches(simple_printer.SimplePrinter);
  dart.setMethodSignature(simple_printer.SimplePrinter, () => ({
    __proto__: dart.getMethods(simple_printer.SimplePrinter.__proto__),
    log: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(logger$.LogEvent)]),
    [_labelFor]: dart.fnType(dart.legacy(core.String), [dart.legacy(logger$.Level)]),
    [_stringifyMessage]: dart.fnType(dart.legacy(core.String), [dart.dynamic])
  }));
  dart.setLibraryUri(simple_printer.SimplePrinter, L20);
  dart.setFieldSignature(simple_printer.SimplePrinter, () => ({
    __proto__: dart.getFields(simple_printer.SimplePrinter.__proto__),
    printTime: dart.finalFieldType(dart.legacy(core.bool)),
    colors: dart.finalFieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(simple_printer.SimplePrinter, {
    /*simple_printer.SimplePrinter.levelPrefixes*/get levelPrefixes() {
      return new (LinkedMapOfLevelL$StringL()).from([logger$.Level.verbose, "[V]", logger$.Level.debug, "[D]", logger$.Level.info, "[I]", logger$.Level.warning, "[W]", logger$.Level.error, "[E]", logger$.Level.wtf, "[WTF]"]);
    },
    /*simple_printer.SimplePrinter.levelColors*/get levelColors() {
      return new (LinkedMapOfLevelL$AnsiColorL()).from([logger$.Level.verbose, new ansi_color.AnsiColor.fg(ansi_color.AnsiColor.grey(0.5)), logger$.Level.debug, new ansi_color.AnsiColor.none(), logger$.Level.info, new ansi_color.AnsiColor.fg(12), logger$.Level.warning, new ansi_color.AnsiColor.fg(208), logger$.Level.error, new ansi_color.AnsiColor.fg(196), logger$.Level.wtf, new ansi_color.AnsiColor.fg(199)]);
    }
  }, true);
  var _printerMap = dart.privateName(hybrid_printer, "_printerMap");
  var _realPrinter$ = dart.privateName(hybrid_printer, "_realPrinter");
  hybrid_printer.HybridPrinter = class HybridPrinter extends log_printer.LogPrinter {
    log(event) {
      return ListLOfStringL().as(dart.dsend(dart.dsend(this[_printerMap], '_get', [event.level]), 'log', [event]));
    }
  };
  (hybrid_printer.HybridPrinter.new = function(_realPrinter, opts) {
    let t1, t1$, t1$0, t1$1, t1$2, t1$3;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let verbose = opts && 'verbose' in opts ? opts.verbose : null;
    let wtf = opts && 'wtf' in opts ? opts.wtf : null;
    let info = opts && 'info' in opts ? opts.info : null;
    let warning = opts && 'warning' in opts ? opts.warning : null;
    let error = opts && 'error' in opts ? opts.error : null;
    this[_printerMap] = null;
    this[_realPrinter$] = _realPrinter;
    this[_printerMap] = new (LinkedMapOfLevelL$dynamic()).from([logger$.Level.debug, (t1 = debug, t1 == null ? this[_realPrinter$] : t1), logger$.Level.verbose, (t1$ = verbose, t1$ == null ? this[_realPrinter$] : t1$), logger$.Level.wtf, (t1$0 = wtf, t1$0 == null ? this[_realPrinter$] : t1$0), logger$.Level.info, (t1$1 = info, t1$1 == null ? this[_realPrinter$] : t1$1), logger$.Level.warning, (t1$2 = warning, t1$2 == null ? this[_realPrinter$] : t1$2), logger$.Level.error, (t1$3 = error, t1$3 == null ? this[_realPrinter$] : t1$3)]);
  }).prototype = hybrid_printer.HybridPrinter.prototype;
  dart.addTypeTests(hybrid_printer.HybridPrinter);
  dart.addTypeCaches(hybrid_printer.HybridPrinter);
  dart.setMethodSignature(hybrid_printer.HybridPrinter, () => ({
    __proto__: dart.getMethods(hybrid_printer.HybridPrinter.__proto__),
    log: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(logger$.LogEvent)])
  }));
  dart.setLibraryUri(hybrid_printer.HybridPrinter, L21);
  dart.setFieldSignature(hybrid_printer.HybridPrinter, () => ({
    __proto__: dart.getFields(hybrid_printer.HybridPrinter.__proto__),
    [_realPrinter$]: dart.finalFieldType(dart.legacy(log_printer.LogPrinter)),
    [_printerMap]: dart.fieldType(dart.dynamic)
  }));
  var _prefixMap = dart.privateName(prefix_printer, "_prefixMap");
  var _realPrinter$0 = dart.privateName(prefix_printer, "_realPrinter");
  var _longestPrefixLength = dart.privateName(prefix_printer, "_longestPrefixLength");
  prefix_printer.PrefixPrinter = class PrefixPrinter extends log_printer.LogPrinter {
    log(event) {
      let realLogs = this[_realPrinter$0].log(event);
      return realLogs[$map](StringL(), dart.fn(s => dart.str(this[_prefixMap][$_get](event.level)) + dart.str(s), StringLToStringL()))[$toList]();
    }
    [_longestPrefixLength]() {
      let compFunc = dart.fn((a, b) => a.length > b.length ? a : b, StringLAndStringLToStringL());
      return this[_prefixMap][$values][$reduce](compFunc).length;
    }
  };
  (prefix_printer.PrefixPrinter.new = function(_realPrinter, opts) {
    let t1, t1$, t1$0, t1$1, t1$2, t1$3;
    let debug = opts && 'debug' in opts ? opts.debug : null;
    let verbose = opts && 'verbose' in opts ? opts.verbose : null;
    let wtf = opts && 'wtf' in opts ? opts.wtf : null;
    let info = opts && 'info' in opts ? opts.info : null;
    let warning = opts && 'warning' in opts ? opts.warning : null;
    let error = opts && 'error' in opts ? opts.error : null;
    this[_prefixMap] = null;
    this[_realPrinter$0] = _realPrinter;
    this[_prefixMap] = new (LinkedMapOfLevelL$StringL()).from([logger$.Level.debug, StringL().as((t1 = debug, t1 == null ? "DEBUG" : t1)), logger$.Level.verbose, StringL().as((t1$ = verbose, t1$ == null ? "VERBOSE" : t1$)), logger$.Level.wtf, StringL().as((t1$0 = wtf, t1$0 == null ? "WTF" : t1$0)), logger$.Level.info, StringL().as((t1$1 = info, t1$1 == null ? "INFO" : t1$1)), logger$.Level.warning, StringL().as((t1$2 = warning, t1$2 == null ? "WARNING" : t1$2)), logger$.Level.error, StringL().as((t1$3 = error, t1$3 == null ? "ERROR" : t1$3))]);
    let len = this[_longestPrefixLength]();
    this[_prefixMap][$forEach](dart.fn((k, v) => {
      let t3, t2, t1;
      t1 = this[_prefixMap];
      t2 = k;
      t3 = dart.str(v[$padLeft](len)) + " ";
      t1[$_set](t2, t3);
      return t3;
    }, LevelLAndStringLToStringL()));
  }).prototype = prefix_printer.PrefixPrinter.prototype;
  dart.addTypeTests(prefix_printer.PrefixPrinter);
  dart.addTypeCaches(prefix_printer.PrefixPrinter);
  dart.setMethodSignature(prefix_printer.PrefixPrinter, () => ({
    __proto__: dart.getMethods(prefix_printer.PrefixPrinter.__proto__),
    log: dart.fnType(dart.legacy(core.List$(dart.legacy(core.String))), [dart.legacy(logger$.LogEvent)]),
    [_longestPrefixLength]: dart.fnType(dart.legacy(core.int), [])
  }));
  dart.setLibraryUri(prefix_printer.PrefixPrinter, L22);
  dart.setFieldSignature(prefix_printer.PrefixPrinter, () => ({
    __proto__: dart.getFields(prefix_printer.PrefixPrinter.__proto__),
    [_realPrinter$0]: dart.finalFieldType(dart.legacy(log_printer.LogPrinter)),
    [_prefixMap]: dart.fieldType(dart.legacy(core.Map$(dart.legacy(logger$.Level), dart.legacy(core.String))))
  }));
  var _name$ = dart.privateName(logger$, "_name");
  var C6;
  var C7;
  var C8;
  var C9;
  var C10;
  var C11;
  var C12;
  var C13;
  logger$.Level = class Level extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (logger$.Level.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = logger$.Level.prototype;
  dart.addTypeTests(logger$.Level);
  dart.addTypeCaches(logger$.Level);
  dart.setMethodSignature(logger$.Level, () => ({
    __proto__: dart.getMethods(logger$.Level.__proto__),
    toString: dart.fnType(dart.legacy(core.String), []),
    [$toString]: dart.fnType(dart.legacy(core.String), [])
  }));
  dart.setLibraryUri(logger$.Level, L23);
  dart.setFieldSignature(logger$.Level, () => ({
    __proto__: dart.getFields(logger$.Level.__proto__),
    index: dart.finalFieldType(dart.legacy(core.int)),
    [_name$]: dart.finalFieldType(dart.legacy(core.String))
  }));
  dart.defineExtensionMethods(logger$.Level, ['toString']);
  logger$.Level.verbose = C6 || CT.C6;
  logger$.Level.debug = C7 || CT.C7;
  logger$.Level.info = C8 || CT.C8;
  logger$.Level.warning = C9 || CT.C9;
  logger$.Level.error = C10 || CT.C10;
  logger$.Level.wtf = C11 || CT.C11;
  logger$.Level.nothing = C12 || CT.C12;
  logger$.Level.values = C13 || CT.C13;
  var level$ = dart.privateName(logger$, "LogEvent.level");
  var message$ = dart.privateName(logger$, "LogEvent.message");
  var error$ = dart.privateName(logger$, "LogEvent.error");
  var stackTrace$ = dart.privateName(logger$, "LogEvent.stackTrace");
  logger$.LogEvent = class LogEvent extends core.Object {
    get level() {
      return this[level$];
    }
    set level(value) {
      super.level = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get error() {
      return this[error$];
    }
    set error(value) {
      super.error = value;
    }
    get stackTrace() {
      return this[stackTrace$];
    }
    set stackTrace(value) {
      super.stackTrace = value;
    }
  };
  (logger$.LogEvent.new = function(level, message, error, stackTrace) {
    this[level$] = level;
    this[message$] = message;
    this[error$] = error;
    this[stackTrace$] = stackTrace;
    ;
  }).prototype = logger$.LogEvent.prototype;
  dart.addTypeTests(logger$.LogEvent);
  dart.addTypeCaches(logger$.LogEvent);
  dart.setLibraryUri(logger$.LogEvent, L23);
  dart.setFieldSignature(logger$.LogEvent, () => ({
    __proto__: dart.getFields(logger$.LogEvent.__proto__),
    level: dart.finalFieldType(dart.legacy(logger$.Level)),
    message: dart.finalFieldType(dart.dynamic),
    error: dart.finalFieldType(dart.dynamic),
    stackTrace: dart.finalFieldType(dart.legacy(core.StackTrace))
  }));
  var level$0 = dart.privateName(logger$, "OutputEvent.level");
  var lines$ = dart.privateName(logger$, "OutputEvent.lines");
  logger$.OutputEvent = class OutputEvent extends core.Object {
    get level() {
      return this[level$0];
    }
    set level(value) {
      super.level = value;
    }
    get lines() {
      return this[lines$];
    }
    set lines(value) {
      super.lines = value;
    }
  };
  (logger$.OutputEvent.new = function(level, lines) {
    this[level$0] = level;
    this[lines$] = lines;
    ;
  }).prototype = logger$.OutputEvent.prototype;
  dart.addTypeTests(logger$.OutputEvent);
  dart.addTypeCaches(logger$.OutputEvent);
  dart.setLibraryUri(logger$.OutputEvent, L23);
  dart.setFieldSignature(logger$.OutputEvent, () => ({
    __proto__: dart.getFields(logger$.OutputEvent.__proto__),
    level: dart.finalFieldType(dart.legacy(logger$.Level)),
    lines: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String))))
  }));
  var _active = dart.privateName(logger$, "_active");
  var _filter = dart.privateName(logger$, "_filter");
  var _printer = dart.privateName(logger$, "_printer");
  var _output = dart.privateName(logger$, "_output");
  logger$.Logger = class Logger extends core.Object {
    v(message, error = null, stackTrace = null) {
      this.log(logger$.Level.verbose, message, error, stackTrace);
    }
    d(message, error = null, stackTrace = null) {
      this.log(logger$.Level.debug, message, error, stackTrace);
    }
    i(message, error = null, stackTrace = null) {
      this.log(logger$.Level.info, message, error, stackTrace);
    }
    w(message, error = null, stackTrace = null) {
      this.log(logger$.Level.warning, message, error, stackTrace);
    }
    e(message, error = null, stackTrace = null) {
      this.log(logger$.Level.error, message, error, stackTrace);
    }
    wtf(message, error = null, stackTrace = null) {
      this.log(logger$.Level.wtf, message, error, stackTrace);
    }
    log(level, message, error = null, stackTrace = null) {
      if (!dart.test(this[_active])) {
        dart.throw(new core.ArgumentError.new("Logger has already been closed."));
      } else if (error != null && StackTraceL().is(error)) {
        dart.throw(new core.ArgumentError.new("Error parameter cannot take a StackTrace!"));
      } else if (level == logger$.Level.nothing) {
        dart.throw(new core.ArgumentError.new("Log events cannot have Level.nothing"));
      }
      let logEvent = new logger$.LogEvent.new(level, message, error, stackTrace);
      if (dart.test(this[_filter].shouldLog(logEvent))) {
        let output = this[_printer].log(logEvent);
        if (dart.test(output[$isNotEmpty])) {
          let outputEvent = new logger$.OutputEvent.new(level, output);
          try {
            this[_output].output(outputEvent);
          } catch (e$) {
            let e = dart.getThrown(e$);
            let s = dart.stackTrace(e$);
            core.print(e);
            core.print(s);
          }
        }
      }
    }
    close() {
      this[_active] = false;
      this[_filter].destroy();
      this[_printer].destroy();
      this[_output].destroy();
    }
  };
  (logger$.Logger.new = function(opts) {
    let t1, t1$, t1$0, t1$1;
    let filter = opts && 'filter' in opts ? opts.filter : null;
    let printer = opts && 'printer' in opts ? opts.printer : null;
    let output = opts && 'output' in opts ? opts.output : null;
    let level = opts && 'level' in opts ? opts.level : null;
    this[_active] = true;
    this[_filter] = (t1 = filter, t1 == null ? new development_filter.DevelopmentFilter.new() : t1);
    this[_printer] = (t1$ = printer, t1$ == null ? new pretty_printer.PrettyPrinter.new() : t1$);
    this[_output] = (t1$0 = output, t1$0 == null ? new console_output.ConsoleOutput.new() : t1$0);
    this[_filter].init();
    this[_filter].level = (t1$1 = level, t1$1 == null ? logger$.Logger.level : t1$1);
    this[_printer].init();
    this[_output].init();
  }).prototype = logger$.Logger.prototype;
  dart.addTypeTests(logger$.Logger);
  dart.addTypeCaches(logger$.Logger);
  dart.setMethodSignature(logger$.Logger, () => ({
    __proto__: dart.getMethods(logger$.Logger.__proto__),
    v: dart.fnType(dart.void, [dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    d: dart.fnType(dart.void, [dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    i: dart.fnType(dart.void, [dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    w: dart.fnType(dart.void, [dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    e: dart.fnType(dart.void, [dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    wtf: dart.fnType(dart.void, [dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    log: dart.fnType(dart.void, [dart.legacy(logger$.Level), dart.dynamic], [dart.dynamic, dart.legacy(core.StackTrace)]),
    close: dart.fnType(dart.void, [])
  }));
  dart.setLibraryUri(logger$.Logger, L23);
  dart.setFieldSignature(logger$.Logger, () => ({
    __proto__: dart.getFields(logger$.Logger.__proto__),
    [_filter]: dart.finalFieldType(dart.legacy(log_filter.LogFilter)),
    [_printer]: dart.finalFieldType(dart.legacy(log_printer.LogPrinter)),
    [_output]: dart.finalFieldType(dart.legacy(log_output.LogOutput)),
    [_active]: dart.fieldType(dart.legacy(core.bool))
  }));
  dart.defineLazy(logger$.Logger, {
    /*logger$.Logger.level*/get level() {
      return logger$.Level.verbose;
    },
    set level(_) {}
  }, true);
  var C14;
  var C15;
  var _commands$ = dart.privateName(allow_anything_parser, "_commands");
  var C16;
  var _addOption$ = dart.privateName(allow_anything_parser, "_addOption");
  var C17;
  var C18;
  var C19;
  var C20;
  var _optionsAndSeparators$ = dart.privateName(allow_anything_parser, "_optionsAndSeparators");
  var C21;
  var _options$ = dart.privateName(allow_anything_parser, "_options");
  var C22;
  allow_anything_parser.AllowAnythingParser = class AllowAnythingParser extends core.Object {
    get options() {
      return C14 || CT.C14;
    }
    get commands() {
      return C15 || CT.C15;
    }
    get allowTrailingOptions() {
      return false;
    }
    get allowsAnything() {
      return true;
    }
    get usageLineLength() {
      return null;
    }
    addCommand(name, parser = null) {
      dart.throw(new core.UnsupportedError.new("ArgParser.allowAnything().addCommands() isn't supported."));
    }
    addFlag(name, opts) {
      let abbr = opts && 'abbr' in opts ? opts.abbr : null;
      let help = opts && 'help' in opts ? opts.help : null;
      let defaultsTo = opts && 'defaultsTo' in opts ? opts.defaultsTo : false;
      let negatable = opts && 'negatable' in opts ? opts.negatable : true;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      dart.throw(new core.UnsupportedError.new("ArgParser.allowAnything().addFlag() isn't supported."));
    }
    addOption(name, opts) {
      let abbr = opts && 'abbr' in opts ? opts.abbr : null;
      let help = opts && 'help' in opts ? opts.help : null;
      let valueHelp = opts && 'valueHelp' in opts ? opts.valueHelp : null;
      let allowed = opts && 'allowed' in opts ? opts.allowed : null;
      let allowedHelp = opts && 'allowedHelp' in opts ? opts.allowedHelp : null;
      let defaultsTo = opts && 'defaultsTo' in opts ? opts.defaultsTo : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let allowMultiple = opts && 'allowMultiple' in opts ? opts.allowMultiple : false;
      let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : null;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      dart.throw(new core.UnsupportedError.new("ArgParser.allowAnything().addOption() isn't supported."));
    }
    addMultiOption(name, opts) {
      let abbr = opts && 'abbr' in opts ? opts.abbr : null;
      let help = opts && 'help' in opts ? opts.help : null;
      let valueHelp = opts && 'valueHelp' in opts ? opts.valueHelp : null;
      let allowed = opts && 'allowed' in opts ? opts.allowed : null;
      let allowedHelp = opts && 'allowedHelp' in opts ? opts.allowedHelp : null;
      let defaultsTo = opts && 'defaultsTo' in opts ? opts.defaultsTo : null;
      let callback = opts && 'callback' in opts ? opts.callback : null;
      let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : true;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      dart.throw(new core.UnsupportedError.new("ArgParser.allowAnything().addMultiOption() isn't supported."));
    }
    addSeparator(text) {
      dart.throw(new core.UnsupportedError.new("ArgParser.allowAnything().addSeparator() isn't supported."));
    }
    parse(args) {
      return new parser.Parser.new(null, this, ListQueueOfStringL().of(args)).parse();
    }
    getUsage() {
      return this.usage;
    }
    get usage() {
      return "";
    }
    getDefault(option) {
      dart.throw(new core.ArgumentError.new("No option named " + dart.str(option)));
    }
    findByAbbreviation(abbr) {
      return null;
    }
    get [_commands]() {
      return MapLOfStringL$ArgParserL().as(this.noSuchMethod(new core._Invocation.getter(C16 || CT.C16)));
    }
    [_addOption](name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type, opts) {
      let negatable = opts && 'negatable' in opts ? opts.negatable : false;
      let splitCommas = opts && 'splitCommas' in opts ? opts.splitCommas : null;
      let hide = opts && 'hide' in opts ? opts.hide : false;
      return this.noSuchMethod(new core._Invocation.method(C17 || CT.C17, null, [name, abbr, help, valueHelp, allowed, allowedHelp, defaultsTo, callback, type], new (LinkedMapOfSymbolL$dynamic()).from([C18 || CT.C18, negatable, C19 || CT.C19, splitCommas, C20 || CT.C20, hide])));
    }
    get [_optionsAndSeparators]() {
      return ListL().as(this.noSuchMethod(new core._Invocation.getter(C21 || CT.C21)));
    }
    get [_options]() {
      return MapLOfStringL$OptionL().as(this.noSuchMethod(new core._Invocation.getter(C22 || CT.C22)));
    }
  };
  (allow_anything_parser.AllowAnythingParser.new = function() {
    ;
  }).prototype = allow_anything_parser.AllowAnythingParser.prototype;
  dart.addTypeTests(allow_anything_parser.AllowAnythingParser);
  dart.addTypeCaches(allow_anything_parser.AllowAnythingParser);
  allow_anything_parser.AllowAnythingParser[dart.implements] = () => [arg_parser.ArgParser];
  dart.setMethodSignature(allow_anything_parser.AllowAnythingParser, () => ({
    __proto__: dart.getMethods(allow_anything_parser.AllowAnythingParser.__proto__),
    addCommand: dart.fnType(dart.legacy(arg_parser.ArgParser), [dart.legacy(core.String)], [dart.legacy(arg_parser.ArgParser)]),
    addFlag: dart.fnType(dart.void, [dart.legacy(core.String)], {abbr: dart.legacy(core.String), callback: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.bool)])), defaultsTo: dart.legacy(core.bool), help: dart.legacy(core.String), hide: dart.legacy(core.bool), negatable: dart.legacy(core.bool)}, {}),
    addOption: dart.fnType(dart.void, [dart.legacy(core.String)], {abbr: dart.legacy(core.String), allowMultiple: dart.legacy(core.bool), allowed: dart.legacy(core.Iterable$(dart.legacy(core.String))), allowedHelp: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), callback: dart.legacy(core.Function), defaultsTo: dart.legacy(core.String), help: dart.legacy(core.String), hide: dart.legacy(core.bool), splitCommas: dart.legacy(core.bool), valueHelp: dart.legacy(core.String)}, {}),
    addMultiOption: dart.fnType(dart.void, [dart.legacy(core.String)], {abbr: dart.legacy(core.String), allowed: dart.legacy(core.Iterable$(dart.legacy(core.String))), allowedHelp: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), callback: dart.legacy(dart.fnType(dart.void, [dart.legacy(core.List$(dart.legacy(core.String)))])), defaultsTo: dart.legacy(core.Iterable$(dart.legacy(core.String))), help: dart.legacy(core.String), hide: dart.legacy(core.bool), splitCommas: dart.legacy(core.bool), valueHelp: dart.legacy(core.String)}, {}),
    addSeparator: dart.fnType(dart.void, [dart.legacy(core.String)]),
    parse: dart.fnType(dart.legacy(arg_results.ArgResults), [dart.legacy(core.Iterable$(dart.legacy(core.String)))]),
    getUsage: dart.fnType(dart.legacy(core.String), []),
    getDefault: dart.fnType(dart.dynamic, [dart.legacy(core.String)]),
    findByAbbreviation: dart.fnType(dart.legacy(option$.Option), [dart.legacy(core.String)]),
    [_addOption]: dart.fnType(dart.void, [dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.String), dart.legacy(core.Iterable$(dart.legacy(core.String))), dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(core.String))), dart.dynamic, dart.legacy(core.Function), dart.legacy(option$.OptionType)], {hide: dart.legacy(core.bool), negatable: dart.legacy(core.bool), splitCommas: dart.legacy(core.bool)}, {})
  }));
  dart.setGetterSignature(allow_anything_parser.AllowAnythingParser, () => ({
    __proto__: dart.getGetters(allow_anything_parser.AllowAnythingParser.__proto__),
    options: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(option$.Option))),
    commands: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(arg_parser.ArgParser))),
    allowTrailingOptions: dart.legacy(core.bool),
    allowsAnything: dart.legacy(core.bool),
    usageLineLength: dart.legacy(core.int),
    usage: dart.legacy(core.String),
    [_commands]: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(arg_parser.ArgParser))),
    [_optionsAndSeparators]: dart.legacy(core.List),
    [_options]: dart.legacy(core.Map$(dart.legacy(core.String), dart.legacy(option$.Option)))
  }));
  dart.setLibraryUri(allow_anything_parser.AllowAnythingParser, L24);
  var C23;
  var _validateAllowed = dart.privateName(parser, "_validateAllowed");
  var commandName$ = dart.privateName(parser, "Parser.commandName");
  var parent$ = dart.privateName(parser, "Parser.parent");
  var grammar$ = dart.privateName(parser, "Parser.grammar");
  var args$ = dart.privateName(parser, "Parser.args");
  var rest$0 = dart.privateName(parser, "Parser.rest");
  var results = dart.privateName(parser, "Parser.results");
  parser.Parser = class Parser extends core.Object {
    get commandName() {
      return this[commandName$];
    }
    set commandName(value) {
      super.commandName = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      super.parent = value;
    }
    get grammar() {
      return this[grammar$];
    }
    set grammar(value) {
      super.grammar = value;
    }
    get args() {
      return this[args$];
    }
    set args(value) {
      super.args = value;
    }
    get rest() {
      return this[rest$0];
    }
    set rest(value) {
      super.rest = value;
    }
    get results() {
      return this[results];
    }
    set results(value) {
      super.results = value;
    }
    get current() {
      return this.args[$first];
    }
    parse() {
      let $arguments = this.args[$toList]();
      if (dart.test(this.grammar.allowsAnything)) {
        return arg_results.newArgResults(this.grammar, C23 || CT.C23, this.commandName, null, $arguments, $arguments);
      }
      let commandResults = null;
      while (dart.test(this.args[$isNotEmpty])) {
        if (this.current === "--") {
          this.args.removeFirst();
          break;
        }
        let command = this.grammar.commands[$_get](this.current);
        if (command != null) {
          this.validate(this.rest[$isEmpty], "Cannot specify arguments before a command.");
          let commandName = this.args.removeFirst();
          let commandParser = new parser.Parser.new(commandName, command, this.args, this, this.rest);
          try {
            commandResults = commandParser.parse();
          } catch (e) {
            let error = dart.getThrown(e);
            if (ArgParserExceptionL().is(error)) {
              if (commandName == null) dart.rethrow(e);
              dart.throw(new arg_parser_exception.ArgParserException.new(error.message, (() => {
                let t3 = JSArrayOfStringL().of([]);
                t3[$add](commandName);
                for (let t4 of error.commands)
                  t3[$add](t4);
                return t3;
              })()));
            } else
              throw e;
          }
          this.rest[$clear]();
          break;
        }
        if (dart.test(this.parseSoloOption())) continue;
        if (dart.test(this.parseAbbreviation(this))) continue;
        if (dart.test(this.parseLongOption())) continue;
        if (!dart.test(this.grammar.allowTrailingOptions)) break;
        this.rest[$add](this.args.removeFirst());
      }
      this.grammar.options[$forEach](dart.fn((name, option) => {
        let t6, t5;
        if (option.callback == null) return;
        t5 = option;
        t6 = option.getOrDefault(this.results[$_get](name));
        dart.dsend(t5, 'callback', [t6]);
      }, StringLAndOptionLToNullN()));
      this.rest[$addAll](this.args);
      this.args.clear();
      return arg_results.newArgResults(this.grammar, this.results, this.commandName, commandResults, this.rest, $arguments);
    }
    readNextArgAsValue(option) {
      this.validate(this.args[$isNotEmpty], "Missing argument for \"" + dart.str(option.name) + "\".");
      this.setOption(this.results, option, this.current);
      this.args.removeFirst();
    }
    parseSoloOption() {
      if (this.current.length !== 2) return false;
      if (!this.current[$startsWith]("-")) return false;
      let opt = this.current[$_get](1);
      if (!dart.test(parser._isLetterOrDigit(opt[$codeUnitAt](0)))) return false;
      let option = this.grammar.findByAbbreviation(opt);
      if (option == null) {
        this.validate(this.parent != null, "Could not find an option or flag \"-" + opt + "\".");
        return this.parent.parseSoloOption();
      }
      this.args.removeFirst();
      if (dart.test(option.isFlag)) {
        this.setFlag(this.results, option, true);
      } else {
        this.readNextArgAsValue(option);
      }
      return true;
    }
    parseAbbreviation(innermostCommand) {
      if (this.current.length < 2) return false;
      if (!this.current[$startsWith]("-")) return false;
      let index = 1;
      while (index < this.current.length && dart.test(parser._isLetterOrDigit(this.current[$codeUnitAt](index)))) {
        index = index + 1;
      }
      if (index === 1) return false;
      let lettersAndDigits = this.current[$substring](1, index);
      let rest = this.current[$substring](index);
      if (rest[$contains]("\n") || rest[$contains]("\r")) return false;
      let c = lettersAndDigits[$substring](0, 1);
      let first = this.grammar.findByAbbreviation(c);
      if (first == null) {
        this.validate(this.parent != null, "Could not find an option with short name \"-" + c + "\".");
        return this.parent.parseAbbreviation(innermostCommand);
      } else if (!dart.test(first.isFlag)) {
        let value = dart.str(lettersAndDigits[$substring](1)) + rest;
        this.setOption(this.results, first, value);
      } else {
        this.validate(rest === "", "Option \"-" + c + "\" is a flag and cannot handle value " + "\"" + dart.str(lettersAndDigits[$substring](1)) + rest + "\".");
        for (let i = 0; i < lettersAndDigits.length; i = i + 1) {
          let c = lettersAndDigits[$substring](i, i + 1);
          innermostCommand.parseShortFlag(c);
        }
      }
      this.args.removeFirst();
      return true;
    }
    parseShortFlag(c) {
      let option = this.grammar.findByAbbreviation(c);
      if (option == null) {
        this.validate(this.parent != null, "Could not find an option with short name \"-" + dart.str(c) + "\".");
        this.parent.parseShortFlag(c);
        return;
      }
      this.validate(option.isFlag, "Option \"-" + dart.str(c) + "\" must be a flag to be in a collapsed \"-\".");
      this.setFlag(this.results, option, true);
    }
    parseLongOption() {
      if (!this.current[$startsWith]("--")) return false;
      let index = this.current[$indexOf]("=");
      let name = index === -1 ? this.current[$substring](2) : this.current[$substring](2, index);
      for (let i = 0; i !== name.length; i = i + 1) {
        if (!dart.test(parser._isLetterDigitHyphenOrUnderscore(name[$codeUnitAt](i)))) return false;
      }
      let value = index === -1 ? null : this.current[$substring](index + 1);
      if (value != null && (value[$contains]("\n") || value[$contains]("\r"))) {
        return false;
      }
      let option = this.grammar.options[$_get](name);
      if (option != null) {
        this.args.removeFirst();
        if (dart.test(option.isFlag)) {
          this.validate(value == null, "Flag option \"" + name + "\" should not be given a value.");
          this.setFlag(this.results, option, true);
        } else if (value != null) {
          this.setOption(this.results, option, value);
        } else {
          this.readNextArgAsValue(option);
        }
      } else if (name[$startsWith]("no-")) {
        name = name[$substring]("no-".length);
        option = this.grammar.options[$_get](name);
        if (option == null) {
          this.validate(this.parent != null, "Could not find an option named \"" + name + "\".");
          return this.parent.parseLongOption();
        }
        this.args.removeFirst();
        this.validate(option.isFlag, "Cannot negate non-flag option \"" + name + "\".");
        this.validate(option.negatable, "Cannot negate option \"" + name + "\".");
        this.setFlag(this.results, option, false);
      } else {
        this.validate(this.parent != null, "Could not find an option named \"" + name + "\".");
        return this.parent.parseLongOption();
      }
      return true;
    }
    validate(condition, message) {
      if (!dart.test(condition)) dart.throw(new arg_parser_exception.ArgParserException.new(message));
    }
    setOption(results, option, value) {
      if (!!dart.test(option.isFlag)) dart.assertFailed(null, L25, 296, 12, "!option.isFlag");
      if (!dart.test(option.isMultiple)) {
        this[_validateAllowed](option, value);
        results[$_set](option.name, value);
        return;
      }
      let list = results[$putIfAbsent](option.name, dart.fn(() => JSArrayOfStringL().of([]), VoidToListLOfStringL()));
      if (dart.test(option.splitCommas)) {
        for (let element of value[$split](",")) {
          this[_validateAllowed](option, element);
          dart.dsend(list, 'add', [element]);
        }
      } else {
        this[_validateAllowed](option, value);
        dart.dsend(list, 'add', [value]);
      }
    }
    setFlag(results, option, value) {
      if (!dart.test(option.isFlag)) dart.assertFailed(null, L25, 320, 12, "option.isFlag");
      results[$_set](option.name, value);
    }
    [_validateAllowed](option, value) {
      if (option.allowed == null) return;
      this.validate(option.allowed[$contains](value), "\"" + dart.str(value) + "\" is not an allowed value for option \"" + dart.str(option.name) + "\".");
    }
  };
  (parser.Parser.new = function(commandName, grammar, args, parent = null, rest = null) {
    this[rest$0] = JSArrayOfStringL().of([]);
    this[results] = new (IdentityMapOfStringL$dynamic()).new();
    this[commandName$] = commandName;
    this[grammar$] = grammar;
    this[args$] = args;
    this[parent$] = parent;
    if (rest != null) this.rest[$addAll](rest);
  }).prototype = parser.Parser.prototype;
  dart.addTypeTests(parser.Parser);
  dart.addTypeCaches(parser.Parser);
  dart.setMethodSignature(parser.Parser, () => ({
    __proto__: dart.getMethods(parser.Parser.__proto__),
    parse: dart.fnType(dart.legacy(arg_results.ArgResults), []),
    readNextArgAsValue: dart.fnType(dart.void, [dart.legacy(option$.Option)]),
    parseSoloOption: dart.fnType(dart.legacy(core.bool), []),
    parseAbbreviation: dart.fnType(dart.legacy(core.bool), [dart.legacy(parser.Parser)]),
    parseShortFlag: dart.fnType(dart.void, [dart.legacy(core.String)]),
    parseLongOption: dart.fnType(dart.legacy(core.bool), []),
    validate: dart.fnType(dart.void, [dart.legacy(core.bool), dart.legacy(core.String)]),
    setOption: dart.fnType(dart.void, [dart.legacy(core.Map), dart.legacy(option$.Option), dart.legacy(core.String)]),
    setFlag: dart.fnType(dart.void, [dart.legacy(core.Map), dart.legacy(option$.Option), dart.legacy(core.bool)]),
    [_validateAllowed]: dart.fnType(dart.void, [dart.legacy(option$.Option), dart.legacy(core.String)])
  }));
  dart.setGetterSignature(parser.Parser, () => ({
    __proto__: dart.getGetters(parser.Parser.__proto__),
    current: dart.legacy(core.String)
  }));
  dart.setLibraryUri(parser.Parser, L26);
  dart.setFieldSignature(parser.Parser, () => ({
    __proto__: dart.getFields(parser.Parser.__proto__),
    commandName: dart.finalFieldType(dart.legacy(core.String)),
    parent: dart.finalFieldType(dart.legacy(parser.Parser)),
    grammar: dart.finalFieldType(dart.legacy(arg_parser.ArgParser)),
    args: dart.finalFieldType(dart.legacy(collection.Queue$(dart.legacy(core.String)))),
    rest: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.String)))),
    results: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(core.String), dart.dynamic)))
  }));
  parser._isLetterOrDigit = function _isLetterOrDigit(codeUnit) {
    return dart.notNull(codeUnit) >= 65 && dart.notNull(codeUnit) <= 90 || dart.notNull(codeUnit) >= 97 && dart.notNull(codeUnit) <= 122 || dart.notNull(codeUnit) >= 48 && dart.notNull(codeUnit) <= 57;
  };
  parser._isLetterDigitHyphenOrUnderscore = function _isLetterDigitHyphenOrUnderscore(codeUnit) {
    return dart.test(parser._isLetterOrDigit(codeUnit)) || codeUnit === 45 || codeUnit === 95;
  };
  var optionsAndSeparators$ = dart.privateName(usage, "Usage.optionsAndSeparators");
  var buffer$ = dart.privateName(usage, "Usage.buffer");
  var currentColumn = dart.privateName(usage, "Usage.currentColumn");
  var columnWidths = dart.privateName(usage, "Usage.columnWidths");
  var numHelpLines = dart.privateName(usage, "Usage.numHelpLines");
  var newlinesNeeded = dart.privateName(usage, "Usage.newlinesNeeded");
  var lineLength$0 = dart.privateName(usage, "Usage.lineLength");
  usage.Usage = class Usage extends core.Object {
    get optionsAndSeparators() {
      return this[optionsAndSeparators$];
    }
    set optionsAndSeparators(value) {
      super.optionsAndSeparators = value;
    }
    get buffer() {
      return this[buffer$];
    }
    set buffer(value) {
      this[buffer$] = value;
    }
    get currentColumn() {
      return this[currentColumn];
    }
    set currentColumn(value) {
      this[currentColumn] = value;
    }
    get columnWidths() {
      return this[columnWidths];
    }
    set columnWidths(value) {
      this[columnWidths] = value;
    }
    get numHelpLines() {
      return this[numHelpLines];
    }
    set numHelpLines(value) {
      this[numHelpLines] = value;
    }
    get newlinesNeeded() {
      return this[newlinesNeeded];
    }
    set newlinesNeeded(value) {
      this[newlinesNeeded] = value;
    }
    get lineLength() {
      return this[lineLength$0];
    }
    set lineLength(value) {
      super.lineLength = value;
    }
    generate() {
      this.buffer = new core.StringBuffer.new();
      this.calculateColumnWidths();
      for (let optionOrSeparator of this.optionsAndSeparators) {
        if (StringL().is(optionOrSeparator)) {
          if (dart.test(this.buffer.isNotEmpty)) this.buffer.write("\n\n");
          this.buffer.write(optionOrSeparator);
          this.newlinesNeeded = 1;
          continue;
        }
        let option = OptionL().as(optionOrSeparator);
        if (dart.test(option.hide)) continue;
        this.write(0, this.getAbbreviation(option));
        this.write(1, this.getLongOption(option));
        if (option.help != null) this.write(2, option.help);
        if (option.allowedHelp != null) {
          let allowedNames = option.allowedHelp[$keys][$toList]({growable: false});
          allowedNames[$sort]();
          this.newline();
          for (let name of allowedNames) {
            this.write(1, this.getAllowedTitle(option, name));
            this.write(2, option.allowedHelp[$_get](name));
          }
          this.newline();
        } else if (option.allowed != null) {
          this.write(2, this.buildAllowedList(option));
        } else if (dart.test(option.isFlag)) {
          if (dart.equals(option.defaultsTo, true)) {
            this.write(2, "(defaults to on)");
          }
        } else if (dart.test(option.isMultiple)) {
          if (option.defaultsTo != null && dart.dtest(dart.dload(option.defaultsTo, 'isNotEmpty'))) {
            this.write(2, "(defaults to " + dart.notNull(core.String.as(dart.dsend(dart.dsend(option.defaultsTo, 'map', [dart.fn(value => "\"" + dart.str(value) + "\"", dynamicToStringL())]), 'join', [", "]))) + ")");
          }
        } else {
          if (option.defaultsTo != null) {
            this.write(2, "(defaults to \"" + dart.str(option.defaultsTo) + "\")");
          }
        }
      }
      return dart.toString(this.buffer);
    }
    getAbbreviation(option) {
      return option.abbr == null ? "" : "-" + dart.str(option.abbr) + ", ";
    }
    getLongOption(option) {
      let result = null;
      if (dart.test(option.negatable)) {
        result = "--[no-]" + dart.str(option.name);
      } else {
        result = "--" + dart.str(option.name);
      }
      if (option.valueHelp != null) result = dart.dsend(result, '+', ["=<" + dart.str(option.valueHelp) + ">"]);
      return StringL().as(result);
    }
    getAllowedTitle(option, allowed) {
      let isDefault = ListL().is(option.defaultsTo) ? dart.dsend(option.defaultsTo, 'contains', [allowed]) : dart.equals(option.defaultsTo, allowed);
      return "      [" + dart.str(allowed) + "]" + (dart.dtest(isDefault) ? " (default)" : "");
    }
    calculateColumnWidths() {
      let abbr = 0;
      let title = 0;
      for (let option of this.optionsAndSeparators) {
        if (!OptionL().is(option)) continue;
        if (dart.dtest(dart.dload(option, 'hide'))) continue;
        abbr = math.max(intL(), abbr, this.getAbbreviation(OptionL().as(option)).length);
        title = math.max(intL(), title, this.getLongOption(OptionL().as(option)).length);
        if (dart.dload(option, 'allowedHelp') != null) {
          for (let allowed of IterableL().as(dart.dload(dart.dload(option, 'allowedHelp'), 'keys'))) {
            title = math.max(intL(), title, this.getAllowedTitle(OptionL().as(option), StringL().as(allowed)).length);
          }
        }
      }
      title = title + 4;
      this.columnWidths = JSArrayOfintL().of([abbr, title]);
    }
    newline() {
      this.newlinesNeeded = dart.notNull(this.newlinesNeeded) + 1;
      this.currentColumn = 0;
      this.numHelpLines = 0;
    }
    write(column, text) {
      let lines = text[$split]("\n");
      if (column == this.columnWidths[$length] && this.lineLength != null) {
        let wrappedLines = JSArrayOfStringL().of([]);
        let start = this.columnWidths[$sublist](0, column)[$reduce](dart.fn((start, width) => start = dart.notNull(start) + dart.notNull(width), intLAndintLTointL()));
        for (let line of lines) {
          wrappedLines[$addAll](utils$.wrapTextAsLines(line, {start: start, length: this.lineLength}));
        }
        lines = wrappedLines;
      }
      while (dart.test(lines[$isNotEmpty]) && lines[$_get](0)[$trim]() === "") {
        lines[$removeRange](0, 1);
      }
      while (dart.test(lines[$isNotEmpty]) && lines[$_get](dart.notNull(lines[$length]) - 1)[$trim]() === "") {
        lines[$removeLast]();
      }
      for (let line of lines) {
        this.writeLine(column, line);
      }
    }
    writeLine(column, text) {
      while (dart.notNull(this.newlinesNeeded) > 0) {
        this.buffer.write("\n");
        this.newlinesNeeded = dart.notNull(this.newlinesNeeded) - 1;
      }
      while (this.currentColumn != column) {
        if (dart.notNull(this.currentColumn) < 3 - 1) {
          this.buffer.write(" "[$times](this.columnWidths[$_get](this.currentColumn)));
        } else {
          this.buffer.write("\n");
        }
        this.currentColumn = (dart.notNull(this.currentColumn) + 1)[$modulo](3);
      }
      if (dart.notNull(column) < dart.notNull(this.columnWidths[$length])) {
        this.buffer.write(text[$padRight](this.columnWidths[$_get](column)));
      } else {
        this.buffer.write(text);
      }
      this.currentColumn = (dart.notNull(this.currentColumn) + 1)[$modulo](3);
      if (column === 3 - 1) this.newlinesNeeded = dart.notNull(this.newlinesNeeded) + 1;
      if (column === 3 - 1) {
        this.numHelpLines = dart.notNull(this.numHelpLines) + 1;
      } else {
        this.numHelpLines = 0;
      }
    }
    buildAllowedList(option) {
      let isDefault = ListL().is(option.defaultsTo) ? dart.dload(option.defaultsTo, 'contains') : dart.fn(value => dart.equals(value, option.defaultsTo), dynamicToboolL());
      let allowedBuffer = new core.StringBuffer.new();
      allowedBuffer.write("[");
      let first = true;
      for (let allowed of option.allowed) {
        if (!first) allowedBuffer.write(", ");
        allowedBuffer.write(allowed);
        if (dart.dtest(dart.dcall(isDefault, [allowed]))) {
          allowedBuffer.write(" (default)");
        }
        first = false;
      }
      allowedBuffer.write("]");
      return allowedBuffer.toString();
    }
  };
  (usage.Usage.new = function(optionsAndSeparators, opts) {
    let lineLength = opts && 'lineLength' in opts ? opts.lineLength : null;
    this[buffer$] = null;
    this[currentColumn] = 0;
    this[columnWidths] = null;
    this[numHelpLines] = 0;
    this[newlinesNeeded] = 0;
    this[optionsAndSeparators$] = optionsAndSeparators;
    this[lineLength$0] = lineLength;
    ;
  }).prototype = usage.Usage.prototype;
  dart.addTypeTests(usage.Usage);
  dart.addTypeCaches(usage.Usage);
  dart.setMethodSignature(usage.Usage, () => ({
    __proto__: dart.getMethods(usage.Usage.__proto__),
    generate: dart.fnType(dart.legacy(core.String), []),
    getAbbreviation: dart.fnType(dart.legacy(core.String), [dart.legacy(option$.Option)]),
    getLongOption: dart.fnType(dart.legacy(core.String), [dart.legacy(option$.Option)]),
    getAllowedTitle: dart.fnType(dart.legacy(core.String), [dart.legacy(option$.Option), dart.legacy(core.String)]),
    calculateColumnWidths: dart.fnType(dart.void, []),
    newline: dart.fnType(dart.void, []),
    write: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.String)]),
    writeLine: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.String)]),
    buildAllowedList: dart.fnType(dart.legacy(core.String), [dart.legacy(option$.Option)])
  }));
  dart.setLibraryUri(usage.Usage, L27);
  dart.setFieldSignature(usage.Usage, () => ({
    __proto__: dart.getFields(usage.Usage.__proto__),
    optionsAndSeparators: dart.finalFieldType(dart.legacy(core.List)),
    buffer: dart.fieldType(dart.legacy(core.StringBuffer)),
    currentColumn: dart.fieldType(dart.legacy(core.int)),
    columnWidths: dart.fieldType(dart.legacy(core.List$(dart.legacy(core.int)))),
    numHelpLines: dart.fieldType(dart.legacy(core.int)),
    newlinesNeeded: dart.fieldType(dart.legacy(core.int)),
    lineLength: dart.finalFieldType(dart.legacy(core.int))
  }));
  dart.defineLazy(usage.Usage, {
    /*usage.Usage._columnCount*/get _columnCount() {
      return 3;
    }
  }, true);
  utils$.padRight = function padRight(source, length) {
    return dart.notNull(source) + " "[$times](dart.notNull(length) - source.length);
  };
  utils$.wrapText = function wrapText(text, opts) {
    let length = opts && 'length' in opts ? opts.length : null;
    let hangingIndent = opts && 'hangingIndent' in opts ? opts.hangingIndent : null;
    if (length == null) return text;
    hangingIndent == null ? hangingIndent = 0 : null;
    let splitText = text[$split]("\n");
    let result = JSArrayOfStringL().of([]);
    for (let line of splitText) {
      let trimmedText = line[$trimLeft]();
      let leadingWhitespace = line[$substring](0, line.length - trimmedText.length);
      let notIndented = null;
      if (hangingIndent !== 0) {
        let firstLineWrap = utils$.wrapTextAsLines(trimmedText, {length: dart.notNull(length) - leadingWhitespace.length});
        notIndented = JSArrayOfStringL().of([firstLineWrap[$removeAt](0)]);
        trimmedText = trimmedText[$substring](core.int.as(dart.dload(dart.dsend(notIndented, '_get', [0]), 'length')))[$trimLeft]();
        if (dart.test(firstLineWrap[$isNotEmpty])) {
          dart.dsend(notIndented, 'addAll', [utils$.wrapTextAsLines(trimmedText, {length: dart.notNull(length) - leadingWhitespace.length - dart.notNull(hangingIndent)})]);
        }
      } else {
        notIndented = utils$.wrapTextAsLines(trimmedText, {length: dart.notNull(length) - leadingWhitespace.length});
      }
      let hangingIndentString = null;
      result[$addAll](IterableOfStringL().as(dart.dgsend(notIndented, [StringL()], 'map', [dart.fn(line => {
          let t5;
          if (line[$isEmpty]) return "";
          let result = dart.str((t5 = hangingIndentString, t5 == null ? "" : t5)) + leadingWhitespace + dart.str(line);
          hangingIndentString == null ? hangingIndentString = " "[$times](hangingIndent) : null;
          return result;
        }, StringLToStringL())])));
    }
    return result[$join]("\n");
  };
  utils$.wrapTextAsLines = function wrapTextAsLines(text, opts) {
    let start = opts && 'start' in opts ? opts.start : 0;
    let length = opts && 'length' in opts ? opts.length : null;
    if (!(dart.notNull(start) >= 0)) dart.assertFailed(null, L28, 84, 10, "start >= 0");
    function isWhitespace(text, index) {
      let rune = text[$codeUnitAt](index);
      return rune >= 9 && rune <= 13 || rune === 32 || rune === 133 || rune === 5760 || rune === 6158 || rune >= 8192 && rune <= 8202 || rune === 8232 || rune === 8233 || rune === 8239 || rune === 8287 || rune === 12288 || rune === 65279;
    }
    dart.fn(isWhitespace, StringLAndintLToboolL());
    if (length == null) return text[$split]("\n");
    let result = JSArrayOfStringL().of([]);
    let effectiveLength = math.max(intL(), dart.notNull(length) - dart.notNull(start), 10);
    for (let line of text[$split]("\n")) {
      line = line[$trim]();
      if (line.length <= effectiveLength) {
        result[$add](line);
        continue;
      }
      let currentLineStart = 0;
      let lastWhitespace = null;
      for (let i = 0; dart.notNull(i) < line.length; i = dart.notNull(i) + 1) {
        if (dart.test(isWhitespace(line, i))) lastWhitespace = i;
        if (dart.notNull(i) - dart.notNull(currentLineStart) >= effectiveLength) {
          if (lastWhitespace != null) i = intL().as(lastWhitespace);
          result[$add](line[$substring](currentLineStart, i)[$trim]());
          while (dart.test(isWhitespace(line, i)) && dart.notNull(i) < line.length) {
            i = dart.notNull(i) + 1;
          }
          currentLineStart = i;
          lastWhitespace = null;
        }
      }
      result[$add](line[$substring](currentLineStart)[$trim]());
    }
    return result;
  };
  algorithms.binarySearch = function binarySearch(T, sortedList, value, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    compare == null ? compare = utils$0.defaultCompare(dart.legacy(T)) : null;
    let min = 0;
    let max = sortedList[$length];
    while (min < dart.notNull(max)) {
      let mid = min + (dart.notNull(max) - min)[$rightShift](1);
      let element = sortedList[$_get](mid);
      let comp = compare(element, value);
      if (comp === 0) return mid;
      if (dart.notNull(comp) < 0) {
        min = mid + 1;
      } else {
        max = mid;
      }
    }
    return -1;
  };
  algorithms.lowerBound = function lowerBound(T, sortedList, value, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    compare == null ? compare = utils$0.defaultCompare(dart.legacy(T)) : null;
    let min = 0;
    let max = sortedList[$length];
    while (min < dart.notNull(max)) {
      let mid = min + (dart.notNull(max) - min)[$rightShift](1);
      let element = sortedList[$_get](mid);
      let comp = compare(element, value);
      if (dart.notNull(comp) < 0) {
        min = mid + 1;
      } else {
        max = mid;
      }
    }
    return min;
  };
  algorithms.shuffle = function shuffle(list, start = 0, end = null) {
    let random = math.Random.new();
    end == null ? end = list[$length] : null;
    let length = dart.notNull(end) - dart.notNull(start);
    while (length > 1) {
      let pos = random.nextInt(length);
      length = length - 1;
      let tmp1 = list[$_get](dart.notNull(start) + dart.notNull(pos));
      list[$_set](dart.notNull(start) + dart.notNull(pos), list[$_get](dart.notNull(start) + length));
      list[$_set](dart.notNull(start) + length, tmp1);
    }
  };
  algorithms.reverse = function reverse(list, start = 0, end = null) {
    end == null ? end = list[$length] : null;
    algorithms._reverse(list, start, end);
  };
  algorithms._reverse = function _reverse(list, start, end) {
    for (let i = start, j = dart.notNull(end) - 1; dart.notNull(i) < j; i = dart.notNull(i) + 1, j = j - 1) {
      let tmp = list[$_get](i);
      list[$_set](i, list[$_get](j));
      list[$_set](j, tmp);
    }
  };
  algorithms.insertionSort = function insertionSort(T, list, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    let start = opts && 'start' in opts ? opts.start : 0;
    let end = opts && 'end' in opts ? opts.end : null;
    compare == null ? compare = utils$0.defaultCompare(dart.legacy(T)) : null;
    end == null ? end = list[$length] : null;
    for (let pos = dart.notNull(start) + 1; pos < dart.notNull(end); pos = pos + 1) {
      let min = start;
      let max = pos;
      let element = list[$_get](pos);
      while (dart.notNull(min) < max) {
        let mid = dart.notNull(min) + (max - dart.notNull(min))[$rightShift](1);
        let comparison = compare(element, list[$_get](mid));
        if (dart.notNull(comparison) < 0) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }
      list[$setRange](dart.notNull(min) + 1, pos + 1, list, min);
      list[$_set](min, element);
    }
  };
  algorithms.mergeSort = function mergeSort(T, list, opts) {
    let start = opts && 'start' in opts ? opts.start : 0;
    let end = opts && 'end' in opts ? opts.end : null;
    let compare = opts && 'compare' in opts ? opts.compare : null;
    end == null ? end = list[$length] : null;
    compare == null ? compare = utils$0.defaultCompare(dart.legacy(T)) : null;
    let length = dart.notNull(end) - dart.notNull(start);
    if (length < 2) return;
    if (length < 32) {
      algorithms.insertionSort(dart.legacy(T), list, {compare: compare, start: start, end: end});
      return;
    }
    let middle = dart.notNull(start) + (dart.notNull(end) - dart.notNull(start))[$rightShift](1);
    let firstLength = middle - dart.notNull(start);
    let secondLength = dart.notNull(end) - middle;
    let scratchSpace = core.List$(dart.legacy(T)).new(secondLength);
    algorithms._mergeSort(dart.legacy(T), list, compare, middle, end, scratchSpace, 0);
    let firstTarget = dart.notNull(end) - firstLength;
    algorithms._mergeSort(dart.legacy(T), list, compare, start, middle, list, firstTarget);
    algorithms._merge(dart.legacy(T), compare, list, firstTarget, end, scratchSpace, 0, secondLength, list, start);
  };
  algorithms._movingInsertionSort = function _movingInsertionSort(T, list, compare, start, end, target, targetOffset) {
    let length = dart.notNull(end) - dart.notNull(start);
    if (length === 0) return;
    target[$_set](targetOffset, list[$_get](start));
    for (let i = 1; i < length; i = i + 1) {
      let element = list[$_get](dart.notNull(start) + i);
      let min = targetOffset;
      let max = dart.notNull(targetOffset) + i;
      while (dart.notNull(min) < max) {
        let mid = dart.notNull(min) + (max - dart.notNull(min))[$rightShift](1);
        if (dart.notNull(compare(element, target[$_get](mid))) < 0) {
          max = mid;
        } else {
          min = mid + 1;
        }
      }
      target[$setRange](dart.notNull(min) + 1, dart.notNull(targetOffset) + i + 1, target, min);
      target[$_set](min, element);
    }
  };
  algorithms._mergeSort = function _mergeSort(T, list, compare, start, end, target, targetOffset) {
    let length = dart.notNull(end) - dart.notNull(start);
    if (length < 32) {
      algorithms._movingInsertionSort(dart.legacy(T), list, compare, start, end, target, targetOffset);
      return;
    }
    let middle = dart.notNull(start) + length[$rightShift](1);
    let firstLength = middle - dart.notNull(start);
    let secondLength = dart.notNull(end) - middle;
    let targetMiddle = dart.notNull(targetOffset) + firstLength;
    algorithms._mergeSort(dart.legacy(T), list, compare, middle, end, target, targetMiddle);
    algorithms._mergeSort(dart.legacy(T), list, compare, start, middle, list, middle);
    algorithms._merge(dart.legacy(T), compare, list, middle, middle + firstLength, target, targetMiddle, targetMiddle + secondLength, target, targetOffset);
  };
  algorithms._merge = function _merge(T, compare, firstList, firstStart, firstEnd, secondList, secondStart, secondEnd, target, targetOffset) {
    let t5, t5$, t5$0, t5$1, t5$2, t5$3, t5$4, t5$5;
    if (!(dart.notNull(firstStart) < dart.notNull(firstEnd))) dart.assertFailed(null, L29, 259, 10, "firstStart < firstEnd");
    if (!(dart.notNull(secondStart) < dart.notNull(secondEnd))) dart.assertFailed(null, L29, 260, 10, "secondStart < secondEnd");
    let cursor1 = firstStart;
    let cursor2 = secondStart;
    let firstElement = firstList[$_get]((t5 = cursor1, cursor1 = dart.notNull(t5) + 1, t5));
    let secondElement = secondList[$_get]((t5$ = cursor2, cursor2 = dart.notNull(t5$) + 1, t5$));
    while (true) {
      if (dart.notNull(compare(firstElement, secondElement)) <= 0) {
        target[$_set]((t5$0 = targetOffset, targetOffset = dart.notNull(t5$0) + 1, t5$0), firstElement);
        if (cursor1 == firstEnd) break;
        firstElement = firstList[$_get]((t5$1 = cursor1, cursor1 = dart.notNull(t5$1) + 1, t5$1));
      } else {
        target[$_set]((t5$2 = targetOffset, targetOffset = dart.notNull(t5$2) + 1, t5$2), secondElement);
        if (cursor2 != secondEnd) {
          secondElement = secondList[$_get]((t5$3 = cursor2, cursor2 = dart.notNull(t5$3) + 1, t5$3));
          continue;
        }
        target[$_set]((t5$4 = targetOffset, targetOffset = dart.notNull(t5$4) + 1, t5$4), firstElement);
        target[$setRange](targetOffset, dart.notNull(targetOffset) + (dart.notNull(firstEnd) - dart.notNull(cursor1)), firstList, cursor1);
        return;
      }
    }
    target[$_set]((t5$5 = targetOffset, targetOffset = dart.notNull(t5$5) + 1, t5$5), secondElement);
    target[$setRange](targetOffset, dart.notNull(targetOffset) + (dart.notNull(secondEnd) - dart.notNull(cursor2)), secondList, cursor2);
  };
  dart.defineLazy(algorithms, {
    /*algorithms._MERGE_SORT_LIMIT*/get _MERGE_SORT_LIMIT() {
      return 32;
    }
  }, true);
  var _base = dart.privateName(canonicalized_map, "_base");
  var _canonicalize = dart.privateName(canonicalized_map, "_canonicalize");
  var _isValidKeyFn = dart.privateName(canonicalized_map, "_isValidKeyFn");
  var _isValidKey = dart.privateName(canonicalized_map, "_isValidKey");
  const _is_CanonicalizedMap_default = Symbol('_is_CanonicalizedMap_default');
  canonicalized_map.CanonicalizedMap$ = dart.generic((C, K, V) => {
    var CL = () => (CL = dart.constFn(dart.legacy(C)))();
    var LinkedMapOfCL$PairLOfKL$VL = () => (LinkedMapOfCL$PairLOfKL$VL = dart.constFn(_js_helper.LinkedMap$(CL(), PairLOfKL$VL())))();
    var MapEntryOfCL$PairLOfKL$VL = () => (MapEntryOfCL$PairLOfKL$VL = dart.constFn(core.MapEntry$(CL(), PairLOfKL$VL())))();
    var MapEntryLOfCL$PairLOfKL$VL = () => (MapEntryLOfCL$PairLOfKL$VL = dart.constFn(dart.legacy(MapEntryOfCL$PairLOfKL$VL())))();
    var MapEntryLOfKL$VLToMapEntryLOfCL$PairLOfKL$VL = () => (MapEntryLOfKL$VLToMapEntryLOfCL$PairLOfKL$VL = dart.constFn(dart.fnType(MapEntryLOfCL$PairLOfKL$VL(), [MapEntryLOfKL$VL()])))();
    var MapEntryLOfCL$PairLOfKL$VLToMapEntryLOfKL$VL = () => (MapEntryLOfCL$PairLOfKL$VLToMapEntryLOfKL$VL = dart.constFn(dart.fnType(MapEntryLOfKL$VL(), [MapEntryLOfCL$PairLOfKL$VL()])))();
    var CLAndPairLOfKL$VLTovoid = () => (CLAndPairLOfKL$VLTovoid = dart.constFn(dart.fnType(dart.void, [CL(), PairLOfKL$VL()])))();
    var CLAndPairLOfKL$VLToboolL = () => (CLAndPairLOfKL$VLToboolL = dart.constFn(dart.fnType(boolL(), [CL(), PairLOfKL$VL()])))();
    var CLAndPairLOfKL$VLToPairLOfKL$VL = () => (CLAndPairLOfKL$VLToPairLOfKL$VL = dart.constFn(dart.fnType(PairLOfKL$VL(), [CL(), PairLOfKL$VL()])))();
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var PairOfKL$VL = () => (PairOfKL$VL = dart.constFn(utils$0.Pair$(KL(), VL())))();
    var PairLOfKL$VL = () => (PairLOfKL$VL = dart.constFn(dart.legacy(PairOfKL$VL())))();
    var MapOfKL$VL = () => (MapOfKL$VL = dart.constFn(core.Map$(KL(), VL())))();
    var MapLOfKL$VL = () => (MapLOfKL$VL = dart.constFn(dart.legacy(MapOfKL$VL())))();
    var KLAndVLToVL = () => (KLAndVLToVL = dart.constFn(dart.fnType(VL(), [KL(), VL()])))();
    var MapEntryOfKL$VL = () => (MapEntryOfKL$VL = dart.constFn(core.MapEntry$(KL(), VL())))();
    var MapEntryLOfKL$VL = () => (MapEntryLOfKL$VL = dart.constFn(dart.legacy(MapEntryOfKL$VL())))();
    var IterableOfMapEntryLOfKL$VL = () => (IterableOfMapEntryLOfKL$VL = dart.constFn(core.Iterable$(MapEntryLOfKL$VL())))();
    var IterableLOfMapEntryLOfKL$VL = () => (IterableLOfMapEntryLOfKL$VL = dart.constFn(dart.legacy(IterableOfMapEntryLOfKL$VL())))();
    var PairLOfKL$VLToboolL = () => (PairLOfKL$VLToboolL = dart.constFn(dart.fnType(boolL(), [PairLOfKL$VL()])))();
    var PairLOfKL$VLToKL = () => (PairLOfKL$VLToKL = dart.constFn(dart.fnType(KL(), [PairLOfKL$VL()])))();
    var VoidToPairLOfKL$VL = () => (VoidToPairLOfKL$VL = dart.constFn(dart.fnType(PairLOfKL$VL(), [])))();
    var PairLOfKL$VLToPairLOfKL$VL = () => (PairLOfKL$VLToPairLOfKL$VL = dart.constFn(dart.fnType(PairLOfKL$VL(), [PairLOfKL$VL()])))();
    var KLAndVLToLVL = () => (KLAndVLToLVL = dart.constFn(dart.legacy(KLAndVLToVL())))();
    var PairLOfKL$VLToVL = () => (PairLOfKL$VLToVL = dart.constFn(dart.fnType(VL(), [PairLOfKL$VL()])))();
    var KLAndVLToNullN = () => (KLAndVLToNullN = dart.constFn(dart.fnType(core.Null, [KL(), VL()])))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    var VoidToVL = () => (VoidToVL = dart.constFn(dart.fnType(VL(), [])))();
    var VoidToLVL = () => (VoidToLVL = dart.constFn(dart.legacy(VoidToVL())))();
    var VLToVL = () => (VLToVL = dart.constFn(dart.fnType(VL(), [VL()])))();
    var VLToLVL = () => (VLToLVL = dart.constFn(dart.legacy(VLToVL())))();
    class CanonicalizedMap extends core.Object {
      _get(key) {
        let t5;
        if (!dart.test(this[_isValidKey](key))) return null;
        let pair = this[_base][$_get]((t5 = KL().as(key), this[_canonicalize](t5)));
        return pair == null ? null : pair.last;
      }
      _set(key, value$) {
        let value = value$;
        let t5;
        KL().as(key);
        VL().as(value);
        if (!dart.test(this[_isValidKey](key))) return value$;
        this[_base][$_set]((t5 = key, this[_canonicalize](t5)), new (PairOfKL$VL()).new(key, value));
        return value$;
      }
      addAll(other) {
        MapLOfKL$VL().as(other);
        other[$forEach](dart.fn((key, value) => {
          let t6, t5;
          t5 = key;
          t6 = value;
          this._set(t5, t6);
          return t6;
        }, KLAndVLToVL()));
      }
      addEntries(entries) {
        IterableLOfMapEntryLOfKL$VL().as(entries);
        return this[_base][$addEntries](entries[$map](MapEntryLOfCL$PairLOfKL$VL(), dart.fn(e => {
          let t5;
          return new (MapEntryOfCL$PairLOfKL$VL()).__((t5 = e.key, this[_canonicalize](t5)), new (PairOfKL$VL()).new(e.key, e.value));
        }, MapEntryLOfKL$VLToMapEntryLOfCL$PairLOfKL$VL())));
      }
      cast(K2, V2) {
        return this[_base][$cast](dart.legacy(K2), dart.legacy(V2));
      }
      clear() {
        this[_base][$clear]();
      }
      containsKey(key) {
        let t5;
        if (!dart.test(this[_isValidKey](key))) return false;
        return this[_base][$containsKey]((t5 = KL().as(key), this[_canonicalize](t5)));
      }
      containsValue(value) {
        return this[_base][$values][$any](dart.fn(pair => dart.equals(pair.last, value), PairLOfKL$VLToboolL()));
      }
      get entries() {
        return this[_base][$entries][$map](MapEntryLOfKL$VL(), dart.fn(e => new (MapEntryOfKL$VL()).__(e.value.first, e.value.last), MapEntryLOfCL$PairLOfKL$VLToMapEntryLOfKL$VL()));
      }
      forEach(f) {
        this[_base][$forEach](dart.fn((key, pair) => f(pair.first, pair.last), CLAndPairLOfKL$VLTovoid()));
      }
      get isEmpty() {
        return this[_base][$isEmpty];
      }
      get isNotEmpty() {
        return this[_base][$isNotEmpty];
      }
      get keys() {
        return this[_base][$values][$map](KL(), dart.fn(pair => pair.first, PairLOfKL$VLToKL()));
      }
      get length() {
        return this[_base][$length];
      }
      map(K2, V2, transform) {
        return this[_base][$map](dart.legacy(K2), dart.legacy(V2), dart.fn((_, pair) => transform(pair.first, pair.last), dart.fnType(dart.legacy(core.MapEntry$(dart.legacy(K2), dart.legacy(V2))), [CL(), PairLOfKL$VL()])));
      }
      putIfAbsent(key, ifAbsent) {
        let t5;
        KL().as(key);
        VoidToLVL().as(ifAbsent);
        return this[_base][$putIfAbsent]((t5 = key, this[_canonicalize](t5)), dart.fn(() => new (PairOfKL$VL()).new(key, ifAbsent()), VoidToPairLOfKL$VL())).last;
      }
      remove(key) {
        let t5;
        if (!dart.test(this[_isValidKey](key))) return null;
        let pair = this[_base][$remove]((t5 = KL().as(key), this[_canonicalize](t5)));
        return pair == null ? null : pair.last;
      }
      removeWhere(test) {
        return this[_base][$removeWhere](dart.fn((_, pair) => test(pair.first, pair.last), CLAndPairLOfKL$VLToboolL()));
      }
      retype(K2, V2) {
        return this.cast(dart.legacy(K2), dart.legacy(V2));
      }
      update(key, update, opts) {
        let t5;
        KL().as(key);
        VLToLVL().as(update);
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToLVL().as(ifAbsent);
        return this[_base][$update]((t5 = key, this[_canonicalize](t5)), dart.fn(pair => new (PairOfKL$VL()).new(key, update(pair.last)), PairLOfKL$VLToPairLOfKL$VL()), {ifAbsent: ifAbsent == null ? null : dart.fn(() => new (PairOfKL$VL()).new(key, ifAbsent()), VoidToPairLOfKL$VL())}).last;
      }
      updateAll(update) {
        KLAndVLToLVL().as(update);
        return this[_base][$updateAll](dart.fn((_, pair) => new (PairOfKL$VL()).new(pair.first, update(pair.first, pair.last)), CLAndPairLOfKL$VLToPairLOfKL$VL()));
      }
      get values() {
        return this[_base][$values][$map](VL(), dart.fn(pair => pair.last, PairLOfKL$VLToVL()));
      }
      toString() {
        if (dart.test(canonicalized_map._isToStringVisiting(this))) {
          return "{...}";
        }
        let result = new core.StringBuffer.new();
        try {
          canonicalized_map._toStringVisiting[$add](this);
          result.write("{");
          let first = true;
          this.forEach(dart.fn((k, v) => {
            if (!first) {
              result.write(", ");
            }
            first = false;
            result.write(dart.str(k) + ": " + dart.str(v));
          }, KLAndVLToNullN()));
          result.write("}");
        } finally {
          if (!(canonicalized_map._toStringVisiting[$last] === this)) dart.assertFailed(null, L30, 174, 14, "identical(_toStringVisiting.last, this)");
          canonicalized_map._toStringVisiting[$removeLast]();
        }
        return result.toString();
      }
      [_isValidKey](key) {
        let t5;
        return (key == null || KL().is(key)) && (this[_isValidKeyFn] == null || dart.test((t5 = key, this[_isValidKeyFn](t5))));
      }
    }
    (CanonicalizedMap.new = function(canonicalize, opts) {
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      this[_base] = new (LinkedMapOfCL$PairLOfKL$VL()).new();
      this[_canonicalize] = canonicalize;
      this[_isValidKeyFn] = isValidKey;
      ;
    }).prototype = CanonicalizedMap.prototype;
    (CanonicalizedMap.from = function(other, canonicalize, opts) {
      let isValidKey = opts && 'isValidKey' in opts ? opts.isValidKey : null;
      this[_base] = new (LinkedMapOfCL$PairLOfKL$VL()).new();
      this[_canonicalize] = canonicalize;
      this[_isValidKeyFn] = isValidKey;
      this.addAll(other);
    }).prototype = CanonicalizedMap.prototype;
    CanonicalizedMap.prototype[dart.isMap] = true;
    dart.addTypeTests(CanonicalizedMap);
    CanonicalizedMap.prototype[_is_CanonicalizedMap_default] = true;
    dart.addTypeCaches(CanonicalizedMap);
    CanonicalizedMap[dart.implements] = () => [core.Map$(dart.legacy(K), dart.legacy(V))];
    dart.setMethodSignature(CanonicalizedMap, () => ({
      __proto__: dart.getMethods(CanonicalizedMap.__proto__),
      _get: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$_get]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      cast: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), []]),
      [$cast]: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), []]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      containsKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$containsKey]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      containsValue: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$containsValue]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(K), dart.legacy(V)]))]),
      [$forEach]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(K), dart.legacy(V)]))]),
      map: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(dart.fnType(dart.legacy(core.MapEntry$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(K), dart.legacy(V)]))]]),
      [$map]: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(dart.fnType(dart.legacy(core.MapEntry$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(K), dart.legacy(V)]))]]),
      putIfAbsent: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$putIfAbsent]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(K), dart.legacy(V)]))]),
      [$removeWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(K), dart.legacy(V)]))]),
      retype: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), []]),
      update: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)], {ifAbsent: dart.legacy(core.Object)}, {}),
      [$update]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)], {ifAbsent: dart.legacy(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      [_isValidKey]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(CanonicalizedMap, () => ({
      __proto__: dart.getGetters(CanonicalizedMap.__proto__),
      entries: dart.legacy(core.Iterable$(dart.legacy(core.MapEntry$(dart.legacy(K), dart.legacy(V))))),
      [$entries]: dart.legacy(core.Iterable$(dart.legacy(core.MapEntry$(dart.legacy(K), dart.legacy(V))))),
      isEmpty: dart.legacy(core.bool),
      [$isEmpty]: dart.legacy(core.bool),
      isNotEmpty: dart.legacy(core.bool),
      [$isNotEmpty]: dart.legacy(core.bool),
      keys: dart.legacy(core.Iterable$(dart.legacy(K))),
      [$keys]: dart.legacy(core.Iterable$(dart.legacy(K))),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int),
      values: dart.legacy(core.Iterable$(dart.legacy(V))),
      [$values]: dart.legacy(core.Iterable$(dart.legacy(V)))
    }));
    dart.setLibraryUri(CanonicalizedMap, L31);
    dart.setFieldSignature(CanonicalizedMap, () => ({
      __proto__: dart.getFields(CanonicalizedMap.__proto__),
      [_canonicalize]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(C), [dart.legacy(K)]))),
      [_isValidKeyFn]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]))),
      [_base]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(C), dart.legacy(utils$0.Pair$(dart.legacy(K), dart.legacy(V))))))
    }));
    dart.defineExtensionMethods(CanonicalizedMap, [
      '_get',
      '_set',
      'addAll',
      'addEntries',
      'cast',
      'clear',
      'containsKey',
      'containsValue',
      'forEach',
      'map',
      'putIfAbsent',
      'remove',
      'removeWhere',
      'update',
      'updateAll',
      'toString'
    ]);
    dart.defineExtensionAccessors(CanonicalizedMap, [
      'entries',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'length',
      'values'
    ]);
    return CanonicalizedMap;
  });
  canonicalized_map.CanonicalizedMap = canonicalized_map.CanonicalizedMap$();
  dart.addTypeTests(canonicalized_map.CanonicalizedMap, _is_CanonicalizedMap_default);
  canonicalized_map._isToStringVisiting = function _isToStringVisiting(o) {
    return canonicalized_map._toStringVisiting[$any](dart.fn(e => core.identical(o, e), dynamicToboolL()));
  };
  dart.defineLazy(canonicalized_map, {
    /*canonicalized_map._toStringVisiting*/get _toStringVisiting() {
      return [];
    }
  }, true);
  var _iterables = dart.privateName(combined_iterable, "_iterables");
  const _is_CombinedIterableView_default = Symbol('_is_CombinedIterableView_default');
  var _iterables$ = dart.privateName(combined_iterable, "CombinedIterableView._iterables");
  combined_iterable.CombinedIterableView$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _CombinedIteratorOfTL = () => (_CombinedIteratorOfTL = dart.constFn(combined_iterable._CombinedIterator$(TL())))();
    var IteratorOfTL = () => (IteratorOfTL = dart.constFn(core.Iterator$(TL())))();
    var IteratorLOfTL = () => (IteratorLOfTL = dart.constFn(dart.legacy(IteratorOfTL())))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToIteratorLOfTL = () => (IterableLOfTLToIteratorLOfTL = dart.constFn(dart.fnType(IteratorLOfTL(), [IterableLOfTL()])))();
    var IterableLOfTLToboolL = () => (IterableLOfTLToboolL = dart.constFn(dart.fnType(boolL(), [IterableLOfTL()])))();
    var intLAndIterableLOfTLTointL = () => (intLAndIterableLOfTLTointL = dart.constFn(dart.fnType(intL(), [intL(), IterableLOfTL()])))();
    class CombinedIterableView extends collection.IterableBase$(dart.legacy(T)) {
      get [_iterables]() {
        return this[_iterables$];
      }
      set [_iterables](value) {
        super[_iterables] = value;
      }
      get iterator() {
        return new (_CombinedIteratorOfTL()).new(this[_iterables][$map](IteratorLOfTL(), dart.fn(i => i[$iterator], IterableLOfTLToIteratorLOfTL()))[$iterator]);
      }
      contains(element) {
        return this[_iterables][$any](dart.fn(i => i[$contains](element), IterableLOfTLToboolL()));
      }
      get isEmpty() {
        return this[_iterables][$every](dart.fn(i => i[$isEmpty], IterableLOfTLToboolL()));
      }
      get length() {
        return this[_iterables][$fold](intL(), 0, dart.fn((length, i) => dart.notNull(length) + dart.notNull(i[$length]), intLAndIterableLOfTLTointL()));
      }
    }
    (CombinedIterableView.new = function(_iterables) {
      this[_iterables$] = _iterables;
      CombinedIterableView.__proto__.new.call(this);
      ;
    }).prototype = CombinedIterableView.prototype;
    dart.addTypeTests(CombinedIterableView);
    CombinedIterableView.prototype[_is_CombinedIterableView_default] = true;
    dart.addTypeCaches(CombinedIterableView);
    dart.setMethodSignature(CombinedIterableView, () => ({
      __proto__: dart.getMethods(CombinedIterableView.__proto__),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(CombinedIterableView, () => ({
      __proto__: dart.getGetters(CombinedIterableView.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(T))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(T))),
      isEmpty: dart.legacy(core.bool),
      [$isEmpty]: dart.legacy(core.bool),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(CombinedIterableView, L32);
    dart.setFieldSignature(CombinedIterableView, () => ({
      __proto__: dart.getFields(CombinedIterableView.__proto__),
      [_iterables]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(core.Iterable$(dart.legacy(T))))))
    }));
    dart.defineExtensionMethods(CombinedIterableView, ['contains']);
    dart.defineExtensionAccessors(CombinedIterableView, ['iterator', 'isEmpty', 'length']);
    return CombinedIterableView;
  });
  combined_iterable.CombinedIterableView = combined_iterable.CombinedIterableView$();
  dart.addTypeTests(combined_iterable.CombinedIterableView, _is_CombinedIterableView_default);
  var _iterators$ = dart.privateName(combined_iterable, "_iterators");
  const _is__CombinedIterator_default = Symbol('_is__CombinedIterator_default');
  combined_iterable._CombinedIterator$ = dart.generic(T => {
    class _CombinedIterator extends core.Object {
      get current() {
        let t5;
        t5 = this[_iterators$].current;
        return t5 == null ? null : t5.current;
      }
      moveNext() {
        let current = this[_iterators$].current;
        if (current != null && dart.test(current.moveNext())) {
          return true;
        }
        return dart.test(this[_iterators$].moveNext()) && dart.test(this.moveNext());
      }
    }
    (_CombinedIterator.new = function(_iterators) {
      this[_iterators$] = _iterators;
      ;
    }).prototype = _CombinedIterator.prototype;
    dart.addTypeTests(_CombinedIterator);
    _CombinedIterator.prototype[_is__CombinedIterator_default] = true;
    dart.addTypeCaches(_CombinedIterator);
    _CombinedIterator[dart.implements] = () => [core.Iterator$(dart.legacy(T))];
    dart.setMethodSignature(_CombinedIterator, () => ({
      __proto__: dart.getMethods(_CombinedIterator.__proto__),
      moveNext: dart.fnType(dart.legacy(core.bool), [])
    }));
    dart.setGetterSignature(_CombinedIterator, () => ({
      __proto__: dart.getGetters(_CombinedIterator.__proto__),
      current: dart.legacy(T)
    }));
    dart.setLibraryUri(_CombinedIterator, L32);
    dart.setFieldSignature(_CombinedIterator, () => ({
      __proto__: dart.getFields(_CombinedIterator.__proto__),
      [_iterators$]: dart.finalFieldType(dart.legacy(core.Iterator$(dart.legacy(core.Iterator$(dart.legacy(T))))))
    }));
    return _CombinedIterator;
  });
  combined_iterable._CombinedIterator = combined_iterable._CombinedIterator$();
  dart.addTypeTests(combined_iterable._CombinedIterator, _is__CombinedIterator_default);
  var _lists$ = dart.privateName(combined_list, "_lists");
  const _is_CombinedListView_default = Symbol('_is_CombinedListView_default');
  combined_list.CombinedListView$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    var ListLOfTL = () => (ListLOfTL = dart.constFn(dart.legacy(ListOfTL())))();
    var intLAndListLOfTLTointL = () => (intLAndListLOfTLTointL = dart.constFn(dart.fnType(intL(), [intL(), ListLOfTL()])))();
    class CombinedListView extends collection.ListBase$(dart.legacy(T)) {
      static _throw() {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable List"));
      }
      set length(length) {
        combined_list.CombinedListView._throw();
      }
      get length() {
        return this[_lists$][$fold](intL(), 0, dart.fn((length, list) => dart.notNull(length) + dart.notNull(list[$length]), intLAndListLOfTLTointL()));
      }
      _get(index) {
        let initialIndex = index;
        for (let i = 0; i < dart.notNull(this[_lists$][$length]); i = i + 1) {
          let list = this[_lists$][$_get](i);
          if (dart.notNull(index) < dart.notNull(list[$length])) {
            return list[$_get](index);
          }
          index = dart.notNull(index) - dart.notNull(list[$length]);
        }
        dart.throw(new core.IndexError.new(initialIndex, this, "index", null, this.length));
      }
      _set(index, value$) {
        let value = value$;
        TL().as(value);
        combined_list.CombinedListView._throw();
        return value$;
      }
      clear() {
        combined_list.CombinedListView._throw();
      }
      remove(element) {
        combined_list.CombinedListView._throw();
        return null;
      }
      removeWhere(test) {
        combined_list.CombinedListView._throw();
      }
      retainWhere(test) {
        combined_list.CombinedListView._throw();
      }
    }
    (CombinedListView.new = function(_lists) {
      this[_lists$] = _lists;
      ;
    }).prototype = CombinedListView.prototype;
    dart.addTypeTests(CombinedListView);
    CombinedListView.prototype[_is_CombinedListView_default] = true;
    dart.addTypeCaches(CombinedListView);
    CombinedListView[dart.implements] = () => [collection.UnmodifiableListView$(dart.legacy(T))];
    dart.setMethodSignature(CombinedListView, () => ({
      __proto__: dart.getMethods(CombinedListView.__proto__),
      _get: dart.fnType(dart.legacy(T), [dart.legacy(core.int)]),
      [$_get]: dart.fnType(dart.legacy(T), [dart.legacy(core.int)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      [$removeWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))]),
      [$retainWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(T)]))])
    }));
    dart.setGetterSignature(CombinedListView, () => ({
      __proto__: dart.getGetters(CombinedListView.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setSetterSignature(CombinedListView, () => ({
      __proto__: dart.getSetters(CombinedListView.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(CombinedListView, L33);
    dart.setFieldSignature(CombinedListView, () => ({
      __proto__: dart.getFields(CombinedListView.__proto__),
      [_lists$]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.List$(dart.legacy(T))))))
    }));
    dart.defineExtensionMethods(CombinedListView, [
      '_get',
      '_set',
      'clear',
      'remove',
      'removeWhere',
      'retainWhere'
    ]);
    dart.defineExtensionAccessors(CombinedListView, ['length']);
    return CombinedListView;
  });
  combined_list.CombinedListView = combined_list.CombinedListView$();
  dart.addTypeTests(combined_list.CombinedListView, _is_CombinedListView_default);
  var _maps$ = dart.privateName(combined_map, "_maps");
  const _is_CombinedMapView_default = Symbol('_is_CombinedMapView_default');
  combined_map.CombinedMapView$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var _DeduplicatingIterableViewOfKL = () => (_DeduplicatingIterableViewOfKL = dart.constFn(combined_map._DeduplicatingIterableView$(KL())))();
    var CombinedIterableViewOfKL = () => (CombinedIterableViewOfKL = dart.constFn(combined_iterable.CombinedIterableView$(KL())))();
    var IterableOfKL = () => (IterableOfKL = dart.constFn(core.Iterable$(KL())))();
    var IterableLOfKL = () => (IterableLOfKL = dart.constFn(dart.legacy(IterableOfKL())))();
    var MapOfKL$VL = () => (MapOfKL$VL = dart.constFn(core.Map$(KL(), VL())))();
    var MapLOfKL$VL = () => (MapLOfKL$VL = dart.constFn(dart.legacy(MapOfKL$VL())))();
    var MapLOfKL$VLToIterableLOfKL = () => (MapLOfKL$VLToIterableLOfKL = dart.constFn(dart.fnType(IterableLOfKL(), [MapLOfKL$VL()])))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class CombinedMapView extends collection.UnmodifiableMapBase$(dart.legacy(K), dart.legacy(V)) {
      _get(key) {
        for (let map of this[_maps$]) {
          let value = map[$_get](key);
          if (value != null || dart.test(map[$containsKey](value))) {
            return value;
          }
        }
        return null;
      }
      get keys() {
        return new (_DeduplicatingIterableViewOfKL()).new(new (CombinedIterableViewOfKL()).new(this[_maps$][$map](IterableLOfKL(), dart.fn(m => m[$keys], MapLOfKL$VLToIterableLOfKL()))));
      }
    }
    (CombinedMapView.new = function(_maps) {
      this[_maps$] = _maps;
      ;
    }).prototype = CombinedMapView.prototype;
    dart.addTypeTests(CombinedMapView);
    CombinedMapView.prototype[_is_CombinedMapView_default] = true;
    dart.addTypeCaches(CombinedMapView);
    dart.setMethodSignature(CombinedMapView, () => ({
      __proto__: dart.getMethods(CombinedMapView.__proto__),
      _get: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$_get]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(CombinedMapView, () => ({
      __proto__: dart.getGetters(CombinedMapView.__proto__),
      keys: dart.legacy(core.Iterable$(dart.legacy(K))),
      [$keys]: dart.legacy(core.Iterable$(dart.legacy(K)))
    }));
    dart.setLibraryUri(CombinedMapView, L34);
    dart.setFieldSignature(CombinedMapView, () => ({
      __proto__: dart.getFields(CombinedMapView.__proto__),
      [_maps$]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))))
    }));
    dart.defineExtensionMethods(CombinedMapView, ['_get']);
    dart.defineExtensionAccessors(CombinedMapView, ['keys']);
    return CombinedMapView;
  });
  combined_map.CombinedMapView = combined_map.CombinedMapView$();
  dart.addTypeTests(combined_map.CombinedMapView, _is_CombinedMapView_default);
  var _iterable = dart.privateName(combined_map, "_iterable");
  const _is__DeduplicatingIterableView_default = Symbol('_is__DeduplicatingIterableView_default');
  var _iterable$ = dart.privateName(combined_map, "_DeduplicatingIterableView._iterable");
  combined_map._DeduplicatingIterableView$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _DeduplicatingIteratorOfTL = () => (_DeduplicatingIteratorOfTL = dart.constFn(combined_map._DeduplicatingIterator$(TL())))();
    class _DeduplicatingIterableView extends collection.IterableBase$(dart.legacy(T)) {
      get [_iterable]() {
        return this[_iterable$];
      }
      set [_iterable](value) {
        super[_iterable] = value;
      }
      get iterator() {
        return new (_DeduplicatingIteratorOfTL()).new(this[_iterable][$iterator]);
      }
      contains(element) {
        return this[_iterable][$contains](element);
      }
      get isEmpty() {
        return this[_iterable][$isEmpty];
      }
    }
    (_DeduplicatingIterableView.new = function(_iterable) {
      this[_iterable$] = _iterable;
      _DeduplicatingIterableView.__proto__.new.call(this);
      ;
    }).prototype = _DeduplicatingIterableView.prototype;
    dart.addTypeTests(_DeduplicatingIterableView);
    _DeduplicatingIterableView.prototype[_is__DeduplicatingIterableView_default] = true;
    dart.addTypeCaches(_DeduplicatingIterableView);
    dart.setMethodSignature(_DeduplicatingIterableView, () => ({
      __proto__: dart.getMethods(_DeduplicatingIterableView.__proto__),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(_DeduplicatingIterableView, () => ({
      __proto__: dart.getGetters(_DeduplicatingIterableView.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(T))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(T))),
      isEmpty: dart.legacy(core.bool),
      [$isEmpty]: dart.legacy(core.bool)
    }));
    dart.setLibraryUri(_DeduplicatingIterableView, L34);
    dart.setFieldSignature(_DeduplicatingIterableView, () => ({
      __proto__: dart.getFields(_DeduplicatingIterableView.__proto__),
      [_iterable]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(T))))
    }));
    dart.defineExtensionMethods(_DeduplicatingIterableView, ['contains']);
    dart.defineExtensionAccessors(_DeduplicatingIterableView, ['iterator', 'isEmpty']);
    return _DeduplicatingIterableView;
  });
  combined_map._DeduplicatingIterableView = combined_map._DeduplicatingIterableView$();
  dart.addTypeTests(combined_map._DeduplicatingIterableView, _is__DeduplicatingIterableView_default);
  var _emitted = dart.privateName(combined_map, "_emitted");
  var _iterator$ = dart.privateName(combined_map, "_iterator");
  const _is__DeduplicatingIterator_default = Symbol('_is__DeduplicatingIterator_default');
  combined_map._DeduplicatingIterator$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var _HashSetOfTL = () => (_HashSetOfTL = dart.constFn(collection._HashSet$(TL())))();
    class _DeduplicatingIterator extends core.Object {
      get current() {
        return this[_iterator$].current;
      }
      moveNext() {
        while (dart.test(this[_iterator$].moveNext())) {
          if (dart.test(this[_emitted].add(this.current))) {
            return true;
          }
        }
        return false;
      }
    }
    (_DeduplicatingIterator.new = function(_iterator) {
      this[_emitted] = new (_HashSetOfTL()).new();
      this[_iterator$] = _iterator;
      ;
    }).prototype = _DeduplicatingIterator.prototype;
    dart.addTypeTests(_DeduplicatingIterator);
    _DeduplicatingIterator.prototype[_is__DeduplicatingIterator_default] = true;
    dart.addTypeCaches(_DeduplicatingIterator);
    _DeduplicatingIterator[dart.implements] = () => [core.Iterator$(dart.legacy(T))];
    dart.setMethodSignature(_DeduplicatingIterator, () => ({
      __proto__: dart.getMethods(_DeduplicatingIterator.__proto__),
      moveNext: dart.fnType(dart.legacy(core.bool), [])
    }));
    dart.setGetterSignature(_DeduplicatingIterator, () => ({
      __proto__: dart.getGetters(_DeduplicatingIterator.__proto__),
      current: dart.legacy(T)
    }));
    dart.setLibraryUri(_DeduplicatingIterator, L34);
    dart.setFieldSignature(_DeduplicatingIterator, () => ({
      __proto__: dart.getFields(_DeduplicatingIterator.__proto__),
      [_iterator$]: dart.finalFieldType(dart.legacy(core.Iterator$(dart.legacy(T)))),
      [_emitted]: dart.finalFieldType(dart.legacy(collection.HashSet$(dart.legacy(T))))
    }));
    return _DeduplicatingIterator;
  });
  combined_map._DeduplicatingIterator = combined_map._DeduplicatingIterator$();
  dart.addTypeTests(combined_map._DeduplicatingIterator, _is__DeduplicatingIterator_default);
  comparators.equalsIgnoreAsciiCase = function equalsIgnoreAsciiCase(a, b) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i = i + 1) {
      let aChar = a[$codeUnitAt](i);
      let bChar = b[$codeUnitAt](i);
      if (aChar === bChar) continue;
      if ((aChar ^ bChar) >>> 0 !== 32) return false;
      let aCharLowerCase = (aChar | 32) >>> 0;
      if (97 <= aCharLowerCase && aCharLowerCase <= 122) {
        continue;
      }
      return false;
    }
    return true;
  };
  comparators.hashIgnoreAsciiCase = function hashIgnoreAsciiCase(string) {
    let hash = 0;
    for (let i = 0; i < string.length; i = i + 1) {
      let char = string[$codeUnitAt](i);
      if (97 <= char && char <= 122) char = char - 32;
      hash = 536870911 & hash + char;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      hash = hash[$rightShift](6);
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3);
    hash = hash[$rightShift](11);
    return 536870911 & hash + ((16383 & hash) << 15);
  };
  comparators.compareAsciiUpperCase = function compareAsciiUpperCase(a, b) {
    let defaultResult = 0;
    for (let i = 0; i < a.length; i = i + 1) {
      if (i >= b.length) return 1;
      let aChar = a[$codeUnitAt](i);
      let bChar = b[$codeUnitAt](i);
      if (aChar === bChar) continue;
      let aUpperCase = aChar;
      let bUpperCase = bChar;
      if (97 <= aChar && aChar <= 122) {
        aUpperCase = aUpperCase - 32;
      }
      if (97 <= bChar && bChar <= 122) {
        bUpperCase = bUpperCase - 32;
      }
      if (aUpperCase !== bUpperCase) return (aUpperCase - bUpperCase)[$sign];
      if (defaultResult === 0) defaultResult = aChar - bChar;
    }
    if (b.length > a.length) return -1;
    return defaultResult[$sign];
  };
  comparators.compareAsciiLowerCase = function compareAsciiLowerCase(a, b) {
    let defaultResult = 0;
    for (let i = 0; i < a.length; i = i + 1) {
      if (i >= b.length) return 1;
      let aChar = a[$codeUnitAt](i);
      let bChar = b[$codeUnitAt](i);
      if (aChar === bChar) continue;
      let aLowerCase = aChar;
      let bLowerCase = bChar;
      if (65 <= bChar && bChar <= 90) {
        bLowerCase = bLowerCase + 32;
      }
      if (65 <= aChar && aChar <= 90) {
        aLowerCase = aLowerCase + 32;
      }
      if (aLowerCase !== bLowerCase) return (aLowerCase - bLowerCase)[$sign];
      if (defaultResult === 0) defaultResult = aChar - bChar;
    }
    if (b.length > a.length) return -1;
    return defaultResult[$sign];
  };
  comparators.compareNatural = function compareNatural(a, b) {
    for (let i = 0; i < a.length; i = i + 1) {
      if (i >= b.length) return 1;
      let aChar = a[$codeUnitAt](i);
      let bChar = b[$codeUnitAt](i);
      if (aChar !== bChar) {
        return comparators._compareNaturally(a, b, i, aChar, bChar);
      }
    }
    if (b.length > a.length) return -1;
    return 0;
  };
  comparators.compareAsciiLowerCaseNatural = function compareAsciiLowerCaseNatural(a, b) {
    let defaultResult = 0;
    for (let i = 0; i < a.length; i = i + 1) {
      if (i >= b.length) return 1;
      let aChar = a[$codeUnitAt](i);
      let bChar = b[$codeUnitAt](i);
      if (aChar === bChar) continue;
      let aLowerCase = aChar;
      let bLowerCase = bChar;
      if (65 <= aChar && aChar <= 90) {
        aLowerCase = aLowerCase + 32;
      }
      if (65 <= bChar && bChar <= 90) {
        bLowerCase = bLowerCase + 32;
      }
      if (aLowerCase !== bLowerCase) {
        return comparators._compareNaturally(a, b, i, aLowerCase, bLowerCase);
      }
      if (defaultResult === 0) defaultResult = aChar - bChar;
    }
    if (b.length > a.length) return -1;
    return defaultResult[$sign];
  };
  comparators.compareAsciiUpperCaseNatural = function compareAsciiUpperCaseNatural(a, b) {
    let defaultResult = 0;
    for (let i = 0; i < a.length; i = i + 1) {
      if (i >= b.length) return 1;
      let aChar = a[$codeUnitAt](i);
      let bChar = b[$codeUnitAt](i);
      if (aChar === bChar) continue;
      let aUpperCase = aChar;
      let bUpperCase = bChar;
      if (97 <= aChar && aChar <= 122) {
        aUpperCase = aUpperCase - 32;
      }
      if (97 <= bChar && bChar <= 122) {
        bUpperCase = bUpperCase - 32;
      }
      if (aUpperCase !== bUpperCase) {
        return comparators._compareNaturally(a, b, i, aUpperCase, bUpperCase);
      }
      if (defaultResult === 0) defaultResult = aChar - bChar;
    }
    if (b.length > a.length) return -1;
    return defaultResult[$sign];
  };
  comparators._compareNaturally = function _compareNaturally(a, b, index, aChar, bChar) {
    if (!(aChar != bChar)) dart.assertFailed(null, L35, 259, 10, "aChar != bChar");
    let aIsDigit = comparators._isDigit(aChar);
    let bIsDigit = comparators._isDigit(bChar);
    if (dart.test(aIsDigit)) {
      if (dart.test(bIsDigit)) {
        return comparators._compareNumerically(a, b, aChar, bChar, index);
      } else if (dart.notNull(index) > 0 && dart.test(comparators._isDigit(a[$codeUnitAt](dart.notNull(index) - 1)))) {
        return 1;
      }
    } else if (dart.test(bIsDigit) && dart.notNull(index) > 0 && dart.test(comparators._isDigit(b[$codeUnitAt](dart.notNull(index) - 1)))) {
      return -1;
    }
    return (dart.notNull(aChar) - dart.notNull(bChar))[$sign];
  };
  comparators._compareNumerically = function _compareNumerically(a, b, aChar, bChar, index) {
    if (dart.test(comparators._isNonZeroNumberSuffix(a, index))) {
      let result = comparators._compareDigitCount(a, b, index, index);
      if (result !== 0) return result;
      return (dart.notNull(aChar) - dart.notNull(bChar))[$sign];
    }
    let aIndex = index;
    let bIndex = index;
    if (aChar === 48) {
      do {
        aIndex = dart.notNull(aIndex) + 1;
        if (aIndex === a.length) return -1;
        aChar = a[$codeUnitAt](aIndex);
      } while (aChar === 48);
      if (!dart.test(comparators._isDigit(aChar))) return -1;
    } else if (bChar === 48) {
      do {
        bIndex = dart.notNull(bIndex) + 1;
        if (bIndex === b.length) return 1;
        bChar = b[$codeUnitAt](bIndex);
      } while (bChar === 48);
      if (!dart.test(comparators._isDigit(bChar))) return 1;
    }
    if (aChar != bChar) {
      let result = comparators._compareDigitCount(a, b, aIndex, bIndex);
      if (result !== 0) return result;
      return (dart.notNull(aChar) - dart.notNull(bChar))[$sign];
    }
    while (true) {
      let aIsDigit = false;
      let bIsDigit = false;
      aChar = 0;
      bChar = 0;
      if ((aIndex = dart.notNull(aIndex) + 1) < a.length) {
        aChar = a[$codeUnitAt](aIndex);
        aIsDigit = comparators._isDigit(aChar);
      }
      if ((bIndex = dart.notNull(bIndex) + 1) < b.length) {
        bChar = b[$codeUnitAt](bIndex);
        bIsDigit = comparators._isDigit(bChar);
      }
      if (dart.test(aIsDigit)) {
        if (dart.test(bIsDigit)) {
          if (aChar == bChar) continue;
          break;
        }
        return 1;
      } else if (dart.test(bIsDigit)) {
        return -1;
      } else {
        return (dart.notNull(aIndex) - dart.notNull(bIndex))[$sign];
      }
    }
    let result = comparators._compareDigitCount(a, b, aIndex, bIndex);
    if (result !== 0) return result;
    return (dart.notNull(aChar) - dart.notNull(bChar))[$sign];
  };
  comparators._compareDigitCount = function _compareDigitCount(a, b, i, j) {
    while ((i = dart.notNull(i) + 1) < a.length) {
      let aIsDigit = comparators._isDigit(a[$codeUnitAt](i));
      if ((j = dart.notNull(j) + 1) === b.length) return dart.test(aIsDigit) ? 1 : 0;
      let bIsDigit = comparators._isDigit(b[$codeUnitAt](j));
      if (dart.test(aIsDigit)) {
        if (dart.test(bIsDigit)) continue;
        return 1;
      } else if (dart.test(bIsDigit)) {
        return -1;
      } else {
        return 0;
      }
    }
    if ((j = dart.notNull(j) + 1) < b.length && dart.test(comparators._isDigit(b[$codeUnitAt](j)))) {
      return -1;
    }
    return 0;
  };
  comparators._isDigit = function _isDigit(charCode) {
    return (dart.notNull(charCode) ^ 48) >>> 0 <= 9;
  };
  comparators._isNonZeroNumberSuffix = function _isNonZeroNumberSuffix(string, index) {
    while ((index = dart.notNull(index) - 1) >= 0) {
      let char = string[$codeUnitAt](index);
      if (char !== 48) return comparators._isDigit(char);
    }
    return false;
  };
  dart.defineLazy(comparators, {
    /*comparators._zero*/get _zero() {
      return 48;
    },
    /*comparators._upperCaseA*/get _upperCaseA() {
      return 65;
    },
    /*comparators._upperCaseZ*/get _upperCaseZ() {
      return 90;
    },
    /*comparators._lowerCaseA*/get _lowerCaseA() {
      return 97;
    },
    /*comparators._lowerCaseZ*/get _lowerCaseZ() {
      return 122;
    },
    /*comparators._asciiCaseBit*/get _asciiCaseBit() {
      return 32;
    }
  }, true);
  const _is_Equality_default = Symbol('_is_Equality_default');
  equality.Equality$ = dart.generic(E => {
    class Equality extends core.Object {}
    (Equality[dart.mixinNew] = function() {
    }).prototype = Equality.prototype;
    dart.addTypeTests(Equality);
    Equality.prototype[_is_Equality_default] = true;
    dart.addTypeCaches(Equality);
    dart.setLibraryUri(Equality, L36);
    return Equality;
  });
  equality.Equality = equality.Equality$();
  dart.addTypeTests(equality.Equality, _is_Equality_default);
  var C24;
  var _comparisonKey = dart.privateName(equality, "_comparisonKey");
  var _inner = dart.privateName(equality, "_inner");
  const _is_EqualityBy_default = Symbol('_is_EqualityBy_default');
  equality.EqualityBy$ = dart.generic((E, F) => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var FL = () => (FL = dart.constFn(dart.legacy(F)))();
    class EqualityBy extends core.Object {
      equals(e1, e2) {
        let t5, t5$;
        EL().as(e1);
        EL().as(e2);
        return this[_inner].equals((t5 = e1, this[_comparisonKey](t5)), (t5$ = e2, this[_comparisonKey](t5$)));
      }
      hash(e) {
        let t5;
        EL().as(e);
        return this[_inner].hash((t5 = e, this[_comparisonKey](t5)));
      }
      isValidKey(o) {
        let t5;
        if (EL().is(o)) {
          let value = (t5 = o, this[_comparisonKey](t5));
          return FL().is(value) && dart.test(this[_inner].isValidKey(value));
        }
        return false;
      }
    }
    (EqualityBy.new = function(comparisonKey, inner = C24 || CT.C24) {
      this[_comparisonKey] = comparisonKey;
      this[_inner] = inner;
      ;
    }).prototype = EqualityBy.prototype;
    dart.addTypeTests(EqualityBy);
    EqualityBy.prototype[_is_EqualityBy_default] = true;
    dart.addTypeCaches(EqualityBy);
    EqualityBy[dart.implements] = () => [equality.Equality$(dart.legacy(E))];
    dart.setMethodSignature(EqualityBy, () => ({
      __proto__: dart.getMethods(EqualityBy.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(EqualityBy, L36);
    dart.setFieldSignature(EqualityBy, () => ({
      __proto__: dart.getFields(EqualityBy.__proto__),
      [_comparisonKey]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(F), [dart.legacy(E)]))),
      [_inner]: dart.finalFieldType(dart.legacy(equality.Equality$(dart.legacy(F))))
    }));
    return EqualityBy;
  });
  equality.EqualityBy = equality.EqualityBy$();
  dart.addTypeTests(equality.EqualityBy, _is_EqualityBy_default);
  const _is_DefaultEquality_default = Symbol('_is_DefaultEquality_default');
  equality.DefaultEquality$ = dart.generic(E => {
    class DefaultEquality extends core.Object {
      equals(e1, e2) {
        return dart.equals(e1, e2);
      }
      hash(e) {
        return dart.hashCode(e);
      }
      isValidKey(o) {
        return true;
      }
    }
    (DefaultEquality.new = function() {
      ;
    }).prototype = DefaultEquality.prototype;
    dart.addTypeTests(DefaultEquality);
    DefaultEquality.prototype[_is_DefaultEquality_default] = true;
    dart.addTypeCaches(DefaultEquality);
    DefaultEquality[dart.implements] = () => [equality.Equality$(dart.legacy(E))];
    dart.setMethodSignature(DefaultEquality, () => ({
      __proto__: dart.getMethods(DefaultEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(DefaultEquality, L36);
    return DefaultEquality;
  });
  equality.DefaultEquality = equality.DefaultEquality$();
  dart.addTypeTests(equality.DefaultEquality, _is_DefaultEquality_default);
  const _is_IdentityEquality_default = Symbol('_is_IdentityEquality_default');
  equality.IdentityEquality$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    class IdentityEquality extends core.Object {
      equals(e1, e2) {
        EL().as(e1);
        EL().as(e2);
        return core.identical(e1, e2);
      }
      hash(e) {
        EL().as(e);
        return core.identityHashCode(e);
      }
      isValidKey(o) {
        return true;
      }
    }
    (IdentityEquality.new = function() {
      ;
    }).prototype = IdentityEquality.prototype;
    dart.addTypeTests(IdentityEquality);
    IdentityEquality.prototype[_is_IdentityEquality_default] = true;
    dart.addTypeCaches(IdentityEquality);
    IdentityEquality[dart.implements] = () => [equality.Equality$(dart.legacy(E))];
    dart.setMethodSignature(IdentityEquality, () => ({
      __proto__: dart.getMethods(IdentityEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(IdentityEquality, L36);
    return IdentityEquality;
  });
  equality.IdentityEquality = equality.IdentityEquality$();
  dart.addTypeTests(equality.IdentityEquality, _is_IdentityEquality_default);
  var _elementEquality = dart.privateName(equality, "_elementEquality");
  const _is_IterableEquality_default = Symbol('_is_IterableEquality_default');
  var _elementEquality$ = dart.privateName(equality, "IterableEquality._elementEquality");
  equality.IterableEquality$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    class IterableEquality extends core.Object {
      get [_elementEquality]() {
        return this[_elementEquality$];
      }
      set [_elementEquality](value) {
        super[_elementEquality] = value;
      }
      equals(elements1, elements2) {
        IterableLOfEL().as(elements1);
        IterableLOfEL().as(elements2);
        if (elements1 == elements2) return true;
        if (elements1 == null || elements2 == null) return false;
        let it1 = elements1[$iterator];
        let it2 = elements2[$iterator];
        while (true) {
          let hasNext = it1.moveNext();
          if (!dart.equals(hasNext, it2.moveNext())) return false;
          if (!dart.test(hasNext)) return true;
          if (!dart.test(this[_elementEquality].equals(it1.current, it2.current))) return false;
        }
      }
      hash(elements) {
        IterableLOfEL().as(elements);
        if (elements == null) return dart.hashCode(null);
        let hash = 0;
        for (let element of elements) {
          let c = this[_elementEquality].hash(element);
          hash = (hash + dart.notNull(c) & 2147483647) >>> 0;
          hash = (hash + (hash << 10 >>> 0) & 2147483647) >>> 0;
          hash = (hash ^ hash[$rightShift](6)) >>> 0;
        }
        hash = (hash + (hash << 3 >>> 0) & 2147483647) >>> 0;
        hash = (hash ^ hash[$rightShift](11)) >>> 0;
        hash = (hash + (hash << 15 >>> 0) & 2147483647) >>> 0;
        return hash;
      }
      isValidKey(o) {
        return IterableLOfEL().is(o);
      }
    }
    (IterableEquality.new = function(elementEquality = C24 || CT.C24) {
      this[_elementEquality$] = elementEquality;
      ;
    }).prototype = IterableEquality.prototype;
    dart.addTypeTests(IterableEquality);
    IterableEquality.prototype[_is_IterableEquality_default] = true;
    dart.addTypeCaches(IterableEquality);
    IterableEquality[dart.implements] = () => [equality.Equality$(dart.legacy(core.Iterable$(dart.legacy(E))))];
    dart.setMethodSignature(IterableEquality, () => ({
      __proto__: dart.getMethods(IterableEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(IterableEquality, L36);
    dart.setFieldSignature(IterableEquality, () => ({
      __proto__: dart.getFields(IterableEquality.__proto__),
      [_elementEquality]: dart.finalFieldType(dart.legacy(equality.Equality$(dart.legacy(E))))
    }));
    return IterableEquality;
  });
  equality.IterableEquality = equality.IterableEquality$();
  dart.addTypeTests(equality.IterableEquality, _is_IterableEquality_default);
  const _is_ListEquality_default = Symbol('_is_ListEquality_default');
  var _elementEquality$0 = dart.privateName(equality, "ListEquality._elementEquality");
  equality.ListEquality$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var ListOfEL = () => (ListOfEL = dart.constFn(core.List$(EL())))();
    var ListLOfEL = () => (ListLOfEL = dart.constFn(dart.legacy(ListOfEL())))();
    class ListEquality extends core.Object {
      get [_elementEquality]() {
        return this[_elementEquality$0];
      }
      set [_elementEquality](value) {
        super[_elementEquality] = value;
      }
      equals(list1, list2) {
        ListLOfEL().as(list1);
        ListLOfEL().as(list2);
        if (list1 == list2) return true;
        if (list1 == null || list2 == null) return false;
        let length = list1[$length];
        if (length != list2[$length]) return false;
        for (let i = 0; i < dart.notNull(length); i = i + 1) {
          if (!dart.test(this[_elementEquality].equals(list1[$_get](i), list2[$_get](i)))) return false;
        }
        return true;
      }
      hash(list) {
        ListLOfEL().as(list);
        if (list == null) return dart.hashCode(null);
        let hash = 0;
        for (let i = 0; i < dart.notNull(list[$length]); i = i + 1) {
          let c = this[_elementEquality].hash(list[$_get](i));
          hash = (hash + dart.notNull(c) & 2147483647) >>> 0;
          hash = (hash + (hash << 10 >>> 0) & 2147483647) >>> 0;
          hash = (hash ^ hash[$rightShift](6)) >>> 0;
        }
        hash = (hash + (hash << 3 >>> 0) & 2147483647) >>> 0;
        hash = (hash ^ hash[$rightShift](11)) >>> 0;
        hash = (hash + (hash << 15 >>> 0) & 2147483647) >>> 0;
        return hash;
      }
      isValidKey(o) {
        return ListLOfEL().is(o);
      }
    }
    (ListEquality.new = function(elementEquality = C24 || CT.C24) {
      this[_elementEquality$0] = elementEquality;
      ;
    }).prototype = ListEquality.prototype;
    dart.addTypeTests(ListEquality);
    ListEquality.prototype[_is_ListEquality_default] = true;
    dart.addTypeCaches(ListEquality);
    ListEquality[dart.implements] = () => [equality.Equality$(dart.legacy(core.List$(dart.legacy(E))))];
    dart.setMethodSignature(ListEquality, () => ({
      __proto__: dart.getMethods(ListEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(ListEquality, L36);
    dart.setFieldSignature(ListEquality, () => ({
      __proto__: dart.getFields(ListEquality.__proto__),
      [_elementEquality]: dart.finalFieldType(dart.legacy(equality.Equality$(dart.legacy(E))))
    }));
    return ListEquality;
  });
  equality.ListEquality = equality.ListEquality$();
  dart.addTypeTests(equality.ListEquality, _is_ListEquality_default);
  const _is__UnorderedEquality_default = Symbol('_is__UnorderedEquality_default');
  var _elementEquality$1 = dart.privateName(equality, "_UnorderedEquality._elementEquality");
  equality._UnorderedEquality$ = dart.generic((E, T) => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var HashMapOfEL$dynamic = () => (HashMapOfEL$dynamic = dart.constFn(collection.HashMap$(EL(), dart.dynamic)))();
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _UnorderedEquality extends core.Object {
      get [_elementEquality]() {
        return this[_elementEquality$1];
      }
      set [_elementEquality](value) {
        super[_elementEquality] = value;
      }
      equals(elements1, elements2) {
        let t5;
        TL().as(elements1);
        TL().as(elements2);
        if (elements1 == elements2) return true;
        if (elements1 == null || elements2 == null) return false;
        let counts = HashMapOfEL$dynamic().new({equals: dart.bind(this[_elementEquality], 'equals'), hashCode: dart.bind(this[_elementEquality], 'hash'), isValidKey: dart.bind(this[_elementEquality], 'isValidKey')});
        let length = 0;
        for (let e of elements1) {
          let count = (t5 = counts[$_get](e), t5 == null ? 0 : t5);
          counts[$_set](e, dart.dsend(count, '+', [1]));
          length = length + 1;
        }
        for (let e of elements2) {
          let count = counts[$_get](e);
          if (count == null || dart.equals(count, 0)) return false;
          counts[$_set](e, dart.dsend(count, '-', [1]));
          length = length - 1;
        }
        return length === 0;
      }
      hash(elements) {
        TL().as(elements);
        if (elements == null) return dart.hashCode(null);
        let hash = 0;
        for (let element of elements) {
          let c = this[_elementEquality].hash(element);
          hash = (hash + dart.notNull(c) & 2147483647) >>> 0;
        }
        hash = (hash + (hash << 3 >>> 0) & 2147483647) >>> 0;
        hash = (hash ^ hash[$rightShift](11)) >>> 0;
        hash = (hash + (hash << 15 >>> 0) & 2147483647) >>> 0;
        return hash;
      }
    }
    (_UnorderedEquality.new = function(_elementEquality) {
      this[_elementEquality$1] = _elementEquality;
      ;
    }).prototype = _UnorderedEquality.prototype;
    dart.addTypeTests(_UnorderedEquality);
    _UnorderedEquality.prototype[_is__UnorderedEquality_default] = true;
    dart.addTypeCaches(_UnorderedEquality);
    _UnorderedEquality[dart.implements] = () => [equality.Equality$(dart.legacy(T))];
    dart.setMethodSignature(_UnorderedEquality, () => ({
      __proto__: dart.getMethods(_UnorderedEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(_UnorderedEquality, L36);
    dart.setFieldSignature(_UnorderedEquality, () => ({
      __proto__: dart.getFields(_UnorderedEquality.__proto__),
      [_elementEquality]: dart.finalFieldType(dart.legacy(equality.Equality$(dart.legacy(E))))
    }));
    return _UnorderedEquality;
  });
  equality._UnorderedEquality = equality._UnorderedEquality$();
  dart.addTypeTests(equality._UnorderedEquality, _is__UnorderedEquality_default);
  const _is_UnorderedIterableEquality_default = Symbol('_is_UnorderedIterableEquality_default');
  equality.UnorderedIterableEquality$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    class UnorderedIterableEquality extends equality._UnorderedEquality$(dart.legacy(E), dart.legacy(core.Iterable$(dart.legacy(E)))) {
      isValidKey(o) {
        return IterableLOfEL().is(o);
      }
    }
    (UnorderedIterableEquality.new = function(elementEquality = C24 || CT.C24) {
      UnorderedIterableEquality.__proto__.new.call(this, elementEquality);
      ;
    }).prototype = UnorderedIterableEquality.prototype;
    dart.addTypeTests(UnorderedIterableEquality);
    UnorderedIterableEquality.prototype[_is_UnorderedIterableEquality_default] = true;
    dart.addTypeCaches(UnorderedIterableEquality);
    dart.setMethodSignature(UnorderedIterableEquality, () => ({
      __proto__: dart.getMethods(UnorderedIterableEquality.__proto__),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(UnorderedIterableEquality, L36);
    return UnorderedIterableEquality;
  });
  equality.UnorderedIterableEquality = equality.UnorderedIterableEquality$();
  dart.addTypeTests(equality.UnorderedIterableEquality, _is_UnorderedIterableEquality_default);
  const _is_SetEquality_default = Symbol('_is_SetEquality_default');
  equality.SetEquality$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    class SetEquality extends equality._UnorderedEquality$(dart.legacy(E), dart.legacy(core.Set$(dart.legacy(E)))) {
      isValidKey(o) {
        return SetLOfEL().is(o);
      }
    }
    (SetEquality.new = function(elementEquality = C24 || CT.C24) {
      SetEquality.__proto__.new.call(this, elementEquality);
      ;
    }).prototype = SetEquality.prototype;
    dart.addTypeTests(SetEquality);
    SetEquality.prototype[_is_SetEquality_default] = true;
    dart.addTypeCaches(SetEquality);
    dart.setMethodSignature(SetEquality, () => ({
      __proto__: dart.getMethods(SetEquality.__proto__),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(SetEquality, L36);
    return SetEquality;
  });
  equality.SetEquality = equality.SetEquality$();
  dart.addTypeTests(equality.SetEquality, _is_SetEquality_default);
  var _keyEquality = dart.privateName(equality, "_keyEquality");
  var _valueEquality = dart.privateName(equality, "_valueEquality");
  equality._MapEntry = class _MapEntry extends core.Object {
    get hashCode() {
      return (3 * dart.notNull(this.equality[_keyEquality].hash(this.key)) + 7 * dart.notNull(this.equality[_valueEquality].hash(this.value)) & 2147483647) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return _MapEntryL().is(other) && dart.test(this.equality[_keyEquality].equals(this.key, other.key)) && dart.test(this.equality[_valueEquality].equals(this.value, other.value));
    }
  };
  (equality._MapEntry.new = function(equality, key, value) {
    this.equality = equality;
    this.key = key;
    this.value = value;
    ;
  }).prototype = equality._MapEntry.prototype;
  dart.addTypeTests(equality._MapEntry);
  dart.addTypeCaches(equality._MapEntry);
  dart.setMethodSignature(equality._MapEntry, () => ({
    __proto__: dart.getMethods(equality._MapEntry.__proto__),
    _equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
    [$_equals]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setGetterSignature(equality._MapEntry, () => ({
    __proto__: dart.getGetters(equality._MapEntry.__proto__),
    hashCode: dart.legacy(core.int),
    [$hashCode]: dart.legacy(core.int)
  }));
  dart.setLibraryUri(equality._MapEntry, L36);
  dart.setFieldSignature(equality._MapEntry, () => ({
    __proto__: dart.getFields(equality._MapEntry.__proto__),
    equality: dart.finalFieldType(dart.legacy(equality.MapEquality)),
    key: dart.finalFieldType(dart.dynamic),
    value: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(equality._MapEntry, ['_equals']);
  dart.defineExtensionAccessors(equality._MapEntry, ['hashCode']);
  const _is_MapEquality_default = Symbol('_is_MapEquality_default');
  var _keyEquality$ = dart.privateName(equality, "MapEquality._keyEquality");
  var _valueEquality$ = dart.privateName(equality, "MapEquality._valueEquality");
  equality.MapEquality$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var MapOfKL$VL = () => (MapOfKL$VL = dart.constFn(core.Map$(KL(), VL())))();
    var MapLOfKL$VL = () => (MapLOfKL$VL = dart.constFn(dart.legacy(MapOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class MapEquality extends core.Object {
      get [_keyEquality]() {
        return this[_keyEquality$];
      }
      set [_keyEquality](value) {
        super[_keyEquality] = value;
      }
      get [_valueEquality]() {
        return this[_valueEquality$];
      }
      set [_valueEquality](value) {
        super[_valueEquality] = value;
      }
      equals(map1, map2) {
        let t5;
        MapLOfKL$VL().as(map1);
        MapLOfKL$VL().as(map2);
        if (map1 == map2) return true;
        if (map1 == null || map2 == null) return false;
        let length = map1[$length];
        if (length != map2[$length]) return false;
        let equalElementCounts = new (LinkedMapOf_MapEntryL$intL()).new();
        for (let key of map1[$keys]) {
          let entry = new equality._MapEntry.new(this, key, map1[$_get](key));
          let count = (t5 = equalElementCounts[$_get](entry), t5 == null ? 0 : t5);
          equalElementCounts[$_set](entry, dart.notNull(count) + 1);
        }
        for (let key of map2[$keys]) {
          let entry = new equality._MapEntry.new(this, key, map2[$_get](key));
          let count = equalElementCounts[$_get](entry);
          if (count == null || count === 0) return false;
          equalElementCounts[$_set](entry, dart.notNull(count) - 1);
        }
        return true;
      }
      hash(map) {
        MapLOfKL$VL().as(map);
        if (map == null) return dart.hashCode(null);
        let hash = 0;
        for (let key of map[$keys]) {
          let keyHash = this[_keyEquality].hash(key);
          let valueHash = this[_valueEquality].hash(map[$_get](key));
          hash = (hash + 3 * dart.notNull(keyHash) + 7 * dart.notNull(valueHash) & 2147483647) >>> 0;
        }
        hash = (hash + (hash << 3 >>> 0) & 2147483647) >>> 0;
        hash = (hash ^ hash[$rightShift](11)) >>> 0;
        hash = (hash + (hash << 15 >>> 0) & 2147483647) >>> 0;
        return hash;
      }
      isValidKey(o) {
        return MapLOfKL$VL().is(o);
      }
    }
    (MapEquality.new = function(opts) {
      let keys = opts && 'keys' in opts ? opts.keys : C24 || CT.C24;
      let values = opts && 'values' in opts ? opts.values : C24 || CT.C24;
      this[_keyEquality$] = keys;
      this[_valueEquality$] = values;
      ;
    }).prototype = MapEquality.prototype;
    dart.addTypeTests(MapEquality);
    MapEquality.prototype[_is_MapEquality_default] = true;
    dart.addTypeCaches(MapEquality);
    MapEquality[dart.implements] = () => [equality.Equality$(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))];
    dart.setMethodSignature(MapEquality, () => ({
      __proto__: dart.getMethods(MapEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(MapEquality, L36);
    dart.setFieldSignature(MapEquality, () => ({
      __proto__: dart.getFields(MapEquality.__proto__),
      [_keyEquality]: dart.finalFieldType(dart.legacy(equality.Equality$(dart.legacy(K)))),
      [_valueEquality]: dart.finalFieldType(dart.legacy(equality.Equality$(dart.legacy(V))))
    }));
    return MapEquality;
  });
  equality.MapEquality = equality.MapEquality$();
  dart.addTypeTests(equality.MapEquality, _is_MapEquality_default);
  var _equalities = dart.privateName(equality, "_equalities");
  const _is_MultiEquality_default = Symbol('_is_MultiEquality_default');
  var _equalities$ = dart.privateName(equality, "MultiEquality._equalities");
  equality.MultiEquality$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    class MultiEquality extends core.Object {
      get [_equalities]() {
        return this[_equalities$];
      }
      set [_equalities](value) {
        super[_equalities] = value;
      }
      equals(e1, e2) {
        EL().as(e1);
        EL().as(e2);
        for (let eq of this[_equalities]) {
          if (dart.test(eq.isValidKey(e1))) return dart.test(eq.isValidKey(e2)) && dart.test(eq.equals(e1, e2));
        }
        return false;
      }
      hash(e) {
        EL().as(e);
        for (let eq of this[_equalities]) {
          if (dart.test(eq.isValidKey(e))) return eq.hash(e);
        }
        return 0;
      }
      isValidKey(o) {
        for (let eq of this[_equalities]) {
          if (dart.test(eq.isValidKey(o))) return true;
        }
        return false;
      }
    }
    (MultiEquality.new = function(equalities) {
      this[_equalities$] = equalities;
      ;
    }).prototype = MultiEquality.prototype;
    dart.addTypeTests(MultiEquality);
    MultiEquality.prototype[_is_MultiEquality_default] = true;
    dart.addTypeCaches(MultiEquality);
    MultiEquality[dart.implements] = () => [equality.Equality$(dart.legacy(E))];
    dart.setMethodSignature(MultiEquality, () => ({
      __proto__: dart.getMethods(MultiEquality.__proto__),
      equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
      isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setLibraryUri(MultiEquality, L36);
    dart.setFieldSignature(MultiEquality, () => ({
      __proto__: dart.getFields(MultiEquality.__proto__),
      [_equalities]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(equality.Equality$(dart.legacy(E))))))
    }));
    return MultiEquality;
  });
  equality.MultiEquality = equality.MultiEquality$();
  dart.addTypeTests(equality.MultiEquality, _is_MultiEquality_default);
  var C25;
  var _base$ = dart.privateName(equality, "_base");
  var _unordered = dart.privateName(equality, "_unordered");
  var _base$0 = dart.privateName(equality, "DeepCollectionEquality._base");
  var _unordered$ = dart.privateName(equality, "DeepCollectionEquality._unordered");
  equality.DeepCollectionEquality = class DeepCollectionEquality extends core.Object {
    get [_base$]() {
      return this[_base$0];
    }
    set [_base$](value) {
      super[_base$] = value;
    }
    get [_unordered]() {
      return this[_unordered$];
    }
    set [_unordered](value) {
      super[_unordered] = value;
    }
    equals(e1, e2) {
      if (SetL().is(e1)) {
        return SetL().is(e2) && dart.test(new equality.SetEquality.new(this).equals(e1, e2));
      }
      if (MapL().is(e1)) {
        return MapL().is(e2) && dart.test(new equality.MapEquality.new({keys: this, values: this}).equals(e1, e2));
      }
      if (!dart.test(this[_unordered])) {
        if (ListL().is(e1)) {
          return ListL().is(e2) && dart.test(new equality.ListEquality.new(this).equals(e1, e2));
        }
        if (IterableL().is(e1)) {
          return IterableL().is(e2) && dart.test(new equality.IterableEquality.new(this).equals(e1, e2));
        }
      } else if (IterableL().is(e1)) {
        if (!ListL().is(e1)[$_equals](ListL().is(e2))) return false;
        return IterableL().is(e2) && dart.test(new equality.UnorderedIterableEquality.new(this).equals(e1, e2));
      }
      return this[_base$].equals(e1, e2);
    }
    hash(o) {
      if (SetL().is(o)) return new equality.SetEquality.new(this).hash(o);
      if (MapL().is(o)) return new equality.MapEquality.new({keys: this, values: this}).hash(o);
      if (!dart.test(this[_unordered])) {
        if (ListL().is(o)) return new equality.ListEquality.new(this).hash(o);
        if (IterableL().is(o)) return new equality.IterableEquality.new(this).hash(o);
      } else if (IterableL().is(o)) {
        return new equality.UnorderedIterableEquality.new(this).hash(o);
      }
      return this[_base$].hash(o);
    }
    isValidKey(o) {
      return IterableL().is(o) || MapL().is(o) || dart.test(this[_base$].isValidKey(o));
    }
  };
  (equality.DeepCollectionEquality.new = function(base = C25 || CT.C25) {
    this[_base$0] = base;
    this[_unordered$] = false;
    ;
  }).prototype = equality.DeepCollectionEquality.prototype;
  (equality.DeepCollectionEquality.unordered = function(base = C25 || CT.C25) {
    this[_base$0] = base;
    this[_unordered$] = true;
    ;
  }).prototype = equality.DeepCollectionEquality.prototype;
  dart.addTypeTests(equality.DeepCollectionEquality);
  dart.addTypeCaches(equality.DeepCollectionEquality);
  equality.DeepCollectionEquality[dart.implements] = () => [equality.Equality];
  dart.setMethodSignature(equality.DeepCollectionEquality, () => ({
    __proto__: dart.getMethods(equality.DeepCollectionEquality.__proto__),
    equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
    hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(equality.DeepCollectionEquality, L36);
  dart.setFieldSignature(equality.DeepCollectionEquality, () => ({
    __proto__: dart.getFields(equality.DeepCollectionEquality.__proto__),
    [_base$]: dart.finalFieldType(dart.legacy(equality.Equality)),
    [_unordered]: dart.finalFieldType(dart.legacy(core.bool))
  }));
  equality.CaseInsensitiveEquality = class CaseInsensitiveEquality extends core.Object {
    equals(string1, string2) {
      StringL().as(string1);
      StringL().as(string2);
      return comparators.equalsIgnoreAsciiCase(string1, string2);
    }
    hash(string) {
      StringL().as(string);
      return comparators.hashIgnoreAsciiCase(string);
    }
    isValidKey(object) {
      return StringL().is(object);
    }
  };
  (equality.CaseInsensitiveEquality.new = function() {
    ;
  }).prototype = equality.CaseInsensitiveEquality.prototype;
  dart.addTypeTests(equality.CaseInsensitiveEquality);
  dart.addTypeCaches(equality.CaseInsensitiveEquality);
  equality.CaseInsensitiveEquality[dart.implements] = () => [equality.Equality$(dart.legacy(core.String))];
  dart.setMethodSignature(equality.CaseInsensitiveEquality, () => ({
    __proto__: dart.getMethods(equality.CaseInsensitiveEquality.__proto__),
    equals: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object), dart.legacy(core.Object)]),
    hash: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)]),
    isValidKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
  }));
  dart.setLibraryUri(equality.CaseInsensitiveEquality, L36);
  dart.defineLazy(equality, {
    /*equality._HASH_MASK*/get _HASH_MASK() {
      return 2147483647;
    }
  }, true);
  var _base$1 = dart.privateName(wrappers, "_base");
  const _is_DelegatingMap_default = Symbol('_is_DelegatingMap_default');
  var _base$2 = dart.privateName(wrappers, "DelegatingMap._base");
  wrappers.DelegatingMap$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var MapOfKL$VL = () => (MapOfKL$VL = dart.constFn(core.Map$(KL(), VL())))();
    var MapLOfKL$VL = () => (MapLOfKL$VL = dart.constFn(dart.legacy(MapOfKL$VL())))();
    var MapEntryOfKL$VL = () => (MapEntryOfKL$VL = dart.constFn(core.MapEntry$(KL(), VL())))();
    var MapEntryLOfKL$VL = () => (MapEntryLOfKL$VL = dart.constFn(dart.legacy(MapEntryOfKL$VL())))();
    var IterableOfMapEntryLOfKL$VL = () => (IterableOfMapEntryLOfKL$VL = dart.constFn(core.Iterable$(MapEntryLOfKL$VL())))();
    var IterableLOfMapEntryLOfKL$VL = () => (IterableLOfMapEntryLOfKL$VL = dart.constFn(dart.legacy(IterableOfMapEntryLOfKL$VL())))();
    var KLAndVLToVL = () => (KLAndVLToVL = dart.constFn(dart.fnType(VL(), [KL(), VL()])))();
    var KLAndVLToLVL = () => (KLAndVLToLVL = dart.constFn(dart.legacy(KLAndVLToVL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    var VoidToVL = () => (VoidToVL = dart.constFn(dart.fnType(VL(), [])))();
    var VoidToLVL = () => (VoidToLVL = dart.constFn(dart.legacy(VoidToVL())))();
    var VLToVL = () => (VLToVL = dart.constFn(dart.fnType(VL(), [VL()])))();
    var VLToLVL = () => (VLToLVL = dart.constFn(dart.legacy(VLToVL())))();
    class DelegatingMap extends core.Object {
      get [_base$1]() {
        return this[_base$2];
      }
      set [_base$1](value) {
        super[_base$1] = value;
      }
      static typed(K, V, base) {
        return base[$cast](dart.legacy(K), dart.legacy(V));
      }
      _get(key) {
        return this[_base$1][$_get](key);
      }
      _set(key, value$) {
        let value = value$;
        KL().as(key);
        VL().as(value);
        this[_base$1][$_set](key, value);
        return value$;
      }
      addAll(other) {
        MapLOfKL$VL().as(other);
        this[_base$1][$addAll](other);
      }
      addEntries(entries) {
        IterableLOfMapEntryLOfKL$VL().as(entries);
        this[_base$1][$addEntries](entries);
      }
      clear() {
        this[_base$1][$clear]();
      }
      cast(K2, V2) {
        return this[_base$1][$cast](dart.legacy(K2), dart.legacy(V2));
      }
      containsKey(key) {
        return this[_base$1][$containsKey](key);
      }
      containsValue(value) {
        return this[_base$1][$containsValue](value);
      }
      get entries() {
        return this[_base$1][$entries];
      }
      forEach(f) {
        this[_base$1][$forEach](f);
      }
      get isEmpty() {
        return this[_base$1][$isEmpty];
      }
      get isNotEmpty() {
        return this[_base$1][$isNotEmpty];
      }
      get keys() {
        return this[_base$1][$keys];
      }
      get length() {
        return this[_base$1][$length];
      }
      map(K2, V2, transform) {
        return this[_base$1][$map](dart.legacy(K2), dart.legacy(V2), transform);
      }
      putIfAbsent(key, ifAbsent) {
        KL().as(key);
        VoidToLVL().as(ifAbsent);
        return this[_base$1][$putIfAbsent](key, ifAbsent);
      }
      remove(key) {
        return this[_base$1][$remove](key);
      }
      removeWhere(test) {
        return this[_base$1][$removeWhere](test);
      }
      retype(K2, V2) {
        return this.cast(dart.legacy(K2), dart.legacy(V2));
      }
      get values() {
        return this[_base$1][$values];
      }
      toString() {
        return dart.toString(this[_base$1]);
      }
      update(key, update, opts) {
        KL().as(key);
        VLToLVL().as(update);
        let ifAbsent = opts && 'ifAbsent' in opts ? opts.ifAbsent : null;
        VoidToLVL().as(ifAbsent);
        return this[_base$1][$update](key, update, {ifAbsent: ifAbsent});
      }
      updateAll(update) {
        KLAndVLToLVL().as(update);
        return this[_base$1][$updateAll](update);
      }
    }
    (DelegatingMap.new = function(base) {
      this[_base$2] = base;
      ;
    }).prototype = DelegatingMap.prototype;
    DelegatingMap.prototype[dart.isMap] = true;
    dart.addTypeTests(DelegatingMap);
    DelegatingMap.prototype[_is_DelegatingMap_default] = true;
    dart.addTypeCaches(DelegatingMap);
    DelegatingMap[dart.implements] = () => [core.Map$(dart.legacy(K), dart.legacy(V))];
    dart.setMethodSignature(DelegatingMap, () => ({
      __proto__: dart.getMethods(DelegatingMap.__proto__),
      _get: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$_get]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addEntries: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addEntries]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      cast: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), []]),
      [$cast]: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), []]),
      containsKey: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$containsKey]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      containsValue: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$containsValue]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(K), dart.legacy(V)]))]),
      [$forEach]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(K), dart.legacy(V)]))]),
      map: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(dart.fnType(dart.legacy(core.MapEntry$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(K), dart.legacy(V)]))]]),
      [$map]: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(dart.fnType(dart.legacy(core.MapEntry$(dart.legacy(K2), dart.legacy(V2))), [dart.legacy(K), dart.legacy(V)]))]]),
      putIfAbsent: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$putIfAbsent]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(K), dart.legacy(V)]))]),
      [$removeWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(K), dart.legacy(V)]))]),
      retype: dart.gFnType((K2, V2) => [dart.legacy(core.Map$(dart.legacy(K2), dart.legacy(V2))), []]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      update: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)], {ifAbsent: dart.legacy(core.Object)}, {}),
      [$update]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)], {ifAbsent: dart.legacy(core.Object)}, {}),
      updateAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$updateAll]: dart.fnType(dart.void, [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(DelegatingMap, () => ({
      __proto__: dart.getGetters(DelegatingMap.__proto__),
      entries: dart.legacy(core.Iterable$(dart.legacy(core.MapEntry$(dart.legacy(K), dart.legacy(V))))),
      [$entries]: dart.legacy(core.Iterable$(dart.legacy(core.MapEntry$(dart.legacy(K), dart.legacy(V))))),
      isEmpty: dart.legacy(core.bool),
      [$isEmpty]: dart.legacy(core.bool),
      isNotEmpty: dart.legacy(core.bool),
      [$isNotEmpty]: dart.legacy(core.bool),
      keys: dart.legacy(core.Iterable$(dart.legacy(K))),
      [$keys]: dart.legacy(core.Iterable$(dart.legacy(K))),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int),
      values: dart.legacy(core.Iterable$(dart.legacy(V))),
      [$values]: dart.legacy(core.Iterable$(dart.legacy(V)))
    }));
    dart.setLibraryUri(DelegatingMap, L37);
    dart.setFieldSignature(DelegatingMap, () => ({
      __proto__: dart.getFields(DelegatingMap.__proto__),
      [_base$1]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V))))
    }));
    dart.defineExtensionMethods(DelegatingMap, [
      '_get',
      '_set',
      'addAll',
      'addEntries',
      'clear',
      'cast',
      'containsKey',
      'containsValue',
      'forEach',
      'map',
      'putIfAbsent',
      'remove',
      'removeWhere',
      'toString',
      'update',
      'updateAll'
    ]);
    dart.defineExtensionAccessors(DelegatingMap, [
      'entries',
      'isEmpty',
      'isNotEmpty',
      'keys',
      'length',
      'values'
    ]);
    return DelegatingMap;
  });
  wrappers.DelegatingMap = wrappers.DelegatingMap$();
  dart.addTypeTests(wrappers.DelegatingMap, _is_DelegatingMap_default);
  const _is_EqualityMap_default = Symbol('_is_EqualityMap_default');
  equality_map.EqualityMap$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var LinkedHashMapOfKL$VL = () => (LinkedHashMapOfKL$VL = dart.constFn(collection.LinkedHashMap$(KL(), VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    class EqualityMap extends wrappers.DelegatingMap$(dart.legacy(K), dart.legacy(V)) {}
    (EqualityMap.new = function(equality) {
      EqualityMap.__proto__.new.call(this, LinkedHashMapOfKL$VL().new({equals: dart.bind(equality, 'equals'), hashCode: dart.bind(equality, 'hash'), isValidKey: dart.bind(equality, 'isValidKey')}));
      ;
    }).prototype = EqualityMap.prototype;
    (EqualityMap.from = function(equality, other) {
      EqualityMap.__proto__.new.call(this, LinkedHashMapOfKL$VL().new({equals: dart.bind(equality, 'equals'), hashCode: dart.bind(equality, 'hash'), isValidKey: dart.bind(equality, 'isValidKey')}));
      this.addAll(other);
    }).prototype = EqualityMap.prototype;
    dart.addTypeTests(EqualityMap);
    EqualityMap.prototype[_is_EqualityMap_default] = true;
    dart.addTypeCaches(EqualityMap);
    dart.setLibraryUri(EqualityMap, L38);
    return EqualityMap;
  });
  equality_map.EqualityMap = equality_map.EqualityMap$();
  dart.addTypeTests(equality_map.EqualityMap, _is_EqualityMap_default);
  var _setBase = dart.privateName(wrappers, "_setBase");
  const _is__DelegatingIterableBase_default = Symbol('_is__DelegatingIterableBase_default');
  wrappers._DelegatingIterableBase$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var VoidToEL = () => (VoidToEL = dart.constFn(dart.fnType(EL(), [])))();
    var VoidToLEL = () => (VoidToLEL = dart.constFn(dart.legacy(VoidToEL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    var ELAndELToEL = () => (ELAndELToEL = dart.constFn(dart.fnType(EL(), [EL(), EL()])))();
    var ELAndELToLEL = () => (ELAndELToLEL = dart.constFn(dart.legacy(ELAndELToEL())))();
    class _DelegatingIterableBase extends core.Object {
      any(test) {
        return this[_base$1][$any](test);
      }
      cast(T) {
        return this[_base$1][$cast](dart.legacy(T));
      }
      contains(element) {
        return this[_base$1][$contains](element);
      }
      elementAt(index) {
        return this[_base$1][$elementAt](index);
      }
      every(test) {
        return this[_base$1][$every](test);
      }
      expand(T, f) {
        return this[_base$1][$expand](dart.legacy(T), f);
      }
      get first() {
        return this[_base$1][$first];
      }
      firstWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLEL().as(orElse);
        return this[_base$1][$firstWhere](test, {orElse: orElse});
      }
      fold(T, initialValue, combine) {
        return this[_base$1][$fold](dart.legacy(T), initialValue, combine);
      }
      followedBy(other) {
        IterableLOfEL().as(other);
        return this[_base$1][$followedBy](other);
      }
      forEach(f) {
        return this[_base$1][$forEach](f);
      }
      get isEmpty() {
        return this[_base$1][$isEmpty];
      }
      get isNotEmpty() {
        return this[_base$1][$isNotEmpty];
      }
      get iterator() {
        return this[_base$1][$iterator];
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
      join(separator = "") {
        return this[_base$1][$join](separator);
      }
      get last() {
        return this[_base$1][$last];
      }
      lastWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLEL().as(orElse);
        return this[_base$1][$lastWhere](test, {orElse: orElse});
      }
      get length() {
        return this[_base$1][$length];
      }
      map(T, f) {
        return this[_base$1][$map](dart.legacy(T), f);
      }
      reduce(combine) {
        ELAndELToLEL().as(combine);
        return this[_base$1][$reduce](combine);
      }
      retype(T) {
        return this.cast(dart.legacy(T));
      }
      get single() {
        return this[_base$1][$single];
      }
      singleWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLEL().as(orElse);
        return this[_base$1][$singleWhere](test, {orElse: orElse});
      }
      skip(n) {
        return this[_base$1][$skip](n);
      }
      skipWhile(test) {
        return this[_base$1][$skipWhile](test);
      }
      take(n) {
        return this[_base$1][$take](n);
      }
      takeWhile(test) {
        return this[_base$1][$takeWhile](test);
      }
      toList(opts) {
        let growable = opts && 'growable' in opts ? opts.growable : true;
        return this[_base$1][$toList]({growable: growable});
      }
      toSet() {
        return this[_base$1][$toSet]();
      }
      where(test) {
        return this[_base$1][$where](test);
      }
      whereType(T) {
        return this[_base$1][$whereType](dart.legacy(T));
      }
      toString() {
        return dart.toString(this[_base$1]);
      }
    }
    (_DelegatingIterableBase.new = function() {
      ;
    }).prototype = _DelegatingIterableBase.prototype;
    _DelegatingIterableBase.prototype[dart.isIterable] = true;
    dart.addTypeTests(_DelegatingIterableBase);
    _DelegatingIterableBase.prototype[_is__DelegatingIterableBase_default] = true;
    dart.addTypeCaches(_DelegatingIterableBase);
    _DelegatingIterableBase[dart.implements] = () => [core.Iterable$(dart.legacy(E))];
    dart.setMethodSignature(_DelegatingIterableBase, () => ({
      __proto__: dart.getMethods(_DelegatingIterableBase.__proto__),
      any: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$any]: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      cast: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      elementAt: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$elementAt]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      every: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$every]: dart.fnType(dart.legacy(core.bool), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      expand: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.Iterable$(dart.legacy(T))), [dart.legacy(E)]))]]),
      [$expand]: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(core.Iterable$(dart.legacy(T))), [dart.legacy(E)]))]]),
      firstWhere: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      [$firstWhere]: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      fold: dart.gFnType(T => [dart.legacy(T), [dart.legacy(T), dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(T), dart.legacy(E)]))]]),
      [$fold]: dart.gFnType(T => [dart.legacy(T), [dart.legacy(T), dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(T), dart.legacy(E)]))]]),
      followedBy: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.Object)]),
      [$followedBy]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.Object)]),
      forEach: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(E)]))]),
      [$forEach]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.void, [dart.legacy(E)]))]),
      join: dart.fnType(dart.legacy(core.String), [], [dart.legacy(core.String)]),
      [$join]: dart.fnType(dart.legacy(core.String), [], [dart.legacy(core.String)]),
      lastWhere: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      [$lastWhere]: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      map: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(E)]))]]),
      [$map]: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), [dart.legacy(dart.fnType(dart.legacy(T), [dart.legacy(E)]))]]),
      reduce: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      [$reduce]: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      retype: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      singleWhere: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      [$singleWhere]: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      skip: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.int)]),
      [$skip]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.int)]),
      skipWhile: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$skipWhile]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      take: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.int)]),
      [$take]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.int)]),
      takeWhile: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$takeWhile]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      toList: dart.fnType(dart.legacy(core.List$(dart.legacy(E))), [], {growable: dart.legacy(core.bool)}, {}),
      [$toList]: dart.fnType(dart.legacy(core.List$(dart.legacy(E))), [], {growable: dart.legacy(core.bool)}, {}),
      toSet: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      [$toSet]: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      where: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$where]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      whereType: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      [$whereType]: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), [])
    }));
    dart.setGetterSignature(_DelegatingIterableBase, () => ({
      __proto__: dart.getGetters(_DelegatingIterableBase.__proto__),
      first: dart.legacy(E),
      [$first]: dart.legacy(E),
      isEmpty: dart.legacy(core.bool),
      [$isEmpty]: dart.legacy(core.bool),
      isNotEmpty: dart.legacy(core.bool),
      [$isNotEmpty]: dart.legacy(core.bool),
      iterator: dart.legacy(core.Iterator$(dart.legacy(E))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(E))),
      last: dart.legacy(E),
      [$last]: dart.legacy(E),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int),
      single: dart.legacy(E),
      [$single]: dart.legacy(E)
    }));
    dart.setLibraryUri(_DelegatingIterableBase, L37);
    dart.defineExtensionMethods(_DelegatingIterableBase, [
      'any',
      'cast',
      'contains',
      'elementAt',
      'every',
      'expand',
      'firstWhere',
      'fold',
      'followedBy',
      'forEach',
      'join',
      'lastWhere',
      'map',
      'reduce',
      'singleWhere',
      'skip',
      'skipWhile',
      'take',
      'takeWhile',
      'toList',
      'toSet',
      'where',
      'whereType',
      'toString'
    ]);
    dart.defineExtensionAccessors(_DelegatingIterableBase, [
      'first',
      'isEmpty',
      'isNotEmpty',
      'iterator',
      'last',
      'length',
      'single'
    ]);
    return _DelegatingIterableBase;
  });
  wrappers._DelegatingIterableBase = wrappers._DelegatingIterableBase$();
  dart.addTypeTests(wrappers._DelegatingIterableBase, _is__DelegatingIterableBase_default);
  const _is_DelegatingIterable_default = Symbol('_is_DelegatingIterable_default');
  var _base$3 = dart.privateName(wrappers, "DelegatingIterable._base");
  wrappers.DelegatingIterable$ = dart.generic(E => {
    class DelegatingIterable extends wrappers._DelegatingIterableBase$(dart.legacy(E)) {
      get [_base$1]() {
        return this[_base$3];
      }
      set [_base$1](value) {
        super[_base$1] = value;
      }
      static typed(E, base) {
        return base[$cast](dart.legacy(E));
      }
    }
    (DelegatingIterable.new = function(base) {
      this[_base$3] = base;
      DelegatingIterable.__proto__.new.call(this);
      ;
    }).prototype = DelegatingIterable.prototype;
    dart.addTypeTests(DelegatingIterable);
    DelegatingIterable.prototype[_is_DelegatingIterable_default] = true;
    dart.addTypeCaches(DelegatingIterable);
    dart.setLibraryUri(DelegatingIterable, L37);
    dart.setFieldSignature(DelegatingIterable, () => ({
      __proto__: dart.getFields(DelegatingIterable.__proto__),
      [_base$1]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(E))))
    }));
    return DelegatingIterable;
  });
  wrappers.DelegatingIterable = wrappers.DelegatingIterable$();
  dart.addTypeTests(wrappers.DelegatingIterable, _is_DelegatingIterable_default);
  const _is_DelegatingSet_default = Symbol('_is_DelegatingSet_default');
  wrappers.DelegatingSet$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    var DelegatingSetOfEL = () => (DelegatingSetOfEL = dart.constFn(wrappers.DelegatingSet$(EL())))();
    class DelegatingSet extends wrappers.DelegatingIterable$(dart.legacy(E)) {
      static typed(E, base) {
        return base.cast(dart.legacy(E));
      }
      get [_setBase]() {
        return SetLOfEL().as(this[_base$1]);
      }
      add(value) {
        EL().as(value);
        return this[_setBase].add(value);
      }
      addAll(elements) {
        IterableLOfEL().as(elements);
        this[_setBase].addAll(elements);
      }
      cast(T) {
        return this[_setBase].cast(dart.legacy(T));
      }
      clear() {
        this[_setBase].clear();
      }
      containsAll(other) {
        return this[_setBase].containsAll(other);
      }
      difference(other) {
        return this[_setBase].difference(other);
      }
      intersection(other) {
        return this[_setBase].intersection(other);
      }
      lookup(element) {
        return this[_setBase].lookup(element);
      }
      remove(value) {
        return this[_setBase].remove(value);
      }
      removeAll(elements) {
        this[_setBase].removeAll(elements);
      }
      removeWhere(test) {
        this[_setBase].removeWhere(test);
      }
      retainAll(elements) {
        this[_setBase].retainAll(elements);
      }
      retype(T) {
        return this.cast(dart.legacy(T));
      }
      retainWhere(test) {
        this[_setBase].retainWhere(test);
      }
      union(other) {
        SetLOfEL().as(other);
        return this[_setBase].union(other);
      }
      toSet() {
        return new (DelegatingSetOfEL()).new(this[_setBase].toSet());
      }
    }
    (DelegatingSet.new = function(base) {
      DelegatingSet.__proto__.new.call(this, base);
      ;
    }).prototype = DelegatingSet.prototype;
    dart.addTypeTests(DelegatingSet);
    DelegatingSet.prototype[_is_DelegatingSet_default] = true;
    dart.addTypeCaches(DelegatingSet);
    DelegatingSet[dart.implements] = () => [core.Set$(dart.legacy(E))];
    dart.setMethodSignature(DelegatingSet, () => ({
      __proto__: dart.getMethods(DelegatingSet.__proto__),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      cast: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      clear: dart.fnType(dart.void, []),
      containsAll: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      difference: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      intersection: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      lookup: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      retype: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      union: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(DelegatingSet, () => ({
      __proto__: dart.getGetters(DelegatingSet.__proto__),
      [_setBase]: dart.legacy(core.Set$(dart.legacy(E)))
    }));
    dart.setLibraryUri(DelegatingSet, L37);
    dart.defineExtensionMethods(DelegatingSet, ['cast', 'toSet']);
    return DelegatingSet;
  });
  wrappers.DelegatingSet = wrappers.DelegatingSet$();
  dart.addTypeTests(wrappers.DelegatingSet, _is_DelegatingSet_default);
  const _is_EqualitySet_default = Symbol('_is_EqualitySet_default');
  equality_set.EqualitySet$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var LinkedHashSetOfEL = () => (LinkedHashSetOfEL = dart.constFn(collection.LinkedHashSet$(EL())))();
    class EqualitySet extends wrappers.DelegatingSet$(dart.legacy(E)) {}
    (EqualitySet.new = function(equality) {
      EqualitySet.__proto__.new.call(this, LinkedHashSetOfEL().new({equals: dart.bind(equality, 'equals'), hashCode: dart.bind(equality, 'hash'), isValidKey: dart.bind(equality, 'isValidKey')}));
      ;
    }).prototype = EqualitySet.prototype;
    (EqualitySet.from = function(equality, other) {
      EqualitySet.__proto__.new.call(this, LinkedHashSetOfEL().new({equals: dart.bind(equality, 'equals'), hashCode: dart.bind(equality, 'hash'), isValidKey: dart.bind(equality, 'isValidKey')}));
      this.addAll(other);
    }).prototype = EqualitySet.prototype;
    dart.addTypeTests(EqualitySet);
    EqualitySet.prototype[_is_EqualitySet_default] = true;
    dart.addTypeCaches(EqualitySet);
    dart.setLibraryUri(EqualitySet, L39);
    return EqualitySet;
  });
  equality_set.EqualitySet = equality_set.EqualitySet$();
  dart.addTypeTests(equality_set.EqualitySet, _is_EqualitySet_default);
  functions.mapMap = function mapMap(K1, V1, K2, V2, map, opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    key == null ? key = dart.fn((mapKey, _) => dart.legacy(K2).as(mapKey), dart.fnType(dart.legacy(K2), [dart.legacy(K1), dart.legacy(V1)])) : null;
    value == null ? value = dart.fn((_, mapValue) => dart.legacy(V2).as(mapValue), dart.fnType(dart.legacy(V2), [dart.legacy(K1), dart.legacy(V1)])) : null;
    let result = new (_js_helper.LinkedMap$(dart.legacy(K2), dart.legacy(V2))).new();
    map[$forEach](dart.fn((mapKey, mapValue) => {
      result[$_set](key(mapKey, mapValue), value(mapKey, mapValue));
    }, dart.fnType(core.Null, [dart.legacy(K1), dart.legacy(V1)])));
    return result;
  };
  functions.mergeMaps = function mergeMaps(K, V, map1, map2, opts) {
    let t5;
    let value = opts && 'value' in opts ? opts.value : null;
    let result = collection.LinkedHashMap$(dart.legacy(K), dart.legacy(V)).from(map1);
    if (value == null) {
      t5 = result;
      return (() => {
        t5[$addAll](map2);
        return t5;
      })();
    }
    map2[$forEach](dart.fn((key, mapValue) => {
      result[$_set](key, dart.test(result[$containsKey](key)) ? value(result[$_get](key), mapValue) : mapValue);
    }, dart.fnType(core.Null, [dart.legacy(K), dart.legacy(V)])));
    return result;
  };
  functions.groupBy = function groupBy(S, T, values, key) {
    let t8, t7, t6, t5;
    let map = new (_js_helper.LinkedMap$(dart.legacy(T), dart.legacy(core.List$(dart.legacy(S))))).new();
    for (let element of values) {
      (t5 = map, t6 = key(element), t7 = t5[$_get](t6), t7 == null ? (t8 = _interceptors.JSArray$(dart.legacy(S)).of([]), t5[$_set](t6, t8), t8) : t7)[$add](element);
    }
    return map;
  };
  functions.minBy = function minBy(S, T, values, orderBy, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    compare == null ? compare = utils$0.defaultCompare(dart.legacy(T)) : null;
    let minValue = null;
    let minOrderBy = null;
    for (let element of values) {
      let elementOrderBy = orderBy(element);
      if (minOrderBy == null || dart.notNull(compare(elementOrderBy, minOrderBy)) < 0) {
        minValue = element;
        minOrderBy = elementOrderBy;
      }
    }
    return minValue;
  };
  functions.maxBy = function maxBy(S, T, values, orderBy, opts) {
    let compare = opts && 'compare' in opts ? opts.compare : null;
    compare == null ? compare = utils$0.defaultCompare(dart.legacy(T)) : null;
    let maxValue = null;
    let maxOrderBy = null;
    for (let element of values) {
      let elementOrderBy = orderBy(element);
      if (maxOrderBy == null || dart.notNull(compare(elementOrderBy, maxOrderBy)) > 0) {
        maxValue = element;
        maxOrderBy = elementOrderBy;
      }
    }
    return maxValue;
  };
  functions.transitiveClosure = function transitiveClosure(T, graph) {
    let result = new (_js_helper.LinkedMap$(dart.legacy(T), dart.legacy(core.Set$(dart.legacy(T))))).new();
    graph[$forEach](dart.fn((vertex, edges) => {
      result[$_set](vertex, collection.LinkedHashSet$(dart.legacy(T)).from(edges));
    }, dart.fnType(core.Null, [dart.legacy(T), dart.legacy(core.Iterable$(dart.legacy(T)))])));
    let keys = graph[$keys][$toList]();
    for (let vertex1 of keys) {
      for (let vertex2 of keys) {
        for (let vertex3 of keys) {
          if (dart.test(result[$_get](vertex2).contains(vertex1)) && dart.test(result[$_get](vertex1).contains(vertex3))) {
            result[$_get](vertex2).add(vertex3);
          }
        }
      }
    }
    return result;
  };
  functions.stronglyConnectedComponents = function stronglyConnectedComponents(T, graph) {
    let index = 0;
    let stack = _interceptors.JSArray$(dart.legacy(T)).of([]);
    let result = _interceptors.JSArray$(dart.legacy(core.Set$(dart.legacy(T)))).of([]);
    let indices = new (_js_helper.LinkedMap$(dart.legacy(T), intL())).new();
    let lowLinks = new (_js_helper.LinkedMap$(dart.legacy(T), intL())).new();
    let onStack = new (collection._HashSet$(dart.legacy(T))).new();
    function strongConnect(vertex) {
      indices[$_set](vertex, index);
      lowLinks[$_set](vertex, index);
      index = index + 1;
      stack[$add](vertex);
      onStack.add(vertex);
      for (let successor of graph[$_get](vertex)) {
        if (!dart.test(indices[$containsKey](successor))) {
          strongConnect(successor);
          lowLinks[$_set](vertex, math.min(intL(), lowLinks[$_get](vertex), lowLinks[$_get](successor)));
        } else if (dart.test(onStack.contains(successor))) {
          lowLinks[$_set](vertex, math.min(intL(), lowLinks[$_get](vertex), lowLinks[$_get](successor)));
        }
      }
      if (lowLinks[$_get](vertex) == indices[$_get](vertex)) {
        let component = collection.LinkedHashSet$(dart.legacy(T)).new();
        let neighbor = null;
        do {
          neighbor = stack[$removeLast]();
          onStack.remove(neighbor);
          component.add(neighbor);
        } while (!dart.equals(neighbor, vertex));
        result[$add](component);
      }
    }
    dart.fn(strongConnect, dart.fnType(dart.void, [dart.legacy(T)]));
    for (let vertex of graph[$keys]) {
      if (!dart.test(indices[$containsKey](vertex))) strongConnect(vertex);
    }
    return result[$reversed][$toList]();
  };
  var _iterables$0 = dart.privateName(iterable_zip, "_iterables");
  const _is_IterableZip_default = Symbol('_is_IterableZip_default');
  iterable_zip.IterableZip$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var IteratorOfTL = () => (IteratorOfTL = dart.constFn(core.Iterator$(TL())))();
    var IteratorLOfTL = () => (IteratorLOfTL = dart.constFn(dart.legacy(IteratorOfTL())))();
    var IterableOfTL = () => (IterableOfTL = dart.constFn(core.Iterable$(TL())))();
    var IterableLOfTL = () => (IterableLOfTL = dart.constFn(dart.legacy(IterableOfTL())))();
    var IterableLOfTLToIteratorLOfTL = () => (IterableLOfTLToIteratorLOfTL = dart.constFn(dart.fnType(IteratorLOfTL(), [IterableLOfTL()])))();
    var _IteratorZipOfTL = () => (_IteratorZipOfTL = dart.constFn(iterable_zip._IteratorZip$(TL())))();
    class IterableZip extends collection.IterableBase$(dart.legacy(core.List$(dart.legacy(T)))) {
      get iterator() {
        let iterators = this[_iterables$0][$map](IteratorLOfTL(), dart.fn(x => x[$iterator], IterableLOfTLToIteratorLOfTL()))[$toList]({growable: false});
        return new (_IteratorZipOfTL()).new(iterators);
      }
    }
    (IterableZip.new = function(iterables) {
      this[_iterables$0] = iterables;
      IterableZip.__proto__.new.call(this);
      ;
    }).prototype = IterableZip.prototype;
    dart.addTypeTests(IterableZip);
    IterableZip.prototype[_is_IterableZip_default] = true;
    dart.addTypeCaches(IterableZip);
    dart.setGetterSignature(IterableZip, () => ({
      __proto__: dart.getGetters(IterableZip.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(core.List$(dart.legacy(T))))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(core.List$(dart.legacy(T)))))
    }));
    dart.setLibraryUri(IterableZip, L40);
    dart.setFieldSignature(IterableZip, () => ({
      __proto__: dart.getFields(IterableZip.__proto__),
      [_iterables$0]: dart.finalFieldType(dart.legacy(core.Iterable$(dart.legacy(core.Iterable$(dart.legacy(T))))))
    }));
    dart.defineExtensionAccessors(IterableZip, ['iterator']);
    return IterableZip;
  });
  iterable_zip.IterableZip = iterable_zip.IterableZip$();
  dart.addTypeTests(iterable_zip.IterableZip, _is_IterableZip_default);
  var _current = dart.privateName(iterable_zip, "_current");
  var _iterators = dart.privateName(iterable_zip, "_iterators");
  const _is__IteratorZip_default = Symbol('_is__IteratorZip_default');
  iterable_zip._IteratorZip$ = dart.generic(T => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    var ListOfTL = () => (ListOfTL = dart.constFn(core.List$(TL())))();
    class _IteratorZip extends core.Object {
      moveNext() {
        if (dart.test(this[_iterators][$isEmpty])) return false;
        for (let i = 0; i < dart.notNull(this[_iterators][$length]); i = i + 1) {
          if (!dart.test(this[_iterators][$_get](i).moveNext())) {
            this[_current] = null;
            return false;
          }
        }
        this[_current] = ListOfTL().new(this[_iterators][$length]);
        for (let i = 0; i < dart.notNull(this[_iterators][$length]); i = i + 1) {
          this[_current][$_set](i, this[_iterators][$_get](i).current);
        }
        return true;
      }
      get current() {
        return this[_current];
      }
    }
    (_IteratorZip.new = function(iterators) {
      this[_current] = null;
      this[_iterators] = iterators;
      ;
    }).prototype = _IteratorZip.prototype;
    dart.addTypeTests(_IteratorZip);
    _IteratorZip.prototype[_is__IteratorZip_default] = true;
    dart.addTypeCaches(_IteratorZip);
    _IteratorZip[dart.implements] = () => [core.Iterator$(dart.legacy(core.List$(dart.legacy(T))))];
    dart.setMethodSignature(_IteratorZip, () => ({
      __proto__: dart.getMethods(_IteratorZip.__proto__),
      moveNext: dart.fnType(dart.legacy(core.bool), [])
    }));
    dart.setGetterSignature(_IteratorZip, () => ({
      __proto__: dart.getGetters(_IteratorZip.__proto__),
      current: dart.legacy(core.List$(dart.legacy(T)))
    }));
    dart.setLibraryUri(_IteratorZip, L40);
    dart.setFieldSignature(_IteratorZip, () => ({
      __proto__: dart.getFields(_IteratorZip.__proto__),
      [_iterators]: dart.finalFieldType(dart.legacy(core.List$(dart.legacy(core.Iterator$(dart.legacy(T)))))),
      [_current]: dart.fieldType(dart.legacy(core.List$(dart.legacy(T))))
    }));
    return _IteratorZip;
  });
  iterable_zip._IteratorZip = iterable_zip._IteratorZip$();
  dart.addTypeTests(iterable_zip._IteratorZip, _is__IteratorZip_default);
  const _is_PriorityQueue_default = Symbol('_is_PriorityQueue_default');
  priority_queue.PriorityQueue$ = dart.generic(E => {
    class PriorityQueue extends core.Object {}
    (PriorityQueue[dart.mixinNew] = function() {
    }).prototype = PriorityQueue.prototype;
    dart.addTypeTests(PriorityQueue);
    PriorityQueue.prototype[_is_PriorityQueue_default] = true;
    dart.addTypeCaches(PriorityQueue);
    dart.setLibraryUri(PriorityQueue, L41);
    return PriorityQueue;
  });
  priority_queue.PriorityQueue = priority_queue.PriorityQueue$();
  dart.addTypeTests(priority_queue.PriorityQueue, _is_PriorityQueue_default);
  var _queue = dart.privateName(priority_queue, "_queue");
  var _length = dart.privateName(priority_queue, "_length");
  var _add = dart.privateName(priority_queue, "_add");
  var C26;
  var _locate = dart.privateName(priority_queue, "_locate");
  var _removeLast = dart.privateName(priority_queue, "_removeLast");
  var _bubbleUp = dart.privateName(priority_queue, "_bubbleUp");
  var _bubbleDown = dart.privateName(priority_queue, "_bubbleDown");
  var _grow = dart.privateName(priority_queue, "_grow");
  const _is_HeapPriorityQueue_default = Symbol('_is_HeapPriorityQueue_default');
  var comparison$ = dart.privateName(priority_queue, "HeapPriorityQueue.comparison");
  priority_queue.HeapPriorityQueue$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var ListOfEL = () => (ListOfEL = dart.constFn(core.List$(EL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    var JSArrayOfEL = () => (JSArrayOfEL = dart.constFn(_interceptors.JSArray$(EL())))();
    var SplayTreeSetOfEL = () => (SplayTreeSetOfEL = dart.constFn(collection.SplayTreeSet$(EL())))();
    class HeapPriorityQueue extends core.Object {
      get comparison() {
        return this[comparison$];
      }
      set comparison(value) {
        super.comparison = value;
      }
      add(element) {
        EL().as(element);
        this[_add](element);
      }
      addAll(elements) {
        IterableLOfEL().as(elements);
        for (let element of elements) {
          this[_add](element);
        }
      }
      clear() {
        this[_queue] = C26 || CT.C26;
        this[_length] = 0;
      }
      contains(object) {
        EL().as(object);
        return dart.notNull(this[_locate](object)) >= 0;
      }
      get first() {
        if (this[_length] === 0) dart.throw(new core.StateError.new("No such element"));
        return this[_queue][$_get](0);
      }
      get isEmpty() {
        return this[_length] === 0;
      }
      get isNotEmpty() {
        return this[_length] !== 0;
      }
      get length() {
        return this[_length];
      }
      remove(element) {
        let t6, t5;
        EL().as(element);
        let index = this[_locate](element);
        if (dart.notNull(index) < 0) return false;
        let last = this[_removeLast]();
        if (dart.notNull(index) < dart.notNull(this[_length])) {
          let comp = (t5 = last, t6 = element, this.comparison(t5, t6));
          if (dart.notNull(comp) <= 0) {
            this[_bubbleUp](last, index);
          } else {
            this[_bubbleDown](last, index);
          }
        }
        return true;
      }
      removeAll() {
        let result = this[_queue];
        let length = this[_length];
        this[_queue] = C26 || CT.C26;
        this[_length] = 0;
        return result[$take](length);
      }
      removeFirst() {
        if (this[_length] === 0) dart.throw(new core.StateError.new("No such element"));
        let result = this[_queue][$_get](0);
        let last = this[_removeLast]();
        if (dart.notNull(this[_length]) > 0) {
          this[_bubbleDown](last, 0);
        }
        return result;
      }
      toList() {
        let t5;
        let list = (t5 = JSArrayOfEL().of([]), (() => {
          t5[$length] = this[_length];
          t5[$setRange](0, this[_length], this[_queue]);
          t5[$sort](this.comparison);
          return t5;
        })());
        return list;
      }
      toSet() {
        let set = new (SplayTreeSetOfEL()).new(this.comparison);
        for (let i = 0; i < dart.notNull(this[_length]); i = i + 1) {
          set.add(this[_queue][$_get](i));
        }
        return set;
      }
      toString() {
        return dart.toString(this[_queue][$take](this[_length]));
      }
      [_add](element) {
        let t5;
        if (this[_length] == this[_queue][$length]) this[_grow]();
        this[_bubbleUp](element, (t5 = this[_length], this[_length] = dart.notNull(t5) + 1, t5));
      }
      [_locate](object) {
        let t6, t5;
        if (this[_length] === 0) return -1;
        let position = 1;
        do {
          let index = position - 1;
          let element = this[_queue][$_get](index);
          let comp = (t5 = element, t6 = object, this.comparison(t5, t6));
          if (comp === 0) return index;
          if (dart.notNull(comp) < 0) {
            let leftChildPosition = position * 2;
            if (leftChildPosition <= dart.notNull(this[_length])) {
              position = leftChildPosition;
              continue;
            }
          }
          do {
            while (position[$isOdd]) {
              position = position[$rightShift](1);
            }
            position = position + 1;
          } while (position > dart.notNull(this[_length]));
        } while (position !== 1);
        return -1;
      }
      [_removeLast]() {
        let newLength = dart.notNull(this[_length]) - 1;
        let last = this[_queue][$_get](newLength);
        this[_queue][$_set](newLength, null);
        this[_length] = newLength;
        return last;
      }
      [_bubbleUp](element, index) {
        let t6, t5;
        while (dart.notNull(index) > 0) {
          let parentIndex = ((dart.notNull(index) - 1) / 2)[$truncate]();
          let parent = this[_queue][$_get](parentIndex);
          if (dart.notNull((t5 = element, t6 = parent, this.comparison(t5, t6))) > 0) break;
          this[_queue][$_set](index, parent);
          index = parentIndex;
        }
        this[_queue][$_set](index, element);
      }
      [_bubbleDown](element, index) {
        let t6, t5, t6$, t5$, t6$0, t5$0;
        let rightChildIndex = dart.notNull(index) * 2 + 2;
        while (rightChildIndex < dart.notNull(this[_length])) {
          let leftChildIndex = rightChildIndex - 1;
          let leftChild = this[_queue][$_get](leftChildIndex);
          let rightChild = this[_queue][$_get](rightChildIndex);
          let comp = (t5 = leftChild, t6 = rightChild, this.comparison(t5, t6));
          let minChildIndex = null;
          let minChild = null;
          if (dart.notNull(comp) < 0) {
            minChild = leftChild;
            minChildIndex = leftChildIndex;
          } else {
            minChild = rightChild;
            minChildIndex = rightChildIndex;
          }
          comp = (t5$ = element, t6$ = minChild, this.comparison(t5$, t6$));
          if (dart.notNull(comp) <= 0) {
            this[_queue][$_set](index, element);
            return;
          }
          this[_queue][$_set](index, minChild);
          index = intL().as(minChildIndex);
          rightChildIndex = dart.notNull(index) * 2 + 2;
        }
        let leftChildIndex = rightChildIndex - 1;
        if (leftChildIndex < dart.notNull(this[_length])) {
          let child = this[_queue][$_get](leftChildIndex);
          let comp = (t5$0 = element, t6$0 = child, this.comparison(t5$0, t6$0));
          if (dart.notNull(comp) > 0) {
            this[_queue][$_set](index, child);
            index = leftChildIndex;
          }
        }
        this[_queue][$_set](index, element);
      }
      [_grow]() {
        let newCapacity = dart.notNull(this[_queue][$length]) * 2 + 1;
        if (newCapacity < 7) newCapacity = 7;
        let newQueue = ListOfEL().new(newCapacity);
        newQueue[$setRange](0, this[_length], this[_queue]);
        this[_queue] = newQueue;
      }
    }
    (HeapPriorityQueue.new = function(comparison = null) {
      let t5;
      this[_queue] = ListOfEL().new(7);
      this[_length] = 0;
      this[comparison$] = (t5 = comparison, t5 == null ? utils$0.defaultCompare(EL()) : t5);
      ;
    }).prototype = HeapPriorityQueue.prototype;
    dart.addTypeTests(HeapPriorityQueue);
    HeapPriorityQueue.prototype[_is_HeapPriorityQueue_default] = true;
    dart.addTypeCaches(HeapPriorityQueue);
    HeapPriorityQueue[dart.implements] = () => [priority_queue.PriorityQueue$(dart.legacy(E))];
    dart.setMethodSignature(HeapPriorityQueue, () => ({
      __proto__: dart.getMethods(HeapPriorityQueue.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), []),
      removeFirst: dart.fnType(dart.legacy(E), []),
      toList: dart.fnType(dart.legacy(core.List$(dart.legacy(E))), []),
      toSet: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      [_add]: dart.fnType(dart.void, [dart.legacy(E)]),
      [_locate]: dart.fnType(dart.legacy(core.int), [dart.legacy(E)]),
      [_removeLast]: dart.fnType(dart.legacy(E), []),
      [_bubbleUp]: dart.fnType(dart.void, [dart.legacy(E), dart.legacy(core.int)]),
      [_bubbleDown]: dart.fnType(dart.void, [dart.legacy(E), dart.legacy(core.int)]),
      [_grow]: dart.fnType(dart.void, [])
    }));
    dart.setGetterSignature(HeapPriorityQueue, () => ({
      __proto__: dart.getGetters(HeapPriorityQueue.__proto__),
      first: dart.legacy(E),
      isEmpty: dart.legacy(core.bool),
      isNotEmpty: dart.legacy(core.bool),
      length: dart.legacy(core.int)
    }));
    dart.setLibraryUri(HeapPriorityQueue, L41);
    dart.setFieldSignature(HeapPriorityQueue, () => ({
      __proto__: dart.getFields(HeapPriorityQueue.__proto__),
      comparison: dart.finalFieldType(dart.legacy(dart.fnType(core.int, [dart.legacy(E), dart.legacy(E)]))),
      [_queue]: dart.fieldType(dart.legacy(core.List$(dart.legacy(E)))),
      [_length]: dart.fieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(HeapPriorityQueue, ['toString']);
    return HeapPriorityQueue;
  });
  priority_queue.HeapPriorityQueue = priority_queue.HeapPriorityQueue$();
  dart.defineLazy(priority_queue.HeapPriorityQueue, {
    /*priority_queue.HeapPriorityQueue._INITIAL_CAPACITY*/get _INITIAL_CAPACITY() {
      return 7;
    }
  }, true);
  dart.addTypeTests(priority_queue.HeapPriorityQueue, _is_HeapPriorityQueue_default);
  var _table = dart.privateName(queue_list, "_table");
  var _head = dart.privateName(queue_list, "_head");
  var _tail = dart.privateName(queue_list, "_tail");
  var _add$ = dart.privateName(queue_list, "_add");
  var _preGrow = dart.privateName(queue_list, "_preGrow");
  var _grow$ = dart.privateName(queue_list, "_grow");
  var _writeToList = dart.privateName(queue_list, "_writeToList");
  const _is_QueueList_default = Symbol('_is_QueueList_default');
  var _head$ = dart.privateName(queue_list, "QueueList._head");
  var _tail$ = dart.privateName(queue_list, "QueueList._tail");
  queue_list.QueueList$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var ListOfEL = () => (ListOfEL = dart.constFn(core.List$(EL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    const Object_ListMixin$36 = class Object_ListMixin extends core.Object {};
    (Object_ListMixin$36.new = function() {
    }).prototype = Object_ListMixin$36.prototype;
    dart.applyMixin(Object_ListMixin$36, collection.ListMixin$(dart.legacy(E)));
    class QueueList extends Object_ListMixin$36 {
      get [_head]() {
        return this[_head$];
      }
      set [_head](value) {
        this[_head$] = value;
      }
      get [_tail]() {
        return this[_tail$];
      }
      set [_tail](value) {
        this[_tail$] = value;
      }
      static _castFrom(S, T, source) {
        return new (queue_list._CastQueueList$(dart.legacy(S), dart.legacy(T))).new(source);
      }
      static from(source) {
        let t5;
        if (ListL().is(source)) {
          let length = source[$length];
          let queue = new (queue_list.QueueList$(dart.legacy(E))).new(dart.notNull(length) + 1);
          if (!(dart.notNull(queue[_table][$length]) > dart.notNull(length))) dart.assertFailed(null, L42, 57, 14, "queue._table.length > length");
          let sourceList = source;
          queue[_table][$setRange](0, length, sourceList, 0);
          queue[_tail] = length;
          return queue;
        } else {
          t5 = new (queue_list.QueueList$(dart.legacy(E))).new();
          return (() => {
            t5.addAll(source);
            return t5;
          })();
        }
      }
      add(element) {
        EL().as(element);
        this[_add$](element);
      }
      addAll(iterable) {
        IterableLOfEL().as(iterable);
        if (ListL().is(iterable)) {
          let list = iterable;
          let addCount = list[$length];
          let length = this.length;
          if (dart.notNull(length) + dart.notNull(addCount) >= dart.notNull(this[_table][$length])) {
            this[_preGrow](dart.notNull(length) + dart.notNull(addCount));
            this[_table][$setRange](length, dart.notNull(length) + dart.notNull(addCount), list, 0);
            this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
          } else {
            let endSpace = dart.notNull(this[_table][$length]) - dart.notNull(this[_tail]);
            if (dart.notNull(addCount) < endSpace) {
              this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + dart.notNull(addCount), list, 0);
              this[_tail] = dart.notNull(this[_tail]) + dart.notNull(addCount);
            } else {
              let preSpace = dart.notNull(addCount) - endSpace;
              this[_table][$setRange](this[_tail], dart.notNull(this[_tail]) + endSpace, list, 0);
              this[_table][$setRange](0, preSpace, list, endSpace);
              this[_tail] = preSpace;
            }
          }
        } else {
          for (let element of iterable) {
            this[_add$](element);
          }
        }
      }
      cast(T) {
        return queue_list.QueueList._castFrom(EL(), dart.legacy(T), this);
      }
      retype(T) {
        return this.cast(dart.legacy(T));
      }
      toString() {
        return collection.IterableBase.iterableToFullString(this, "{", "}");
      }
      addLast(element) {
        EL().as(element);
        this[_add$](element);
      }
      addFirst(element) {
        EL().as(element);
        this[_head] = (dart.notNull(this[_head]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        this[_table][$_set](this[_head], element);
        if (this[_head] == this[_tail]) this[_grow$]();
      }
      removeFirst() {
        if (this[_head] == this[_tail]) dart.throw(new core.StateError.new("No element"));
        let result = this[_table][$_get](this[_head]);
        this[_table][$_set](this[_head], null);
        this[_head] = (dart.notNull(this[_head]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        return result;
      }
      removeLast() {
        if (this[_head] == this[_tail]) dart.throw(new core.StateError.new("No element"));
        this[_tail] = (dart.notNull(this[_tail]) - 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        let result = this[_table][$_get](this[_tail]);
        this[_table][$_set](this[_tail], null);
        return result;
      }
      get length() {
        return (dart.notNull(this[_tail]) - dart.notNull(this[_head]) & dart.notNull(this[_table][$length]) - 1) >>> 0;
      }
      set length(value) {
        if (dart.notNull(value) < 0) dart.throw(new core.RangeError.new("Length " + dart.str(value) + " may not be negative."));
        let delta = dart.notNull(value) - dart.notNull(this.length);
        if (delta >= 0) {
          if (dart.notNull(this[_table][$length]) <= dart.notNull(value)) {
            this[_preGrow](value);
          }
          this[_tail] = (dart.notNull(this[_tail]) + delta & dart.notNull(this[_table][$length]) - 1) >>> 0;
          return;
        }
        let newTail = dart.notNull(this[_tail]) + delta;
        if (newTail >= 0) {
          this[_table][$fillRange](newTail, this[_tail], null);
        } else {
          newTail = newTail + dart.notNull(this[_table][$length]);
          this[_table][$fillRange](0, this[_tail], null);
          this[_table][$fillRange](newTail, this[_table][$length], null);
        }
        this[_tail] = newTail;
      }
      _get(index) {
        if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(this.length)) {
          dart.throw(new core.RangeError.new("Index " + dart.str(index) + " must be in the range [0.." + dart.str(this.length) + ")."));
        }
        return this[_table][$_get]((dart.notNull(this[_head]) + dart.notNull(index) & dart.notNull(this[_table][$length]) - 1) >>> 0);
      }
      _set(index, value$) {
        let value = value$;
        EL().as(value);
        if (dart.notNull(index) < 0 || dart.notNull(index) >= dart.notNull(this.length)) {
          dart.throw(new core.RangeError.new("Index " + dart.str(index) + " must be in the range [0.." + dart.str(this.length) + ")."));
        }
        this[_table][$_set]((dart.notNull(this[_head]) + dart.notNull(index) & dart.notNull(this[_table][$length]) - 1) >>> 0, value);
        return value$;
      }
      static _isPowerOf2(number) {
        return (dart.notNull(number) & dart.notNull(number) - 1) === 0;
      }
      static _nextPowerOf2(number) {
        if (!(dart.notNull(number) > 0)) dart.assertFailed(null, L42, 205, 12, "number > 0");
        number = (dart.notNull(number) << 1 >>> 0) - 1;
        for (;;) {
          let nextNumber = (dart.notNull(number) & dart.notNull(number) - 1) >>> 0;
          if (nextNumber === 0) return number;
          number = nextNumber;
        }
      }
      [_add$](element) {
        this[_table][$_set](this[_tail], element);
        this[_tail] = (dart.notNull(this[_tail]) + 1 & dart.notNull(this[_table][$length]) - 1) >>> 0;
        if (this[_head] == this[_tail]) this[_grow$]();
      }
      [_grow$]() {
        let newTable = ListOfEL().new(dart.notNull(this[_table][$length]) * 2);
        let split = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
        newTable[$setRange](0, split, this[_table], this[_head]);
        newTable[$setRange](split, split + dart.notNull(this[_head]), this[_table], 0);
        this[_head] = 0;
        this[_tail] = this[_table][$length];
        this[_table] = newTable;
      }
      [_writeToList](target) {
        if (!(dart.notNull(target[$length]) >= dart.notNull(this.length))) dart.assertFailed(null, L42, 233, 12, "target.length >= length");
        if (dart.notNull(this[_head]) <= dart.notNull(this[_tail])) {
          let length = dart.notNull(this[_tail]) - dart.notNull(this[_head]);
          target[$setRange](0, length, this[_table], this[_head]);
          return length;
        } else {
          let firstPartSize = dart.notNull(this[_table][$length]) - dart.notNull(this[_head]);
          target[$setRange](0, firstPartSize, this[_table], this[_head]);
          target[$setRange](firstPartSize, firstPartSize + dart.notNull(this[_tail]), this[_table], 0);
          return dart.notNull(this[_tail]) + firstPartSize;
        }
      }
      [_preGrow](newElementCount) {
        if (!(dart.notNull(newElementCount) >= dart.notNull(this.length))) dart.assertFailed(null, L42, 248, 12, "newElementCount >= length");
        newElementCount = dart.notNull(newElementCount) + newElementCount[$rightShift](1);
        let newCapacity = queue_list.QueueList._nextPowerOf2(newElementCount);
        let newTable = ListOfEL().new(newCapacity);
        this[_tail] = this[_writeToList](newTable);
        this[_table] = newTable;
        this[_head] = 0;
      }
    }
    (QueueList.new = function(initialCapacity = null) {
      this[_table] = null;
      this[_head$] = 0;
      this[_tail$] = 0;
      if (initialCapacity == null || dart.notNull(initialCapacity) < 8) {
        initialCapacity = 8;
      } else if (!dart.test(queue_list.QueueList._isPowerOf2(initialCapacity))) {
        initialCapacity = queue_list.QueueList._nextPowerOf2(initialCapacity);
      }
      if (!dart.test(queue_list.QueueList._isPowerOf2(initialCapacity))) dart.assertFailed(null, L42, 45, 12, "_isPowerOf2(initialCapacity)");
      this[_table] = ListOfEL().new(initialCapacity);
    }).prototype = QueueList.prototype;
    (QueueList.__ = function() {
      this[_table] = null;
      this[_tail$] = null;
      this[_head$] = null;
      ;
    }).prototype = QueueList.prototype;
    dart.addTypeTests(QueueList);
    QueueList.prototype[_is_QueueList_default] = true;
    dart.addTypeCaches(QueueList);
    QueueList[dart.implements] = () => [collection.Queue$(dart.legacy(E))];
    dart.setMethodSignature(QueueList, () => ({
      __proto__: dart.getMethods(QueueList.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      cast: dart.gFnType(T => [dart.legacy(queue_list.QueueList$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(queue_list.QueueList$(dart.legacy(T))), []]),
      retype: dart.gFnType(T => [dart.legacy(queue_list.QueueList$(dart.legacy(T))), []]),
      toString: dart.fnType(dart.legacy(core.String), []),
      [$toString]: dart.fnType(dart.legacy(core.String), []),
      addLast: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      removeFirst: dart.fnType(dart.legacy(E), []),
      _get: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$_get]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [_add$]: dart.fnType(dart.void, [dart.legacy(E)]),
      [_grow$]: dart.fnType(dart.void, []),
      [_writeToList]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.List$(dart.legacy(E)))]),
      [_preGrow]: dart.fnType(dart.void, [dart.legacy(core.int)])
    }));
    dart.setGetterSignature(QueueList, () => ({
      __proto__: dart.getGetters(QueueList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setSetterSignature(QueueList, () => ({
      __proto__: dart.getSetters(QueueList.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(QueueList, L43);
    dart.setFieldSignature(QueueList, () => ({
      __proto__: dart.getFields(QueueList.__proto__),
      [_table]: dart.fieldType(dart.legacy(core.List$(dart.legacy(E)))),
      [_head]: dart.fieldType(dart.legacy(core.int)),
      [_tail]: dart.fieldType(dart.legacy(core.int))
    }));
    dart.defineExtensionMethods(QueueList, [
      'add',
      'addAll',
      'cast',
      'toString',
      'removeLast',
      '_get',
      '_set'
    ]);
    dart.defineExtensionAccessors(QueueList, ['length']);
    return QueueList;
  });
  queue_list.QueueList = queue_list.QueueList$();
  dart.defineLazy(queue_list.QueueList, {
    /*queue_list.QueueList._INITIAL_CAPACITY*/get _INITIAL_CAPACITY() {
      return 8;
    }
  }, true);
  dart.addTypeTests(queue_list.QueueList, _is_QueueList_default);
  var _delegate$ = dart.privateName(queue_list, "_delegate");
  const _is__CastQueueList_default = Symbol('_is__CastQueueList_default');
  queue_list._CastQueueList$ = dart.generic((S, T) => {
    var TL = () => (TL = dart.constFn(dart.legacy(T)))();
    class _CastQueueList extends queue_list.QueueList$(dart.legacy(T)) {
      get [_head]() {
        return this[_delegate$][_head];
      }
      set [_head](value) {
        return this[_delegate$][_head] = value;
      }
      get [_tail]() {
        return this[_delegate$][_tail];
      }
      set [_tail](value) {
        return this[_delegate$][_tail] = value;
      }
    }
    (_CastQueueList.new = function(_delegate) {
      this[_delegate$] = _delegate;
      _CastQueueList.__proto__.__.call(this);
      this[_table] = this[_delegate$][_table][$cast](TL());
    }).prototype = _CastQueueList.prototype;
    dart.addTypeTests(_CastQueueList);
    _CastQueueList.prototype[_is__CastQueueList_default] = true;
    dart.addTypeCaches(_CastQueueList);
    dart.setGetterSignature(_CastQueueList, () => ({
      __proto__: dart.getGetters(_CastQueueList.__proto__),
      [_head]: dart.legacy(core.int),
      [_tail]: dart.legacy(core.int)
    }));
    dart.setSetterSignature(_CastQueueList, () => ({
      __proto__: dart.getSetters(_CastQueueList.__proto__),
      [_head]: dart.legacy(core.int),
      [_tail]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(_CastQueueList, L43);
    dart.setFieldSignature(_CastQueueList, () => ({
      __proto__: dart.getFields(_CastQueueList.__proto__),
      [_delegate$]: dart.finalFieldType(dart.legacy(queue_list.QueueList$(dart.legacy(S))))
    }));
    return _CastQueueList;
  });
  queue_list._CastQueueList = queue_list._CastQueueList$();
  dart.addTypeTests(queue_list._CastQueueList, _is__CastQueueList_default);
  var _sets$ = dart.privateName(union_set, "_sets");
  var _disjoint = dart.privateName(union_set, "_disjoint");
  var _iterable$0 = dart.privateName(union_set, "_iterable");
  const _is_UnmodifiableSetMixin_default = Symbol('_is_UnmodifiableSetMixin_default');
  unmodifiable_wrappers.UnmodifiableSetMixin$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    class UnmodifiableSetMixin extends core.Object {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable Set"));
      }
      add(value) {
        EL().as(value);
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(boolL());
      }
      addAll(elements) {
        IterableLOfEL().as(elements);
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      remove(value) {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(boolL());
      }
      removeAll(elements) {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      retainAll(elements) {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      removeWhere(test) {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      retainWhere(test) {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      clear() {
        return unmodifiable_wrappers.UnmodifiableSetMixin._throw(dart.void);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (UnmodifiableSetMixin.new = function() {
      ;
    }).prototype = UnmodifiableSetMixin.prototype;
    dart.addTypeTests(UnmodifiableSetMixin);
    UnmodifiableSetMixin.prototype[_is_UnmodifiableSetMixin_default] = true;
    dart.addTypeCaches(UnmodifiableSetMixin);
    UnmodifiableSetMixin[dart.implements] = () => [core.Set$(dart.legacy(E))];
    dart.setMethodSignature(UnmodifiableSetMixin, () => ({
      __proto__: dart.getMethods(UnmodifiableSetMixin.__proto__),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.void, [dart.legacy(core.Iterable)]),
      retainAll: dart.fnType(dart.void, [dart.legacy(core.Iterable)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      clear: dart.fnType(dart.void, [])
    }));
    dart.setLibraryUri(UnmodifiableSetMixin, L44);
    return UnmodifiableSetMixin;
  });
  unmodifiable_wrappers.UnmodifiableSetMixin = unmodifiable_wrappers.UnmodifiableSetMixin$();
  dart.addTypeTests(unmodifiable_wrappers.UnmodifiableSetMixin, _is_UnmodifiableSetMixin_default);
  const _is_UnionSet_default = Symbol('_is_UnionSet_default');
  union_set.UnionSet$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    var intLAndSetLOfELTointL = () => (intLAndSetLOfELTointL = dart.constFn(dart.fnType(intL(), [intL(), SetLOfEL()])))();
    var SetLOfELToSetLOfEL = () => (SetLOfELToSetLOfEL = dart.constFn(dart.fnType(SetLOfEL(), [SetLOfEL()])))();
    var LinkedHashSetOfEL = () => (LinkedHashSetOfEL = dart.constFn(collection.LinkedHashSet$(EL())))();
    var SetLOfELToboolL = () => (SetLOfELToboolL = dart.constFn(dart.fnType(boolL(), [SetLOfEL()])))();
    var SetLOfELToEL = () => (SetLOfELToEL = dart.constFn(dart.fnType(EL(), [SetLOfEL()])))();
    var ELToboolL = () => (ELToboolL = dart.constFn(dart.fnType(boolL(), [EL()])))();
    const SetBase_UnmodifiableSetMixin$36 = class SetBase_UnmodifiableSetMixin extends collection.SetBase$(dart.legacy(E)) {};
    (SetBase_UnmodifiableSetMixin$36.new = function() {
    }).prototype = SetBase_UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(SetBase_UnmodifiableSetMixin$36, unmodifiable_wrappers.UnmodifiableSetMixin$(dart.legacy(E)));
    class UnionSet extends SetBase_UnmodifiableSetMixin$36 {
      get length() {
        return dart.test(this[_disjoint]) ? this[_sets$][$fold](intL(), 0, dart.fn((length, set) => dart.notNull(length) + dart.notNull(set[$length]), intLAndSetLOfELTointL())) : this[_iterable$0][$length];
      }
      get iterator() {
        return this[_iterable$0][$iterator];
      }
      get [_iterable$0]() {
        let allElements = this[_sets$][$expand](EL(), dart.fn(set => set, SetLOfELToSetLOfEL()));
        return dart.test(this[_disjoint]) ? allElements : allElements[$where](dart.bind(LinkedHashSetOfEL().new(), 'add'));
      }
      contains(element) {
        return this[_sets$][$any](dart.fn(set => set.contains(element), SetLOfELToboolL()));
      }
      lookup(element) {
        if (element == null) return null;
        return this[_sets$][$map](EL(), dart.fn(set => set.lookup(element), SetLOfELToEL()))[$firstWhere](dart.fn(result => result != null, ELToboolL()), {orElse: dart.fn(() => null, VoidToNullN())});
      }
      toSet() {
        let result = LinkedHashSetOfEL().new();
        for (let set of this[_sets$]) {
          result.addAll(set);
        }
        return result;
      }
    }
    (UnionSet.new = function(_sets, opts) {
      let disjoint = opts && 'disjoint' in opts ? opts.disjoint : false;
      this[_sets$] = _sets;
      this[_disjoint] = disjoint;
      ;
    }).prototype = UnionSet.prototype;
    (UnionSet.from = function(sets, opts) {
      let disjoint = opts && 'disjoint' in opts ? opts.disjoint : false;
      UnionSet.new.call(this, sets[$toSet](), {disjoint: disjoint});
    }).prototype = UnionSet.prototype;
    dart.addTypeTests(UnionSet);
    UnionSet.prototype[_is_UnionSet_default] = true;
    dart.addTypeCaches(UnionSet);
    dart.setMethodSignature(UnionSet, () => ({
      __proto__: dart.getMethods(UnionSet.__proto__),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      lookup: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      toSet: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      [$toSet]: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [])
    }));
    dart.setGetterSignature(UnionSet, () => ({
      __proto__: dart.getGetters(UnionSet.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int),
      iterator: dart.legacy(core.Iterator$(dart.legacy(E))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(E))),
      [_iterable$0]: dart.legacy(core.Iterable$(dart.legacy(E)))
    }));
    dart.setLibraryUri(UnionSet, L45);
    dart.setFieldSignature(UnionSet, () => ({
      __proto__: dart.getFields(UnionSet.__proto__),
      [_sets$]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core.Set$(dart.legacy(E)))))),
      [_disjoint]: dart.finalFieldType(dart.legacy(core.bool))
    }));
    dart.defineExtensionMethods(UnionSet, ['contains', 'toSet']);
    dart.defineExtensionAccessors(UnionSet, ['length', 'iterator']);
    return UnionSet;
  });
  union_set.UnionSet = union_set.UnionSet$();
  dart.addTypeTests(union_set.UnionSet, _is_UnionSet_default);
  var _set = dart.privateName(union_set_controller, "_set");
  var _sets = dart.privateName(union_set_controller, "_sets");
  const _is_UnionSetController_default = Symbol('_is_UnionSetController_default');
  union_set_controller.UnionSetController$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    var LinkedHashSetOfSetLOfEL = () => (LinkedHashSetOfSetLOfEL = dart.constFn(collection.LinkedHashSet$(SetLOfEL())))();
    var UnionSetOfEL = () => (UnionSetOfEL = dart.constFn(union_set.UnionSet$(EL())))();
    class UnionSetController extends core.Object {
      get set() {
        return this[_set];
      }
      add(component) {
        SetLOfEL().as(component);
        this[_sets].add(component);
      }
      remove(component) {
        SetLOfEL().as(component);
        return this[_sets].remove(component);
      }
    }
    (UnionSetController.new = function(opts) {
      let disjoint = opts && 'disjoint' in opts ? opts.disjoint : false;
      this[_set] = null;
      this[_sets] = LinkedHashSetOfSetLOfEL().new();
      this[_set] = new (UnionSetOfEL()).new(this[_sets], {disjoint: disjoint});
    }).prototype = UnionSetController.prototype;
    dart.addTypeTests(UnionSetController);
    UnionSetController.prototype[_is_UnionSetController_default] = true;
    dart.addTypeCaches(UnionSetController);
    dart.setMethodSignature(UnionSetController, () => ({
      __proto__: dart.getMethods(UnionSetController.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(UnionSetController, () => ({
      __proto__: dart.getGetters(UnionSetController.__proto__),
      set: dart.legacy(union_set.UnionSet$(dart.legacy(E)))
    }));
    dart.setLibraryUri(UnionSetController, L46);
    dart.setFieldSignature(UnionSetController, () => ({
      __proto__: dart.getFields(UnionSetController.__proto__),
      [_set]: dart.fieldType(dart.legacy(union_set.UnionSet$(dart.legacy(E)))),
      [_sets]: dart.finalFieldType(dart.legacy(core.Set$(dart.legacy(core.Set$(dart.legacy(E))))))
    }));
    return UnionSetController;
  });
  union_set_controller.UnionSetController = union_set_controller.UnionSetController$();
  dart.addTypeTests(union_set_controller.UnionSetController, _is_UnionSetController_default);
  var _listBase = dart.privateName(wrappers, "_listBase");
  const _is_DelegatingList_default = Symbol('_is_DelegatingList_default');
  wrappers.DelegatingList$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var ListOfEL = () => (ListOfEL = dart.constFn(core.List$(EL())))();
    var ListLOfEL = () => (ListLOfEL = dart.constFn(dart.legacy(ListOfEL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    class DelegatingList extends wrappers.DelegatingIterable$(dart.legacy(E)) {
      static typed(E, base) {
        return base[$cast](dart.legacy(E));
      }
      get [_listBase]() {
        return ListLOfEL().as(this[_base$1]);
      }
      _get(index) {
        return this[_listBase][$_get](index);
      }
      _set(index, value$) {
        let value = value$;
        EL().as(value);
        this[_listBase][$_set](index, value);
        return value$;
      }
      ['+'](other) {
        ListLOfEL().as(other);
        return this[_listBase][$plus](other);
      }
      add(value) {
        EL().as(value);
        this[_listBase][$add](value);
      }
      addAll(iterable) {
        IterableLOfEL().as(iterable);
        this[_listBase][$addAll](iterable);
      }
      asMap() {
        return this[_listBase][$asMap]();
      }
      cast(T) {
        return this[_listBase][$cast](dart.legacy(T));
      }
      clear() {
        this[_listBase][$clear]();
      }
      fillRange(start, end, fillValue = null) {
        EL().as(fillValue);
        this[_listBase][$fillRange](start, end, fillValue);
      }
      set first(value) {
        EL().as(value);
        if (dart.test(this.isEmpty)) dart.throw(new core.IndexError.new(0, this));
        this._set(0, value);
      }
      get first() {
        return super.first;
      }
      getRange(start, end) {
        return this[_listBase][$getRange](start, end);
      }
      indexOf(element, start = 0) {
        EL().as(element);
        return this[_listBase][$indexOf](element, start);
      }
      indexWhere(test, start = 0) {
        return this[_listBase][$indexWhere](test, start);
      }
      insert(index, element) {
        EL().as(element);
        this[_listBase][$insert](index, element);
      }
      insertAll(index, iterable) {
        IterableLOfEL().as(iterable);
        this[_listBase][$insertAll](index, iterable);
      }
      set last(value) {
        EL().as(value);
        if (dart.test(this.isEmpty)) dart.throw(new core.IndexError.new(0, this));
        this._set(dart.notNull(this.length) - 1, value);
      }
      get last() {
        return super.last;
      }
      lastIndexOf(element, start = null) {
        EL().as(element);
        return this[_listBase][$lastIndexOf](element, start);
      }
      lastIndexWhere(test, start = null) {
        return this[_listBase][$lastIndexWhere](test, start);
      }
      set length(newLength) {
        this[_listBase][$length] = newLength;
      }
      get length() {
        return super.length;
      }
      remove(value) {
        return this[_listBase][$remove](value);
      }
      removeAt(index) {
        return this[_listBase][$removeAt](index);
      }
      removeLast() {
        return this[_listBase][$removeLast]();
      }
      removeRange(start, end) {
        this[_listBase][$removeRange](start, end);
      }
      removeWhere(test) {
        this[_listBase][$removeWhere](test);
      }
      replaceRange(start, end, iterable) {
        IterableLOfEL().as(iterable);
        this[_listBase][$replaceRange](start, end, iterable);
      }
      retainWhere(test) {
        this[_listBase][$retainWhere](test);
      }
      retype(T) {
        return this.cast(dart.legacy(T));
      }
      get reversed() {
        return this[_listBase][$reversed];
      }
      setAll(index, iterable) {
        IterableLOfEL().as(iterable);
        this[_listBase][$setAll](index, iterable);
      }
      setRange(start, end, iterable, skipCount = 0) {
        IterableLOfEL().as(iterable);
        this[_listBase][$setRange](start, end, iterable, skipCount);
      }
      shuffle(random = null) {
        this[_listBase][$shuffle](random);
      }
      sort(compare = null) {
        this[_listBase][$sort](compare);
      }
      sublist(start, end = null) {
        return this[_listBase][$sublist](start, end);
      }
    }
    (DelegatingList.new = function(base) {
      DelegatingList.__proto__.new.call(this, base);
      ;
    }).prototype = DelegatingList.prototype;
    DelegatingList.prototype[dart.isList] = true;
    dart.addTypeTests(DelegatingList);
    DelegatingList.prototype[_is_DelegatingList_default] = true;
    dart.addTypeCaches(DelegatingList);
    DelegatingList[dart.implements] = () => [core.List$(dart.legacy(E))];
    dart.setMethodSignature(DelegatingList, () => ({
      __proto__: dart.getMethods(DelegatingList.__proto__),
      _get: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$_get]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      _set: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      '+': dart.fnType(dart.legacy(core.List$(dart.legacy(E))), [dart.legacy(core.Object)]),
      [$plus]: dart.fnType(dart.legacy(core.List$(dart.legacy(E))), [dart.legacy(core.Object)]),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$add]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      asMap: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(E))), []),
      [$asMap]: dart.fnType(dart.legacy(core.Map$(dart.legacy(core.int), dart.legacy(E))), []),
      cast: dart.gFnType(T => [dart.legacy(core.List$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(core.List$(dart.legacy(T))), []]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, []),
      fillRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.Object)]),
      [$fillRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)], [dart.legacy(core.Object)]),
      getRange: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.int), dart.legacy(core.int)]),
      [$getRange]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.int), dart.legacy(core.int)]),
      indexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)], [dart.legacy(core.int)]),
      [$indexOf]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)], [dart.legacy(core.int)]),
      indexWhere: dart.fnType(dart.legacy(core.int), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], [dart.legacy(core.int)]),
      [$indexWhere]: dart.fnType(dart.legacy(core.int), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], [dart.legacy(core.int)]),
      insert: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insert]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      insertAll: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      lastIndexOf: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)], [dart.legacy(core.int)]),
      [$lastIndexOf]: dart.fnType(dart.legacy(core.int), [dart.legacy(core.Object)], [dart.legacy(core.int)]),
      lastIndexWhere: dart.fnType(dart.legacy(core.int), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], [dart.legacy(core.int)]),
      [$lastIndexWhere]: dart.fnType(dart.legacy(core.int), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], [dart.legacy(core.int)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAt: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$removeAt]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      removeLast: dart.fnType(dart.legacy(E), []),
      [$removeLast]: dart.fnType(dart.legacy(E), []),
      removeRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      [$removeRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$removeWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      replaceRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$retainWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retype: dart.gFnType(T => [dart.legacy(core.List$(dart.legacy(T))), []]),
      setAll: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$setAll]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      setRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)], [dart.legacy(core.int)]),
      [$setRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)], [dart.legacy(core.int)]),
      shuffle: dart.fnType(dart.void, [], [dart.legacy(math.Random)]),
      [$shuffle]: dart.fnType(dart.void, [], [dart.legacy(math.Random)]),
      sort: dart.fnType(dart.void, [], [dart.legacy(dart.fnType(dart.legacy(core.int), [dart.legacy(E), dart.legacy(E)]))]),
      [$sort]: dart.fnType(dart.void, [], [dart.legacy(dart.fnType(dart.legacy(core.int), [dart.legacy(E), dart.legacy(E)]))]),
      sublist: dart.fnType(dart.legacy(core.List$(dart.legacy(E))), [dart.legacy(core.int)], [dart.legacy(core.int)]),
      [$sublist]: dart.fnType(dart.legacy(core.List$(dart.legacy(E))), [dart.legacy(core.int)], [dart.legacy(core.int)])
    }));
    dart.setGetterSignature(DelegatingList, () => ({
      __proto__: dart.getGetters(DelegatingList.__proto__),
      [_listBase]: dart.legacy(core.List$(dart.legacy(E))),
      reversed: dart.legacy(core.Iterable$(dart.legacy(E))),
      [$reversed]: dart.legacy(core.Iterable$(dart.legacy(E)))
    }));
    dart.setSetterSignature(DelegatingList, () => ({
      __proto__: dart.getSetters(DelegatingList.__proto__),
      first: dart.legacy(core.Object),
      [$first]: dart.legacy(core.Object),
      last: dart.legacy(core.Object),
      [$last]: dart.legacy(core.Object),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(DelegatingList, L37);
    dart.defineExtensionMethods(DelegatingList, [
      '_get',
      '_set',
      '+',
      'add',
      'addAll',
      'asMap',
      'cast',
      'clear',
      'fillRange',
      'getRange',
      'indexOf',
      'indexWhere',
      'insert',
      'insertAll',
      'lastIndexOf',
      'lastIndexWhere',
      'remove',
      'removeAt',
      'removeLast',
      'removeRange',
      'removeWhere',
      'replaceRange',
      'retainWhere',
      'setAll',
      'setRange',
      'shuffle',
      'sort',
      'sublist'
    ]);
    dart.defineExtensionAccessors(DelegatingList, ['first', 'last', 'length', 'reversed']);
    return DelegatingList;
  });
  wrappers.DelegatingList = wrappers.DelegatingList$();
  dart.addTypeTests(wrappers.DelegatingList, _is_DelegatingList_default);
  const _is_NonGrowableListMixin_default = Symbol('_is_NonGrowableListMixin_default');
  unmodifiable_wrappers.NonGrowableListMixin$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    class NonGrowableListMixin extends core.Object {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot change the length of a fixed-length list"));
      }
      set length(newLength) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      add(value) {
        EL().as(value);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(boolL());
      }
      addAll(iterable) {
        IterableLOfEL().as(iterable);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      insert(index, element) {
        EL().as(element);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      insertAll(index, iterable) {
        IterableLOfEL().as(iterable);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      remove(value) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(boolL());
      }
      removeAt(index) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(EL());
      }
      removeLast() {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(EL());
      }
      removeWhere(test) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      retainWhere(test) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      removeRange(start, end) {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      replaceRange(start, end, iterable) {
        IterableLOfEL().as(iterable);
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      clear() {
        return unmodifiable_wrappers.NonGrowableListMixin._throw(dart.void);
      }
      [Symbol.iterator]() {
        return new dart.JsIterator(this[$iterator]);
      }
    }
    (NonGrowableListMixin.new = function() {
      ;
    }).prototype = NonGrowableListMixin.prototype;
    NonGrowableListMixin.prototype[dart.isList] = true;
    dart.addTypeTests(NonGrowableListMixin);
    NonGrowableListMixin.prototype[_is_NonGrowableListMixin_default] = true;
    dart.addTypeCaches(NonGrowableListMixin);
    NonGrowableListMixin[dart.implements] = () => [core.List$(dart.legacy(E))];
    dart.setMethodSignature(NonGrowableListMixin, () => ({
      __proto__: dart.getMethods(NonGrowableListMixin.__proto__),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$add]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      insert: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insert]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      insertAll: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      [$insertAll]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAt: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      [$removeAt]: dart.fnType(dart.legacy(E), [dart.legacy(core.int)]),
      removeLast: dart.fnType(dart.legacy(E), []),
      [$removeLast]: dart.fnType(dart.legacy(E), []),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$removeWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      [$retainWhere]: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      removeRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      [$removeRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int)]),
      replaceRange: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
      [$replaceRange]: dart.fnType(dart.void, [dart.legacy(core.int), dart.legacy(core.int), dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setSetterSignature(NonGrowableListMixin, () => ({
      __proto__: dart.getSetters(NonGrowableListMixin.__proto__),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int)
    }));
    dart.setLibraryUri(NonGrowableListMixin, L44);
    dart.defineExtensionMethods(NonGrowableListMixin, [
      'add',
      'addAll',
      'insert',
      'insertAll',
      'remove',
      'removeAt',
      'removeLast',
      'removeWhere',
      'retainWhere',
      'removeRange',
      'replaceRange',
      'clear'
    ]);
    dart.defineExtensionAccessors(NonGrowableListMixin, ['length']);
    return NonGrowableListMixin;
  });
  unmodifiable_wrappers.NonGrowableListMixin = unmodifiable_wrappers.NonGrowableListMixin$();
  dart.addTypeTests(unmodifiable_wrappers.NonGrowableListMixin, _is_NonGrowableListMixin_default);
  const _is_NonGrowableListView_default = Symbol('_is_NonGrowableListView_default');
  unmodifiable_wrappers.NonGrowableListView$ = dart.generic(E => {
    const DelegatingList_NonGrowableListMixin$36 = class DelegatingList_NonGrowableListMixin extends wrappers.DelegatingList$(dart.legacy(E)) {};
    (DelegatingList_NonGrowableListMixin$36.new = function(base) {
      DelegatingList_NonGrowableListMixin$36.__proto__.new.call(this, base);
    }).prototype = DelegatingList_NonGrowableListMixin$36.prototype;
    dart.applyMixin(DelegatingList_NonGrowableListMixin$36, unmodifiable_wrappers.NonGrowableListMixin$(dart.legacy(E)));
    class NonGrowableListView extends DelegatingList_NonGrowableListMixin$36 {}
    (NonGrowableListView.new = function(listBase) {
      NonGrowableListView.__proto__.new.call(this, listBase);
      ;
    }).prototype = NonGrowableListView.prototype;
    dart.addTypeTests(NonGrowableListView);
    NonGrowableListView.prototype[_is_NonGrowableListView_default] = true;
    dart.addTypeCaches(NonGrowableListView);
    dart.setLibraryUri(NonGrowableListView, L44);
    return NonGrowableListView;
  });
  unmodifiable_wrappers.NonGrowableListView = unmodifiable_wrappers.NonGrowableListView$();
  dart.addTypeTests(unmodifiable_wrappers.NonGrowableListView, _is_NonGrowableListView_default);
  const _is_UnmodifiableSetView_default = Symbol('_is_UnmodifiableSetView_default');
  unmodifiable_wrappers.UnmodifiableSetView$ = dart.generic(E => {
    const DelegatingSet_UnmodifiableSetMixin$36 = class DelegatingSet_UnmodifiableSetMixin extends wrappers.DelegatingSet$(dart.legacy(E)) {};
    (DelegatingSet_UnmodifiableSetMixin$36.new = function(base) {
      DelegatingSet_UnmodifiableSetMixin$36.__proto__.new.call(this, base);
    }).prototype = DelegatingSet_UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(DelegatingSet_UnmodifiableSetMixin$36, unmodifiable_wrappers.UnmodifiableSetMixin$(dart.legacy(E)));
    class UnmodifiableSetView extends DelegatingSet_UnmodifiableSetMixin$36 {}
    (UnmodifiableSetView.new = function(setBase) {
      UnmodifiableSetView.__proto__.new.call(this, setBase);
      ;
    }).prototype = UnmodifiableSetView.prototype;
    dart.addTypeTests(UnmodifiableSetView);
    UnmodifiableSetView.prototype[_is_UnmodifiableSetView_default] = true;
    dart.addTypeCaches(UnmodifiableSetView);
    dart.setLibraryUri(UnmodifiableSetView, L44);
    return UnmodifiableSetView;
  });
  unmodifiable_wrappers.UnmodifiableSetView = unmodifiable_wrappers.UnmodifiableSetView$();
  dart.addTypeTests(unmodifiable_wrappers.UnmodifiableSetView, _is_UnmodifiableSetView_default);
  const _is_UnmodifiableMapMixin_default = Symbol('_is_UnmodifiableMapMixin_default');
  unmodifiable_wrappers.UnmodifiableMapMixin$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var MapOfKL$VL = () => (MapOfKL$VL = dart.constFn(core.Map$(KL(), VL())))();
    var MapLOfKL$VL = () => (MapLOfKL$VL = dart.constFn(dart.legacy(MapOfKL$VL())))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    var VoidToVL = () => (VoidToVL = dart.constFn(dart.fnType(VL(), [])))();
    var VoidToLVL = () => (VoidToLVL = dart.constFn(dart.legacy(VoidToVL())))();
    class UnmodifiableMapMixin extends core.Object {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable Map"));
      }
      _set(key, value$) {
        let value = value$;
        KL().as(key);
        VL().as(value);
        unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
        return value$;
      }
      putIfAbsent(key, ifAbsent) {
        KL().as(key);
        VoidToLVL().as(ifAbsent);
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(VL());
      }
      addAll(other) {
        MapLOfKL$VL().as(other);
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
      remove(key) {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(VL());
      }
      clear() {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
      set first(_) {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
      set last(_) {
        return unmodifiable_wrappers.UnmodifiableMapMixin._throw(dart.void);
      }
    }
    (UnmodifiableMapMixin.new = function() {
      ;
    }).prototype = UnmodifiableMapMixin.prototype;
    UnmodifiableMapMixin.prototype[dart.isMap] = true;
    dart.addTypeTests(UnmodifiableMapMixin);
    UnmodifiableMapMixin.prototype[_is_UnmodifiableMapMixin_default] = true;
    dart.addTypeCaches(UnmodifiableMapMixin);
    UnmodifiableMapMixin[dart.implements] = () => [core.Map$(dart.legacy(K), dart.legacy(V))];
    dart.setMethodSignature(UnmodifiableMapMixin, () => ({
      __proto__: dart.getMethods(UnmodifiableMapMixin.__proto__),
      _set: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$_set]: dart.fnType(dart.void, [dart.legacy(core.Object), dart.legacy(core.Object)]),
      putIfAbsent: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      [$putIfAbsent]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object), dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      [$addAll]: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      [$remove]: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      [$clear]: dart.fnType(dart.void, [])
    }));
    dart.setSetterSignature(UnmodifiableMapMixin, () => ({
      __proto__: dart.getSetters(UnmodifiableMapMixin.__proto__),
      first: dart.dynamic,
      last: dart.dynamic
    }));
    dart.setLibraryUri(UnmodifiableMapMixin, L44);
    dart.defineExtensionMethods(UnmodifiableMapMixin, [
      '_set',
      'putIfAbsent',
      'addAll',
      'remove',
      'clear'
    ]);
    return UnmodifiableMapMixin;
  });
  unmodifiable_wrappers.UnmodifiableMapMixin = unmodifiable_wrappers.UnmodifiableMapMixin$();
  dart.addTypeTests(unmodifiable_wrappers.UnmodifiableMapMixin, _is_UnmodifiableMapMixin_default);
  var _baseQueue = dart.privateName(wrappers, "_baseQueue");
  const _is_DelegatingQueue_default = Symbol('_is_DelegatingQueue_default');
  wrappers.DelegatingQueue$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var QueueOfEL = () => (QueueOfEL = dart.constFn(collection.Queue$(EL())))();
    var QueueLOfEL = () => (QueueLOfEL = dart.constFn(dart.legacy(QueueOfEL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    class DelegatingQueue extends wrappers.DelegatingIterable$(dart.legacy(E)) {
      static typed(E, base) {
        return base.cast(dart.legacy(E));
      }
      get [_baseQueue]() {
        return QueueLOfEL().as(this[_base$1]);
      }
      add(value) {
        EL().as(value);
        this[_baseQueue].add(value);
      }
      addAll(iterable) {
        IterableLOfEL().as(iterable);
        this[_baseQueue].addAll(iterable);
      }
      addFirst(value) {
        EL().as(value);
        this[_baseQueue].addFirst(value);
      }
      addLast(value) {
        EL().as(value);
        this[_baseQueue].addLast(value);
      }
      cast(T) {
        return this[_baseQueue].cast(dart.legacy(T));
      }
      clear() {
        this[_baseQueue].clear();
      }
      remove(object) {
        return this[_baseQueue].remove(object);
      }
      removeWhere(test) {
        this[_baseQueue].removeWhere(test);
      }
      retainWhere(test) {
        this[_baseQueue].retainWhere(test);
      }
      retype(T) {
        return this.cast(dart.legacy(T));
      }
      removeFirst() {
        return this[_baseQueue].removeFirst();
      }
      removeLast() {
        return this[_baseQueue].removeLast();
      }
    }
    (DelegatingQueue.new = function(queue) {
      DelegatingQueue.__proto__.new.call(this, queue);
      ;
    }).prototype = DelegatingQueue.prototype;
    dart.addTypeTests(DelegatingQueue);
    DelegatingQueue.prototype[_is_DelegatingQueue_default] = true;
    dart.addTypeCaches(DelegatingQueue);
    DelegatingQueue[dart.implements] = () => [collection.Queue$(dart.legacy(E))];
    dart.setMethodSignature(DelegatingQueue, () => ({
      __proto__: dart.getMethods(DelegatingQueue.__proto__),
      add: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addFirst: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      addLast: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      cast: dart.gFnType(T => [dart.legacy(collection.Queue$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(collection.Queue$(dart.legacy(T))), []]),
      clear: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retype: dart.gFnType(T => [dart.legacy(collection.Queue$(dart.legacy(T))), []]),
      removeFirst: dart.fnType(dart.legacy(E), []),
      removeLast: dart.fnType(dart.legacy(E), [])
    }));
    dart.setGetterSignature(DelegatingQueue, () => ({
      __proto__: dart.getGetters(DelegatingQueue.__proto__),
      [_baseQueue]: dart.legacy(collection.Queue$(dart.legacy(E)))
    }));
    dart.setLibraryUri(DelegatingQueue, L37);
    dart.defineExtensionMethods(DelegatingQueue, ['cast']);
    return DelegatingQueue;
  });
  wrappers.DelegatingQueue = wrappers.DelegatingQueue$();
  dart.addTypeTests(wrappers.DelegatingQueue, _is_DelegatingQueue_default);
  var _baseMap = dart.privateName(wrappers, "_baseMap");
  const _is_MapKeySet_default = Symbol('_is_MapKeySet_default');
  wrappers.MapKeySet$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var ELToboolL = () => (ELToboolL = dart.constFn(dart.fnType(boolL(), [EL()])))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    const _DelegatingIterableBase_UnmodifiableSetMixin$36 = class _DelegatingIterableBase_UnmodifiableSetMixin extends wrappers._DelegatingIterableBase$(dart.legacy(E)) {};
    (_DelegatingIterableBase_UnmodifiableSetMixin$36.new = function() {
      _DelegatingIterableBase_UnmodifiableSetMixin$36.__proto__.new.call(this);
    }).prototype = _DelegatingIterableBase_UnmodifiableSetMixin$36.prototype;
    dart.applyMixin(_DelegatingIterableBase_UnmodifiableSetMixin$36, unmodifiable_wrappers.UnmodifiableSetMixin$(dart.legacy(E)));
    class MapKeySet extends _DelegatingIterableBase_UnmodifiableSetMixin$36 {
      get [_base$1]() {
        return this[_baseMap][$keys];
      }
      cast(T) {
        if (dart.legacy(wrappers.MapKeySet$(dart.legacy(T))).is(this)) {
          return dart.legacy(wrappers.MapKeySet$(dart.legacy(T))).as(this);
        }
        return core.Set.castFrom(EL(), dart.legacy(T), this);
      }
      contains(element) {
        return this[_baseMap][$containsKey](element);
      }
      get isEmpty() {
        return this[_baseMap][$isEmpty];
      }
      get isNotEmpty() {
        return this[_baseMap][$isNotEmpty];
      }
      get length() {
        return this[_baseMap][$length];
      }
      toString() {
        return "{" + dart.str(this[_base$1][$join](", ")) + "}";
      }
      containsAll(other) {
        return other[$every](dart.bind(this, 'contains'));
      }
      difference(other) {
        return this.where(dart.fn(element => !dart.test(other.contains(element)), ELToboolL()))[$toSet]();
      }
      intersection(other) {
        return this.where(dart.bind(other, 'contains'))[$toSet]();
      }
      lookup(element) {
        return dart.throw(new core.UnsupportedError.new("MapKeySet doesn't support lookup()."));
      }
      retype(T) {
        return core.Set.castFrom(EL(), dart.legacy(T), this);
      }
      union(other) {
        let t5;
        SetLOfEL().as(other);
        t5 = this.toSet();
        return (() => {
          t5.addAll(other);
          return t5;
        })();
      }
    }
    (MapKeySet.new = function(base) {
      this[_baseMap] = base;
      MapKeySet.__proto__.new.call(this);
      ;
    }).prototype = MapKeySet.prototype;
    dart.addTypeTests(MapKeySet);
    MapKeySet.prototype[_is_MapKeySet_default] = true;
    dart.addTypeCaches(MapKeySet);
    dart.setMethodSignature(MapKeySet, () => ({
      __proto__: dart.getMethods(MapKeySet.__proto__),
      cast: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      containsAll: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      difference: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      intersection: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      lookup: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      retype: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      union: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(MapKeySet, () => ({
      __proto__: dart.getGetters(MapKeySet.__proto__),
      [_base$1]: dart.legacy(core.Iterable$(dart.legacy(E)))
    }));
    dart.setLibraryUri(MapKeySet, L37);
    dart.setFieldSignature(MapKeySet, () => ({
      __proto__: dart.getFields(MapKeySet.__proto__),
      [_baseMap]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(E), dart.dynamic)))
    }));
    dart.defineExtensionMethods(MapKeySet, ['cast', 'contains', 'toString']);
    dart.defineExtensionAccessors(MapKeySet, ['isEmpty', 'isNotEmpty', 'length']);
    return MapKeySet;
  });
  wrappers.MapKeySet = wrappers.MapKeySet$();
  dart.addTypeTests(wrappers.MapKeySet, _is_MapKeySet_default);
  var _keyForValue = dart.privateName(wrappers, "_keyForValue");
  const _is_MapValueSet_default = Symbol('_is_MapValueSet_default');
  wrappers.MapValueSet$ = dart.generic((K, V) => {
    var KL = () => (KL = dart.constFn(dart.legacy(K)))();
    var KLAndVLToNullN = () => (KLAndVLToNullN = dart.constFn(dart.fnType(core.Null, [KL(), VL()])))();
    var VL = () => (VL = dart.constFn(dart.legacy(V)))();
    var VoidToVL = () => (VoidToVL = dart.constFn(dart.fnType(VL(), [])))();
    var IterableOfVL = () => (IterableOfVL = dart.constFn(core.Iterable$(VL())))();
    var IterableLOfVL = () => (IterableLOfVL = dart.constFn(dart.legacy(IterableOfVL())))();
    var VLToboolL = () => (VLToboolL = dart.constFn(dart.fnType(boolL(), [VL()])))();
    var _IdentityHashSetOfVL = () => (_IdentityHashSetOfVL = dart.constFn(collection._IdentityHashSet$(VL())))();
    var SetOfVL = () => (SetOfVL = dart.constFn(core.Set$(VL())))();
    var SetLOfVL = () => (SetLOfVL = dart.constFn(dart.legacy(SetOfVL())))();
    class MapValueSet extends wrappers._DelegatingIterableBase$(dart.legacy(V)) {
      get [_base$1]() {
        return this[_baseMap][$values];
      }
      cast(T) {
        if (dart.legacy(core.Set$(dart.legacy(T))).is(this)) {
          return dart.legacy(core.Set$(dart.legacy(T))).as(this);
        }
        return core.Set.castFrom(VL(), dart.legacy(T), this);
      }
      contains(element) {
        let t5;
        if (element != null && !VL().is(element)) return false;
        let key = (t5 = VL().as(element), this[_keyForValue](t5));
        return this[_baseMap][$containsKey](key);
      }
      get isEmpty() {
        return this[_baseMap][$isEmpty];
      }
      get isNotEmpty() {
        return this[_baseMap][$isNotEmpty];
      }
      get length() {
        return this[_baseMap][$length];
      }
      toString() {
        return dart.toString(this.toSet());
      }
      add(value) {
        let t5;
        VL().as(value);
        let key = (t5 = value, this[_keyForValue](t5));
        let result = false;
        this[_baseMap][$putIfAbsent](key, dart.fn(() => {
          result = true;
          return value;
        }, VoidToVL()));
        return result;
      }
      addAll(elements) {
        IterableLOfVL().as(elements);
        return elements[$forEach](dart.bind(this, 'add'));
      }
      clear() {
        return this[_baseMap][$clear]();
      }
      containsAll(other) {
        return other[$every](dart.bind(this, 'contains'));
      }
      difference(other) {
        return this.where(dart.fn(element => !dart.test(other.contains(element)), VLToboolL()))[$toSet]();
      }
      intersection(other) {
        return this.where(dart.bind(other, 'contains'))[$toSet]();
      }
      lookup(element) {
        let t5;
        if (element != null && !VL().is(element)) return null;
        let key = (t5 = VL().as(element), this[_keyForValue](t5));
        return this[_baseMap][$_get](key);
      }
      remove(element) {
        let t5;
        if (element != null && !VL().is(element)) return false;
        let key = (t5 = VL().as(element), this[_keyForValue](t5));
        if (!dart.test(this[_baseMap][$containsKey](key))) return false;
        this[_baseMap][$remove](key);
        return true;
      }
      removeAll(elements) {
        return elements[$forEach](dart.bind(this, 'remove'));
      }
      removeWhere(test) {
        let toRemove = [];
        this[_baseMap][$forEach](dart.fn((key, value) => {
          if (dart.test(test(value))) toRemove[$add](key);
        }, KLAndVLToNullN()));
        toRemove[$forEach](dart.bind(this[_baseMap], $remove));
      }
      retainAll(elements) {
        let t5;
        let valuesToRetain = new (_IdentityHashSetOfVL()).new();
        for (let element of elements) {
          if (element != null && !VL().is(element)) continue;
          let key = (t5 = VL().as(element), this[_keyForValue](t5));
          if (!dart.test(this[_baseMap][$containsKey](key))) continue;
          valuesToRetain.add(this[_baseMap][$_get](key));
        }
        let keysToRemove = [];
        this[_baseMap][$forEach](dart.fn((k, v) => {
          if (!dart.test(valuesToRetain.contains(v))) keysToRemove[$add](k);
        }, KLAndVLToNullN()));
        keysToRemove[$forEach](dart.bind(this[_baseMap], $remove));
      }
      retainWhere(test) {
        return this.removeWhere(dart.fn(element => !dart.test(test(element)), VLToboolL()));
      }
      retype(T) {
        return core.Set.castFrom(VL(), dart.legacy(T), this);
      }
      union(other) {
        let t5;
        SetLOfVL().as(other);
        t5 = this.toSet();
        return (() => {
          t5.addAll(other);
          return t5;
        })();
      }
    }
    (MapValueSet.new = function(base, keyForValue) {
      this[_baseMap] = base;
      this[_keyForValue] = keyForValue;
      MapValueSet.__proto__.new.call(this);
      ;
    }).prototype = MapValueSet.prototype;
    dart.addTypeTests(MapValueSet);
    MapValueSet.prototype[_is_MapValueSet_default] = true;
    dart.addTypeCaches(MapValueSet);
    MapValueSet[dart.implements] = () => [core.Set$(dart.legacy(V))];
    dart.setMethodSignature(MapValueSet, () => ({
      __proto__: dart.getMethods(MapValueSet.__proto__),
      cast: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      containsAll: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      difference: dart.fnType(dart.legacy(core.Set$(dart.legacy(V))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      intersection: dart.fnType(dart.legacy(core.Set$(dart.legacy(V))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      lookup: dart.fnType(dart.legacy(V), [dart.legacy(core.Object)]),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(V)]))]),
      retainAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(V)]))]),
      retype: dart.gFnType(T => [dart.legacy(core.Set$(dart.legacy(T))), []]),
      union: dart.fnType(dart.legacy(core.Set$(dart.legacy(V))), [dart.legacy(core.Object)])
    }));
    dart.setGetterSignature(MapValueSet, () => ({
      __proto__: dart.getGetters(MapValueSet.__proto__),
      [_base$1]: dart.legacy(core.Iterable$(dart.legacy(V)))
    }));
    dart.setLibraryUri(MapValueSet, L37);
    dart.setFieldSignature(MapValueSet, () => ({
      __proto__: dart.getFields(MapValueSet.__proto__),
      [_baseMap]: dart.finalFieldType(dart.legacy(core.Map$(dart.legacy(K), dart.legacy(V)))),
      [_keyForValue]: dart.finalFieldType(dart.legacy(dart.fnType(dart.legacy(K), [dart.legacy(V)])))
    }));
    dart.defineExtensionMethods(MapValueSet, ['cast', 'contains', 'toString']);
    dart.defineExtensionAccessors(MapValueSet, ['isEmpty', 'isNotEmpty', 'length']);
    return MapValueSet;
  });
  wrappers.MapValueSet = wrappers.MapValueSet$();
  dart.addTypeTests(wrappers.MapValueSet, _is_MapValueSet_default);
  const _is_Pair_default = Symbol('_is_Pair_default');
  var first$ = dart.privateName(utils$0, "Pair.first");
  var last$ = dart.privateName(utils$0, "Pair.last");
  utils$0.Pair$ = dart.generic((E, F) => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var FL = () => (FL = dart.constFn(dart.legacy(F)))();
    class Pair extends core.Object {
      get first() {
        return this[first$];
      }
      set first(value) {
        this[first$] = EL().as(value);
      }
      get last() {
        return this[last$];
      }
      set last(value) {
        this[last$] = FL().as(value);
      }
    }
    (Pair.new = function(first, last) {
      this[first$] = first;
      this[last$] = last;
      ;
    }).prototype = Pair.prototype;
    dart.addTypeTests(Pair);
    Pair.prototype[_is_Pair_default] = true;
    dart.addTypeCaches(Pair);
    dart.setLibraryUri(Pair, L47);
    dart.setFieldSignature(Pair, () => ({
      __proto__: dart.getFields(Pair.__proto__),
      first: dart.fieldType(dart.legacy(E)),
      last: dart.fieldType(dart.legacy(F))
    }));
    return Pair;
  });
  utils$0.Pair = utils$0.Pair$();
  dart.addTypeTests(utils$0.Pair, _is_Pair_default);
  utils$0.defaultCompare = function defaultCompare(T) {
    return dart.fn((value1, value2) => ComparableL().as(value1)[$compareTo](value2), dart.fnType(intL(), [dart.legacy(T), dart.legacy(T)]));
  };
  var _base$4 = dart.privateName(empty_unmodifiable_set, "_base");
  var C27;
  var _setBase$ = dart.privateName(empty_unmodifiable_set, "_setBase");
  var C28;
  const _is_EmptyUnmodifiableSet_default = Symbol('_is_EmptyUnmodifiableSet_default');
  empty_unmodifiable_set.EmptyUnmodifiableSet$ = dart.generic(E => {
    var EL = () => (EL = dart.constFn(dart.legacy(E)))();
    var EmptyIterableOfEL = () => (EmptyIterableOfEL = dart.constFn(_internal.EmptyIterable$(EL())))();
    var IterableOfEL = () => (IterableOfEL = dart.constFn(core.Iterable$(EL())))();
    var IterableLOfEL = () => (IterableLOfEL = dart.constFn(dart.legacy(IterableOfEL())))();
    var LinkedHashSetOfEL = () => (LinkedHashSetOfEL = dart.constFn(collection.LinkedHashSet$(EL())))();
    var VoidToEL = () => (VoidToEL = dart.constFn(dart.fnType(EL(), [])))();
    var VoidToLEL = () => (VoidToLEL = dart.constFn(dart.legacy(VoidToEL())))();
    var SetOfEL = () => (SetOfEL = dart.constFn(core.Set$(EL())))();
    var SetLOfEL = () => (SetLOfEL = dart.constFn(dart.legacy(SetOfEL())))();
    class EmptyUnmodifiableSet extends collection.IterableBase$(dart.legacy(E)) {
      static _throw(T) {
        dart.throw(new core.UnsupportedError.new("Cannot modify an unmodifiable Set"));
      }
      get iterator() {
        return new (EmptyIterableOfEL()).new()[$iterator];
      }
      get length() {
        return 0;
      }
      cast(T) {
        return new (empty_unmodifiable_set.EmptyUnmodifiableSet$(dart.legacy(T))).new();
      }
      contains(element) {
        return false;
      }
      containsAll(other) {
        return other[$isEmpty];
      }
      followedBy(other) {
        IterableLOfEL().as(other);
        return LinkedHashSetOfEL().from(other);
      }
      lookup(element) {
        return null;
      }
      retype(T) {
        return new (empty_unmodifiable_set.EmptyUnmodifiableSet$(dart.legacy(T))).new();
      }
      singleWhere(test, opts) {
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToLEL().as(orElse);
        return super[$singleWhere](test);
      }
      whereType(T) {
        return new (empty_unmodifiable_set.EmptyUnmodifiableSet$(dart.legacy(T))).new();
      }
      toSet() {
        return LinkedHashSetOfEL().new();
      }
      union(other) {
        SetLOfEL().as(other);
        return LinkedHashSetOfEL().from(other);
      }
      intersection(other) {
        return LinkedHashSetOfEL().new();
      }
      difference(other) {
        return LinkedHashSetOfEL().new();
      }
      add(value) {
        EL().as(value);
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(boolL());
      }
      addAll(elements) {
        IterableLOfEL().as(elements);
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      clear() {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      remove(element) {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(boolL());
      }
      removeAll(elements) {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      removeWhere(test) {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      retainWhere(test) {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      retainAll(elements) {
        return empty_unmodifiable_set.EmptyUnmodifiableSet._throw(dart.void);
      }
      get [_base$1]() {
        return IterableLOfEL().as(this.noSuchMethod(new core._Invocation.getter(C27 || CT.C27)));
      }
      get [_setBase]() {
        return SetLOfEL().as(this.noSuchMethod(new core._Invocation.getter(C28 || CT.C28)));
      }
    }
    (EmptyUnmodifiableSet.new = function() {
      EmptyUnmodifiableSet.__proto__.new.call(this);
      ;
    }).prototype = EmptyUnmodifiableSet.prototype;
    dart.addTypeTests(EmptyUnmodifiableSet);
    EmptyUnmodifiableSet.prototype[_is_EmptyUnmodifiableSet_default] = true;
    dart.addTypeCaches(EmptyUnmodifiableSet);
    EmptyUnmodifiableSet[dart.implements] = () => [unmodifiable_wrappers.UnmodifiableSetView$(dart.legacy(E))];
    dart.setMethodSignature(EmptyUnmodifiableSet, () => ({
      __proto__: dart.getMethods(EmptyUnmodifiableSet.__proto__),
      cast: dart.gFnType(T => [dart.legacy(empty_unmodifiable_set.EmptyUnmodifiableSet$(dart.legacy(T))), []]),
      [$cast]: dart.gFnType(T => [dart.legacy(empty_unmodifiable_set.EmptyUnmodifiableSet$(dart.legacy(T))), []]),
      contains: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      [$contains]: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      containsAll: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      followedBy: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.Object)]),
      [$followedBy]: dart.fnType(dart.legacy(core.Iterable$(dart.legacy(E))), [dart.legacy(core.Object)]),
      lookup: dart.fnType(dart.legacy(E), [dart.legacy(core.Object)]),
      retype: dart.gFnType(T => [dart.legacy(empty_unmodifiable_set.EmptyUnmodifiableSet$(dart.legacy(T))), []]),
      singleWhere: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      [$singleWhere]: dart.fnType(dart.legacy(E), [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))], {orElse: dart.legacy(core.Object)}, {}),
      whereType: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      [$whereType]: dart.gFnType(T => [dart.legacy(core.Iterable$(dart.legacy(T))), []]),
      toSet: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      [$toSet]: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), []),
      union: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Object)]),
      intersection: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      difference: dart.fnType(dart.legacy(core.Set$(dart.legacy(E))), [dart.legacy(core.Set$(dart.legacy(core.Object)))]),
      add: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      addAll: dart.fnType(dart.void, [dart.legacy(core.Object)]),
      clear: dart.fnType(dart.void, []),
      remove: dart.fnType(dart.legacy(core.bool), [dart.legacy(core.Object)]),
      removeAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))]),
      removeWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainWhere: dart.fnType(dart.void, [dart.legacy(dart.fnType(dart.legacy(core.bool), [dart.legacy(E)]))]),
      retainAll: dart.fnType(dart.void, [dart.legacy(core.Iterable$(dart.legacy(core.Object)))])
    }));
    dart.setGetterSignature(EmptyUnmodifiableSet, () => ({
      __proto__: dart.getGetters(EmptyUnmodifiableSet.__proto__),
      iterator: dart.legacy(core.Iterator$(dart.legacy(E))),
      [$iterator]: dart.legacy(core.Iterator$(dart.legacy(E))),
      length: dart.legacy(core.int),
      [$length]: dart.legacy(core.int),
      [_base$1]: dart.legacy(core.Iterable$(dart.legacy(E))),
      [_setBase]: dart.legacy(core.Set$(dart.legacy(E)))
    }));
    dart.setLibraryUri(EmptyUnmodifiableSet, L48);
    dart.defineExtensionMethods(EmptyUnmodifiableSet, [
      'cast',
      'contains',
      'followedBy',
      'singleWhere',
      'whereType',
      'toSet'
    ]);
    dart.defineExtensionAccessors(EmptyUnmodifiableSet, ['iterator', 'length']);
    return EmptyUnmodifiableSet;
  });
  empty_unmodifiable_set.EmptyUnmodifiableSet = empty_unmodifiable_set.EmptyUnmodifiableSet$();
  dart.addTypeTests(empty_unmodifiable_set.EmptyUnmodifiableSet, _is_EmptyUnmodifiableSet_default);
  dart.trackLibraries("main", {
    "org-dartlang-app:/main.dart": main,
    "package:args/args.dart": args,
    "package:cryptoutils/cryptoutils.dart": cryptoutils,
    "package:logger/logger.dart": logger,
    "package:args/src/arg_parser.dart": arg_parser,
    "package:args/src/arg_parser_exception.dart": arg_parser_exception,
    "package:args/src/arg_results.dart": arg_results,
    "package:args/src/option.dart": option$,
    "package:cryptoutils/utils.dart": utils,
    "package:cryptoutils/hash.dart": hash,
    "package:cryptoutils/encoding/base64.dart": base64,
    "package:logger/src/ansi_color.dart": ansi_color,
    "package:logger/src/filters/development_filter.dart": development_filter,
    "package:logger/src/filters/production_filter.dart": production_filter,
    "package:logger/src/outputs/console_output.dart": console_output,
    "package:logger/src/outputs/stream_output.dart": stream_output,
    "package:logger/src/outputs/memory_output.dart": memory_output,
    "package:logger/src/outputs/multi_output.dart": multi_output,
    "package:logger/src/printers/pretty_printer.dart": pretty_printer,
    "package:logger/src/printers/logfmt_printer.dart": logfmt_printer,
    "package:logger/src/printers/simple_printer.dart": simple_printer,
    "package:logger/src/printers/hybrid_printer.dart": hybrid_printer,
    "package:logger/src/printers/prefix_printer.dart": prefix_printer,
    "package:logger/src/log_output.dart": log_output,
    "package:logger/src/log_filter.dart": log_filter,
    "package:logger/src/log_printer.dart": log_printer,
    "package:logger/src/logger.dart": logger$,
    "package:args/src/allow_anything_parser.dart": allow_anything_parser,
    "package:args/src/parser.dart": parser,
    "package:args/src/usage.dart": usage,
    "package:collection/collection.dart": collection$,
    "package:args/src/utils.dart": utils$,
    "package:collection/src/algorithms.dart": algorithms,
    "package:collection/src/canonicalized_map.dart": canonicalized_map,
    "package:collection/src/combined_wrappers/combined_iterable.dart": combined_iterable,
    "package:collection/src/combined_wrappers/combined_list.dart": combined_list,
    "package:collection/src/combined_wrappers/combined_map.dart": combined_map,
    "package:collection/src/comparators.dart": comparators,
    "package:collection/src/equality.dart": equality,
    "package:collection/src/equality_map.dart": equality_map,
    "package:collection/src/equality_set.dart": equality_set,
    "package:collection/src/functions.dart": functions,
    "package:collection/src/iterable_zip.dart": iterable_zip,
    "package:collection/src/priority_queue.dart": priority_queue,
    "package:collection/src/queue_list.dart": queue_list,
    "package:collection/src/union_set.dart": union_set,
    "package:collection/src/union_set_controller.dart": union_set_controller,
    "package:collection/src/unmodifiable_wrappers.dart": unmodifiable_wrappers,
    "package:collection/src/wrappers.dart": wrappers,
    "package:collection/src/utils.dart": utils$0,
    "package:collection/src/empty_unmodifiable_set.dart": empty_unmodifiable_set
  }, {
    "package:cryptoutils/hash.dart": ["src/hash/fixed-sized-hashes.dart"]
  }, null);
  // Exports:
  return {
    main: main,
    args: args,
    cryptoutils: cryptoutils,
    logger: logger,
    src__arg_parser: arg_parser,
    src__arg_parser_exception: arg_parser_exception,
    src__arg_results: arg_results,
    src__option: option$,
    utils: utils,
    hash: hash,
    encoding__base64: base64,
    src__ansi_color: ansi_color,
    src__filters__development_filter: development_filter,
    src__filters__production_filter: production_filter,
    src__outputs__console_output: console_output,
    src__outputs__stream_output: stream_output,
    src__outputs__memory_output: memory_output,
    src__outputs__multi_output: multi_output,
    src__printers__pretty_printer: pretty_printer,
    src__printers__logfmt_printer: logfmt_printer,
    src__printers__simple_printer: simple_printer,
    src__printers__hybrid_printer: hybrid_printer,
    src__printers__prefix_printer: prefix_printer,
    src__log_output: log_output,
    src__log_filter: log_filter,
    src__log_printer: log_printer,
    src__logger: logger$,
    src__allow_anything_parser: allow_anything_parser,
    src__parser: parser,
    src__usage: usage,
    collection: collection$,
    src__utils: utils$,
    src__algorithms: algorithms,
    src__canonicalized_map: canonicalized_map,
    src__combined_wrappers__combined_iterable: combined_iterable,
    src__combined_wrappers__combined_list: combined_list,
    src__combined_wrappers__combined_map: combined_map,
    src__comparators: comparators,
    src__equality: equality,
    src__equality_map: equality_map,
    src__equality_set: equality_set,
    src__functions: functions,
    src__iterable_zip: iterable_zip,
    src__priority_queue: priority_queue,
    src__queue_list: queue_list,
    src__union_set: union_set,
    src__union_set_controller: union_set_controller,
    src__unmodifiable_wrappers: unmodifiable_wrappers,
    src__wrappers: wrappers,
    src__utils: utils$0,
    src__empty_unmodifiable_set: empty_unmodifiable_set
  };
}));

//# sourceMappingURL=main.map
